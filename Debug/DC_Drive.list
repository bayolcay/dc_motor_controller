
DC_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080052b4  080052b4  000152b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000354  20000000  08005464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .user_data    00000020  20000354  080057b8  00020354  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ce0  20000378  080057d8  00020378  2**3
                  ALLOC
  8 ._user_heap_stack 00000a00  20001058  080057d8  00021058  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dde1  00000000  00000000  0002039d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000046a5  00000000  00000000  0003e17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a9e4  00000000  00000000  00042823  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f80  00000000  00000000  0004d208  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001640  00000000  00000000  0004e188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008cdc  00000000  00000000  0004f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005712  00000000  00000000  000584a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005dbb6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030bc  00000000  00000000  0005dc34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000378 	.word	0x20000378
 8000128:	00000000 	.word	0x00000000
 800012c:	0800529c 	.word	0x0800529c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000037c 	.word	0x2000037c
 8000148:	0800529c 	.word	0x0800529c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_llsr>:
 800015c:	40d0      	lsrs	r0, r2
 800015e:	1c0b      	adds	r3, r1, #0
 8000160:	40d1      	lsrs	r1, r2
 8000162:	469c      	mov	ip, r3
 8000164:	3a20      	subs	r2, #32
 8000166:	40d3      	lsrs	r3, r2
 8000168:	4318      	orrs	r0, r3
 800016a:	4252      	negs	r2, r2
 800016c:	4663      	mov	r3, ip
 800016e:	4093      	lsls	r3, r2
 8000170:	4318      	orrs	r0, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_frsub>:
 8000174:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__addsf3>
 800017a:	bf00      	nop

0800017c <__aeabi_fsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000180 <__addsf3>:
 8000180:	0042      	lsls	r2, r0, #1
 8000182:	bf1f      	itttt	ne
 8000184:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000188:	ea92 0f03 	teqne	r2, r3
 800018c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000190:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000194:	d06a      	beq.n	800026c <__addsf3+0xec>
 8000196:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800019a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019e:	bfc1      	itttt	gt
 80001a0:	18d2      	addgt	r2, r2, r3
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	4048      	eorgt	r0, r1
 80001a6:	4041      	eorgt	r1, r0
 80001a8:	bfb8      	it	lt
 80001aa:	425b      	neglt	r3, r3
 80001ac:	2b19      	cmp	r3, #25
 80001ae:	bf88      	it	hi
 80001b0:	4770      	bxhi	lr
 80001b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4240      	negne	r0, r0
 80001c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ce:	bf18      	it	ne
 80001d0:	4249      	negne	r1, r1
 80001d2:	ea92 0f03 	teq	r2, r3
 80001d6:	d03f      	beq.n	8000258 <__addsf3+0xd8>
 80001d8:	f1a2 0201 	sub.w	r2, r2, #1
 80001dc:	fa41 fc03 	asr.w	ip, r1, r3
 80001e0:	eb10 000c 	adds.w	r0, r0, ip
 80001e4:	f1c3 0320 	rsb	r3, r3, #32
 80001e8:	fa01 f103 	lsl.w	r1, r1, r3
 80001ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f0:	d502      	bpl.n	80001f8 <__addsf3+0x78>
 80001f2:	4249      	negs	r1, r1
 80001f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001fc:	d313      	bcc.n	8000226 <__addsf3+0xa6>
 80001fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000202:	d306      	bcc.n	8000212 <__addsf3+0x92>
 8000204:	0840      	lsrs	r0, r0, #1
 8000206:	ea4f 0131 	mov.w	r1, r1, rrx
 800020a:	f102 0201 	add.w	r2, r2, #1
 800020e:	2afe      	cmp	r2, #254	; 0xfe
 8000210:	d251      	bcs.n	80002b6 <__addsf3+0x136>
 8000212:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000216:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800021a:	bf08      	it	eq
 800021c:	f020 0001 	biceq.w	r0, r0, #1
 8000220:	ea40 0003 	orr.w	r0, r0, r3
 8000224:	4770      	bx	lr
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	eb40 0000 	adc.w	r0, r0, r0
 800022c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000230:	f1a2 0201 	sub.w	r2, r2, #1
 8000234:	d1ed      	bne.n	8000212 <__addsf3+0x92>
 8000236:	fab0 fc80 	clz	ip, r0
 800023a:	f1ac 0c08 	sub.w	ip, ip, #8
 800023e:	ebb2 020c 	subs.w	r2, r2, ip
 8000242:	fa00 f00c 	lsl.w	r0, r0, ip
 8000246:	bfaa      	itet	ge
 8000248:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800024c:	4252      	neglt	r2, r2
 800024e:	4318      	orrge	r0, r3
 8000250:	bfbc      	itt	lt
 8000252:	40d0      	lsrlt	r0, r2
 8000254:	4318      	orrlt	r0, r3
 8000256:	4770      	bx	lr
 8000258:	f092 0f00 	teq	r2, #0
 800025c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000260:	bf06      	itte	eq
 8000262:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000266:	3201      	addeq	r2, #1
 8000268:	3b01      	subne	r3, #1
 800026a:	e7b5      	b.n	80001d8 <__addsf3+0x58>
 800026c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000270:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000274:	bf18      	it	ne
 8000276:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800027a:	d021      	beq.n	80002c0 <__addsf3+0x140>
 800027c:	ea92 0f03 	teq	r2, r3
 8000280:	d004      	beq.n	800028c <__addsf3+0x10c>
 8000282:	f092 0f00 	teq	r2, #0
 8000286:	bf08      	it	eq
 8000288:	4608      	moveq	r0, r1
 800028a:	4770      	bx	lr
 800028c:	ea90 0f01 	teq	r0, r1
 8000290:	bf1c      	itt	ne
 8000292:	2000      	movne	r0, #0
 8000294:	4770      	bxne	lr
 8000296:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800029a:	d104      	bne.n	80002a6 <__addsf3+0x126>
 800029c:	0040      	lsls	r0, r0, #1
 800029e:	bf28      	it	cs
 80002a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002aa:	bf3c      	itt	cc
 80002ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b0:	4770      	bxcc	lr
 80002b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002be:	4770      	bx	lr
 80002c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c4:	bf16      	itet	ne
 80002c6:	4608      	movne	r0, r1
 80002c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002cc:	4601      	movne	r1, r0
 80002ce:	0242      	lsls	r2, r0, #9
 80002d0:	bf06      	itte	eq
 80002d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d6:	ea90 0f01 	teqeq	r0, r1
 80002da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002de:	4770      	bx	lr

080002e0 <__aeabi_ui2f>:
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	e004      	b.n	80002f0 <__aeabi_i2f+0x8>
 80002e6:	bf00      	nop

080002e8 <__aeabi_i2f>:
 80002e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002ec:	bf48      	it	mi
 80002ee:	4240      	negmi	r0, r0
 80002f0:	ea5f 0c00 	movs.w	ip, r0
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002fc:	4601      	mov	r1, r0
 80002fe:	f04f 0000 	mov.w	r0, #0
 8000302:	e01c      	b.n	800033e <__aeabi_l2f+0x2a>

08000304 <__aeabi_ul2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	e00a      	b.n	8000328 <__aeabi_l2f+0x14>
 8000312:	bf00      	nop

08000314 <__aeabi_l2f>:
 8000314:	ea50 0201 	orrs.w	r2, r0, r1
 8000318:	bf08      	it	eq
 800031a:	4770      	bxeq	lr
 800031c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000320:	d502      	bpl.n	8000328 <__aeabi_l2f+0x14>
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	ea5f 0c01 	movs.w	ip, r1
 800032c:	bf02      	ittt	eq
 800032e:	4684      	moveq	ip, r0
 8000330:	4601      	moveq	r1, r0
 8000332:	2000      	moveq	r0, #0
 8000334:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000338:	bf08      	it	eq
 800033a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000342:	fabc f28c 	clz	r2, ip
 8000346:	3a08      	subs	r2, #8
 8000348:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800034c:	db10      	blt.n	8000370 <__aeabi_l2f+0x5c>
 800034e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000352:	4463      	add	r3, ip
 8000354:	fa00 fc02 	lsl.w	ip, r0, r2
 8000358:	f1c2 0220 	rsb	r2, r2, #32
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	fa20 f202 	lsr.w	r2, r0, r2
 8000364:	eb43 0002 	adc.w	r0, r3, r2
 8000368:	bf08      	it	eq
 800036a:	f020 0001 	biceq.w	r0, r0, #1
 800036e:	4770      	bx	lr
 8000370:	f102 0220 	add.w	r2, r2, #32
 8000374:	fa01 fc02 	lsl.w	ip, r1, r2
 8000378:	f1c2 0220 	rsb	r2, r2, #32
 800037c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000380:	fa21 f202 	lsr.w	r2, r1, r2
 8000384:	eb43 0002 	adc.w	r0, r3, r2
 8000388:	bf08      	it	eq
 800038a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038e:	4770      	bx	lr

08000390 <__aeabi_fmul>:
 8000390:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000394:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000398:	bf1e      	ittt	ne
 800039a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039e:	ea92 0f0c 	teqne	r2, ip
 80003a2:	ea93 0f0c 	teqne	r3, ip
 80003a6:	d06f      	beq.n	8000488 <__aeabi_fmul+0xf8>
 80003a8:	441a      	add	r2, r3
 80003aa:	ea80 0c01 	eor.w	ip, r0, r1
 80003ae:	0240      	lsls	r0, r0, #9
 80003b0:	bf18      	it	ne
 80003b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b6:	d01e      	beq.n	80003f6 <__aeabi_fmul+0x66>
 80003b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c4:	fba0 3101 	umull	r3, r1, r0, r1
 80003c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d0:	bf3e      	ittt	cc
 80003d2:	0049      	lslcc	r1, r1, #1
 80003d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d8:	005b      	lslcc	r3, r3, #1
 80003da:	ea40 0001 	orr.w	r0, r0, r1
 80003de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003e2:	2afd      	cmp	r2, #253	; 0xfd
 80003e4:	d81d      	bhi.n	8000422 <__aeabi_fmul+0x92>
 80003e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ee:	bf08      	it	eq
 80003f0:	f020 0001 	biceq.w	r0, r0, #1
 80003f4:	4770      	bx	lr
 80003f6:	f090 0f00 	teq	r0, #0
 80003fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fe:	bf08      	it	eq
 8000400:	0249      	lsleq	r1, r1, #9
 8000402:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000406:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800040a:	3a7f      	subs	r2, #127	; 0x7f
 800040c:	bfc2      	ittt	gt
 800040e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000412:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000416:	4770      	bxgt	lr
 8000418:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800041c:	f04f 0300 	mov.w	r3, #0
 8000420:	3a01      	subs	r2, #1
 8000422:	dc5d      	bgt.n	80004e0 <__aeabi_fmul+0x150>
 8000424:	f112 0f19 	cmn.w	r2, #25
 8000428:	bfdc      	itt	le
 800042a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042e:	4770      	bxle	lr
 8000430:	f1c2 0200 	rsb	r2, r2, #0
 8000434:	0041      	lsls	r1, r0, #1
 8000436:	fa21 f102 	lsr.w	r1, r1, r2
 800043a:	f1c2 0220 	rsb	r2, r2, #32
 800043e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000442:	ea5f 0031 	movs.w	r0, r1, rrx
 8000446:	f140 0000 	adc.w	r0, r0, #0
 800044a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044e:	bf08      	it	eq
 8000450:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000454:	4770      	bx	lr
 8000456:	f092 0f00 	teq	r2, #0
 800045a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0040      	lsleq	r0, r0, #1
 8000462:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000466:	3a01      	subeq	r2, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xce>
 800046a:	ea40 000c 	orr.w	r0, r0, ip
 800046e:	f093 0f00 	teq	r3, #0
 8000472:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0049      	lsleq	r1, r1, #1
 800047a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047e:	3b01      	subeq	r3, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xe6>
 8000482:	ea41 010c 	orr.w	r1, r1, ip
 8000486:	e78f      	b.n	80003a8 <__aeabi_fmul+0x18>
 8000488:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800048c:	ea92 0f0c 	teq	r2, ip
 8000490:	bf18      	it	ne
 8000492:	ea93 0f0c 	teqne	r3, ip
 8000496:	d00a      	beq.n	80004ae <__aeabi_fmul+0x11e>
 8000498:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800049c:	bf18      	it	ne
 800049e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004a2:	d1d8      	bne.n	8000456 <__aeabi_fmul+0xc6>
 80004a4:	ea80 0001 	eor.w	r0, r0, r1
 80004a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ac:	4770      	bx	lr
 80004ae:	f090 0f00 	teq	r0, #0
 80004b2:	bf17      	itett	ne
 80004b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b8:	4608      	moveq	r0, r1
 80004ba:	f091 0f00 	teqne	r1, #0
 80004be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004c2:	d014      	beq.n	80004ee <__aeabi_fmul+0x15e>
 80004c4:	ea92 0f0c 	teq	r2, ip
 80004c8:	d101      	bne.n	80004ce <__aeabi_fmul+0x13e>
 80004ca:	0242      	lsls	r2, r0, #9
 80004cc:	d10f      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004ce:	ea93 0f0c 	teq	r3, ip
 80004d2:	d103      	bne.n	80004dc <__aeabi_fmul+0x14c>
 80004d4:	024b      	lsls	r3, r1, #9
 80004d6:	bf18      	it	ne
 80004d8:	4608      	movne	r0, r1
 80004da:	d108      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004dc:	ea80 0001 	eor.w	r0, r0, r1
 80004e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004ec:	4770      	bx	lr
 80004ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_fdiv>:
 80004f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000500:	bf1e      	ittt	ne
 8000502:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000506:	ea92 0f0c 	teqne	r2, ip
 800050a:	ea93 0f0c 	teqne	r3, ip
 800050e:	d069      	beq.n	80005e4 <__aeabi_fdiv+0xec>
 8000510:	eba2 0203 	sub.w	r2, r2, r3
 8000514:	ea80 0c01 	eor.w	ip, r0, r1
 8000518:	0249      	lsls	r1, r1, #9
 800051a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051e:	d037      	beq.n	8000590 <__aeabi_fdiv+0x98>
 8000520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000524:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000528:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800052c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000530:	428b      	cmp	r3, r1
 8000532:	bf38      	it	cc
 8000534:	005b      	lslcc	r3, r3, #1
 8000536:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800053a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053e:	428b      	cmp	r3, r1
 8000540:	bf24      	itt	cs
 8000542:	1a5b      	subcs	r3, r3, r1
 8000544:	ea40 000c 	orrcs.w	r0, r0, ip
 8000548:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800054c:	bf24      	itt	cs
 800054e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000552:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000556:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800055a:	bf24      	itt	cs
 800055c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000560:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000564:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000568:	bf24      	itt	cs
 800056a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	bf18      	it	ne
 8000576:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800057a:	d1e0      	bne.n	800053e <__aeabi_fdiv+0x46>
 800057c:	2afd      	cmp	r2, #253	; 0xfd
 800057e:	f63f af50 	bhi.w	8000422 <__aeabi_fmul+0x92>
 8000582:	428b      	cmp	r3, r1
 8000584:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000588:	bf08      	it	eq
 800058a:	f020 0001 	biceq.w	r0, r0, #1
 800058e:	4770      	bx	lr
 8000590:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000594:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000598:	327f      	adds	r2, #127	; 0x7f
 800059a:	bfc2      	ittt	gt
 800059c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a4:	4770      	bxgt	lr
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005aa:	f04f 0300 	mov.w	r3, #0
 80005ae:	3a01      	subs	r2, #1
 80005b0:	e737      	b.n	8000422 <__aeabi_fmul+0x92>
 80005b2:	f092 0f00 	teq	r2, #0
 80005b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0040      	lsleq	r0, r0, #1
 80005be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005c2:	3a01      	subeq	r2, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xc2>
 80005c6:	ea40 000c 	orr.w	r0, r0, ip
 80005ca:	f093 0f00 	teq	r3, #0
 80005ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0049      	lsleq	r1, r1, #1
 80005d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005da:	3b01      	subeq	r3, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xda>
 80005de:	ea41 010c 	orr.w	r1, r1, ip
 80005e2:	e795      	b.n	8000510 <__aeabi_fdiv+0x18>
 80005e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e8:	ea92 0f0c 	teq	r2, ip
 80005ec:	d108      	bne.n	8000600 <__aeabi_fdiv+0x108>
 80005ee:	0242      	lsls	r2, r0, #9
 80005f0:	f47f af7d 	bne.w	80004ee <__aeabi_fmul+0x15e>
 80005f4:	ea93 0f0c 	teq	r3, ip
 80005f8:	f47f af70 	bne.w	80004dc <__aeabi_fmul+0x14c>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e776      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	d104      	bne.n	8000610 <__aeabi_fdiv+0x118>
 8000606:	024b      	lsls	r3, r1, #9
 8000608:	f43f af4c 	beq.w	80004a4 <__aeabi_fmul+0x114>
 800060c:	4608      	mov	r0, r1
 800060e:	e76e      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000610:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000614:	bf18      	it	ne
 8000616:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800061a:	d1ca      	bne.n	80005b2 <__aeabi_fdiv+0xba>
 800061c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000620:	f47f af5c 	bne.w	80004dc <__aeabi_fmul+0x14c>
 8000624:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000628:	f47f af3c 	bne.w	80004a4 <__aeabi_fmul+0x114>
 800062c:	e75f      	b.n	80004ee <__aeabi_fmul+0x15e>
 800062e:	bf00      	nop

08000630 <__aeabi_f2uiz>:
 8000630:	0042      	lsls	r2, r0, #1
 8000632:	d20e      	bcs.n	8000652 <__aeabi_f2uiz+0x22>
 8000634:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000638:	d30b      	bcc.n	8000652 <__aeabi_f2uiz+0x22>
 800063a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000642:	d409      	bmi.n	8000658 <__aeabi_f2uiz+0x28>
 8000644:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800064c:	fa23 f002 	lsr.w	r0, r3, r2
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr
 8000658:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800065c:	d101      	bne.n	8000662 <__aeabi_f2uiz+0x32>
 800065e:	0242      	lsls	r2, r0, #9
 8000660:	d102      	bne.n	8000668 <__aeabi_f2uiz+0x38>
 8000662:	f04f 30ff 	mov.w	r0, #4294967295
 8000666:	4770      	bx	lr
 8000668:	f04f 0000 	mov.w	r0, #0
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_InitTick+0x3c>)
{
 8000674:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000676:	7818      	ldrb	r0, [r3, #0]
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <HAL_InitTick+0x40>)
 8000682:	6810      	ldr	r0, [r2, #0]
 8000684:	fbb0 f0f3 	udiv	r0, r0, r3
 8000688:	f000 fab6 	bl	8000bf8 <HAL_SYSTICK_Config>
 800068c:	4604      	mov	r4, r0
 800068e:	b958      	cbnz	r0, 80006a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000690:	2d0f      	cmp	r5, #15
 8000692:	d809      	bhi.n	80006a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	4602      	mov	r2, r0
 8000696:	4629      	mov	r1, r5
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 fa6a 	bl	8000b74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <HAL_InitTick+0x44>)
 80006a2:	4620      	mov	r0, r4
 80006a4:	601d      	str	r5, [r3, #0]
 80006a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006a8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006aa:	bd38      	pop	{r3, r4, r5, pc}
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000120 	.word	0x20000120
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <HAL_Init+0x20>)
{
 80006ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c6:	f000 fa43 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ffd0 	bl	8000670 <HAL_InitTick>
  HAL_MspInit();
 80006d0:	f003 fd36 	bl	8004140 <HAL_MspInit>
}
 80006d4:	2000      	movs	r0, #0
 80006d6:	bd08      	pop	{r3, pc}
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006dc:	4a03      	ldr	r2, [pc, #12]	; (80006ec <HAL_IncTick+0x10>)
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <HAL_IncTick+0x14>)
 80006e0:	6811      	ldr	r1, [r2, #0]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	440b      	add	r3, r1
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	200006dc 	.word	0x200006dc
 80006f0:	20000000 	.word	0x20000000

080006f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <HAL_GetTick+0x8>)
 80006f6:	6818      	ldr	r0, [r3, #0]
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200006dc 	.word	0x200006dc

08000700 <HAL_ADC_ConvCpltCallback>:
 8000700:	4770      	bx	lr

08000702 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000702:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000704:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000708:	f012 0f50 	tst.w	r2, #80	; 0x50
 800070c:	d11b      	bne.n	8000746 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800070e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	6892      	ldr	r2, [r2, #8]
 800071a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800071e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000722:	d10c      	bne.n	800073e <ADC_DMAConvCplt+0x3c>
 8000724:	7b1a      	ldrb	r2, [r3, #12]
 8000726:	b952      	cbnz	r2, 800073e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800072a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000732:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000734:	bf5e      	ittt	pl
 8000736:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000738:	f042 0201 	orrpl.w	r2, r2, #1
 800073c:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffde 	bl	8000700 <HAL_ADC_ConvCpltCallback>
 8000744:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000746:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4718      	bx	r3

08000750 <HAL_ADC_ConvHalfCpltCallback>:
 8000750:	4770      	bx	lr

08000752 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000752:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000754:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000756:	f7ff fffb 	bl	8000750 <HAL_ADC_ConvHalfCpltCallback>
 800075a:	bd08      	pop	{r3, pc}

0800075c <HAL_ADC_ErrorCallback>:
{
 800075c:	4770      	bx	lr

0800075e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800075e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000760:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000762:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800076a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000772:	f7ff fff3 	bl	800075c <HAL_ADC_ErrorCallback>
 8000776:	bd08      	pop	{r3, pc}

08000778 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000778:	2300      	movs	r3, #0
{ 
 800077a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800077c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800077e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000782:	2b01      	cmp	r3, #1
 8000784:	d074      	beq.n	8000870 <HAL_ADC_ConfigChannel+0xf8>
 8000786:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000788:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800078a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800078e:	2d06      	cmp	r5, #6
 8000790:	6802      	ldr	r2, [r0, #0]
 8000792:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000796:	680c      	ldr	r4, [r1, #0]
 8000798:	d825      	bhi.n	80007e6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800079a:	442b      	add	r3, r5
 800079c:	251f      	movs	r5, #31
 800079e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80007a0:	3b05      	subs	r3, #5
 80007a2:	409d      	lsls	r5, r3
 80007a4:	ea26 0505 	bic.w	r5, r6, r5
 80007a8:	fa04 f303 	lsl.w	r3, r4, r3
 80007ac:	432b      	orrs	r3, r5
 80007ae:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80007b0:	2c09      	cmp	r4, #9
 80007b2:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80007b6:	688d      	ldr	r5, [r1, #8]
 80007b8:	d92f      	bls.n	800081a <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80007ba:	2607      	movs	r6, #7
 80007bc:	4423      	add	r3, r4
 80007be:	68d1      	ldr	r1, [r2, #12]
 80007c0:	3b1e      	subs	r3, #30
 80007c2:	409e      	lsls	r6, r3
 80007c4:	ea21 0106 	bic.w	r1, r1, r6
 80007c8:	fa05 f303 	lsl.w	r3, r5, r3
 80007cc:	430b      	orrs	r3, r1
 80007ce:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80007d0:	f1a4 0310 	sub.w	r3, r4, #16
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d92b      	bls.n	8000830 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007d8:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80007da:	2200      	movs	r2, #0
 80007dc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	b002      	add	sp, #8
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80007e6:	2d0c      	cmp	r5, #12
 80007e8:	d80b      	bhi.n	8000802 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007ea:	442b      	add	r3, r5
 80007ec:	251f      	movs	r5, #31
 80007ee:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80007f0:	3b23      	subs	r3, #35	; 0x23
 80007f2:	409d      	lsls	r5, r3
 80007f4:	ea26 0505 	bic.w	r5, r6, r5
 80007f8:	fa04 f303 	lsl.w	r3, r4, r3
 80007fc:	432b      	orrs	r3, r5
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000800:	e7d6      	b.n	80007b0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000802:	442b      	add	r3, r5
 8000804:	251f      	movs	r5, #31
 8000806:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000808:	3b41      	subs	r3, #65	; 0x41
 800080a:	409d      	lsls	r5, r3
 800080c:	ea26 0505 	bic.w	r5, r6, r5
 8000810:	fa04 f303 	lsl.w	r3, r4, r3
 8000814:	432b      	orrs	r3, r5
 8000816:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000818:	e7ca      	b.n	80007b0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800081a:	2607      	movs	r6, #7
 800081c:	6911      	ldr	r1, [r2, #16]
 800081e:	4423      	add	r3, r4
 8000820:	409e      	lsls	r6, r3
 8000822:	ea21 0106 	bic.w	r1, r1, r6
 8000826:	fa05 f303 	lsl.w	r3, r5, r3
 800082a:	430b      	orrs	r3, r1
 800082c:	6113      	str	r3, [r2, #16]
 800082e:	e7cf      	b.n	80007d0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_ADC_ConfigChannel+0xfc>)
 8000832:	429a      	cmp	r2, r3
 8000834:	d116      	bne.n	8000864 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000836:	6893      	ldr	r3, [r2, #8]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	d4cd      	bmi.n	80007d8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800083c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800083e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000844:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000846:	d1c7      	bne.n	80007d8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_ADC_ConfigChannel+0x100>)
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_ADC_ConfigChannel+0x104>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000852:	230a      	movs	r3, #10
 8000854:	4353      	muls	r3, r2
            wait_loop_index--;
 8000856:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000858:	9b01      	ldr	r3, [sp, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0bc      	beq.n	80007d8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800085e:	9b01      	ldr	r3, [sp, #4]
 8000860:	3b01      	subs	r3, #1
 8000862:	e7f8      	b.n	8000856 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000864:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000866:	f043 0320 	orr.w	r3, r3, #32
 800086a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e7b4      	b.n	80007da <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000870:	2302      	movs	r3, #2
 8000872:	e7b5      	b.n	80007e0 <HAL_ADC_ConfigChannel+0x68>
 8000874:	40012400 	.word	0x40012400
 8000878:	20000120 	.word	0x20000120
 800087c:	000f4240 	.word	0x000f4240

08000880 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000880:	2300      	movs	r3, #0
{
 8000882:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000884:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000886:	6803      	ldr	r3, [r0, #0]
{
 8000888:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	07d2      	lsls	r2, r2, #31
 800088e:	d502      	bpl.n	8000896 <ADC_Enable+0x16>
  return HAL_OK;
 8000890:	2000      	movs	r0, #0
}
 8000892:	b002      	add	sp, #8
 8000894:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	f042 0201 	orr.w	r2, r2, #1
 800089c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <ADC_Enable+0x68>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <ADC_Enable+0x6c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80008a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80008aa:	9b01      	ldr	r3, [sp, #4]
 80008ac:	b9c3      	cbnz	r3, 80008e0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80008ae:	f7ff ff21 	bl	80006f4 <HAL_GetTick>
 80008b2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	689d      	ldr	r5, [r3, #8]
 80008b8:	f015 0501 	ands.w	r5, r5, #1
 80008bc:	d1e8      	bne.n	8000890 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80008be:	f7ff ff19 	bl	80006f4 <HAL_GetTick>
 80008c2:	1b80      	subs	r0, r0, r6
 80008c4:	2802      	cmp	r0, #2
 80008c6:	d9f5      	bls.n	80008b4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80008ca:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80008d6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008de:	e7d8      	b.n	8000892 <ADC_Enable+0x12>
      wait_loop_index--;
 80008e0:	9b01      	ldr	r3, [sp, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	e7e0      	b.n	80008a8 <ADC_Enable+0x28>
 80008e6:	bf00      	nop
 80008e8:	20000120 	.word	0x20000120
 80008ec:	000f4240 	.word	0x000f4240

080008f0 <HAL_ADC_Start_DMA>:
{
 80008f0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80008f4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <HAL_ADC_Start_DMA+0x108>)
 80008f8:	6802      	ldr	r2, [r0, #0]
{
 80008fa:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008fc:	429a      	cmp	r2, r3
{
 80008fe:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000900:	d002      	beq.n	8000908 <HAL_ADC_Start_DMA+0x18>
 8000902:	493e      	ldr	r1, [pc, #248]	; (80009fc <HAL_ADC_Start_DMA+0x10c>)
 8000904:	428a      	cmp	r2, r1
 8000906:	d103      	bne.n	8000910 <HAL_ADC_Start_DMA+0x20>
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800090e:	d16e      	bne.n	80009ee <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000910:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000914:	2b01      	cmp	r3, #1
 8000916:	d06c      	beq.n	80009f2 <HAL_ADC_Start_DMA+0x102>
 8000918:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800091a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800091c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000920:	f7ff ffae 	bl	8000880 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000924:	4606      	mov	r6, r0
 8000926:	2800      	cmp	r0, #0
 8000928:	d15d      	bne.n	80009e6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800092a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800092c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800092e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000934:	f020 0001 	bic.w	r0, r0, #1
 8000938:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800093c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800093e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000940:	d104      	bne.n	800094c <HAL_ADC_Start_DMA+0x5c>
 8000942:	4a2d      	ldr	r2, [pc, #180]	; (80009f8 <HAL_ADC_Start_DMA+0x108>)
 8000944:	6853      	ldr	r3, [r2, #4]
 8000946:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800094a:	d13e      	bne.n	80009ca <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800094c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800094e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000952:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000954:	684b      	ldr	r3, [r1, #4]
 8000956:	055a      	lsls	r2, r3, #21
 8000958:	d505      	bpl.n	8000966 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800095a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800095c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000964:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000968:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800096a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800096e:	bf18      	it	ne
 8000970:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000972:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000974:	bf18      	it	ne
 8000976:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800097a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800097c:	2300      	movs	r3, #0
 800097e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000984:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000986:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <HAL_ADC_Start_DMA+0x114>)
 800098a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_ADC_Start_DMA+0x118>)
 800098e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000990:	f06f 0302 	mvn.w	r3, #2
 8000994:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000998:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800099c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80009a4:	4643      	mov	r3, r8
 80009a6:	f000 f96d 	bl	8000c84 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80009b2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	bf0c      	ite	eq
 80009ba:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009be:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80009c2:	609a      	str	r2, [r3, #8]
}
 80009c4:	4630      	mov	r0, r6
 80009c6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009d0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009d2:	6853      	ldr	r3, [r2, #4]
 80009d4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009d6:	bf41      	itttt	mi
 80009d8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80009da:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80009de:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80009e2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80009e4:	e7bf      	b.n	8000966 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80009e6:	2300      	movs	r3, #0
 80009e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80009ec:	e7ea      	b.n	80009c4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80009ee:	2601      	movs	r6, #1
 80009f0:	e7e8      	b.n	80009c4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80009f2:	2602      	movs	r6, #2
 80009f4:	e7e6      	b.n	80009c4 <HAL_ADC_Start_DMA+0xd4>
 80009f6:	bf00      	nop
 80009f8:	40012400 	.word	0x40012400
 80009fc:	40012800 	.word	0x40012800
 8000a00:	08000703 	.word	0x08000703
 8000a04:	08000753 	.word	0x08000753
 8000a08:	0800075f 	.word	0x0800075f

08000a0c <ADC_ConversionStop_Disable>:
{
 8000a0c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a0e:	6803      	ldr	r3, [r0, #0]
{
 8000a10:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	07d2      	lsls	r2, r2, #31
 8000a16:	d401      	bmi.n	8000a1c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000a18:	2000      	movs	r0, #0
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	f022 0201 	bic.w	r2, r2, #1
 8000a22:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000a24:	f7ff fe66 	bl	80006f4 <HAL_GetTick>
 8000a28:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	07db      	lsls	r3, r3, #31
 8000a30:	d5f2      	bpl.n	8000a18 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a32:	f7ff fe5f 	bl	80006f4 <HAL_GetTick>
 8000a36:	1b40      	subs	r0, r0, r5
 8000a38:	2802      	cmp	r0, #2
 8000a3a:	d9f6      	bls.n	8000a2a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a3e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}

08000a50 <HAL_ADC_Init>:
{
 8000a50:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000a52:	4604      	mov	r4, r0
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d071      	beq.n	8000b3c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a5a:	b923      	cbnz	r3, 8000a66 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000a5c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000a5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000a62:	f003 fb8f 	bl	8004184 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a66:	4620      	mov	r0, r4
 8000a68:	f7ff ffd0 	bl	8000a0c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a6e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a74:	d164      	bne.n	8000b40 <HAL_ADC_Init+0xf0>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d162      	bne.n	8000b40 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a7a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000a7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a80:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000a82:	f023 0302 	bic.w	r3, r3, #2
 8000a86:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a8a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a8c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a90:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a92:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a96:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a9a:	d038      	beq.n	8000b0e <HAL_ADC_Init+0xbe>
 8000a9c:	2901      	cmp	r1, #1
 8000a9e:	bf14      	ite	ne
 8000aa0:	4606      	movne	r6, r0
 8000aa2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa6:	7d25      	ldrb	r5, [r4, #20]
 8000aa8:	2d01      	cmp	r5, #1
 8000aaa:	d107      	bne.n	8000abc <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d130      	bne.n	8000b12 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ab0:	69a3      	ldr	r3, [r4, #24]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000ab8:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000abc:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000abe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000ac2:	685d      	ldr	r5, [r3, #4]
 8000ac4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000ac8:	ea45 0506 	orr.w	r5, r5, r6
 8000acc:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000ace:	689e      	ldr	r6, [r3, #8]
 8000ad0:	4d1d      	ldr	r5, [pc, #116]	; (8000b48 <HAL_ADC_Init+0xf8>)
 8000ad2:	ea05 0506 	and.w	r5, r5, r6
 8000ad6:	ea45 0502 	orr.w	r5, r5, r2
 8000ada:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000adc:	d001      	beq.n	8000ae2 <HAL_ADC_Init+0x92>
 8000ade:	2901      	cmp	r1, #1
 8000ae0:	d120      	bne.n	8000b24 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ae2:	6921      	ldr	r1, [r4, #16]
 8000ae4:	3901      	subs	r1, #1
 8000ae6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000aea:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000aee:	4329      	orrs	r1, r5
 8000af0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af2:	6899      	ldr	r1, [r3, #8]
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_ADC_Init+0xfc>)
 8000af6:	400b      	ands	r3, r1
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d115      	bne.n	8000b28 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000afc:	2300      	movs	r3, #0
 8000afe:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b02:	f023 0303 	bic.w	r3, r3, #3
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b0e:	460e      	mov	r6, r1
 8000b10:	e7c9      	b.n	8000aa6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b14:	f043 0320 	orr.w	r3, r3, #32
 8000b18:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b22:	e7cb      	b.n	8000abc <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000b24:	2100      	movs	r1, #0
 8000b26:	e7df      	b.n	8000ae8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000b28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b2a:	f023 0312 	bic.w	r3, r3, #18
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
}
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b40:	f043 0310 	orr.w	r3, r3, #16
 8000b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b46:	e7f9      	b.n	8000b3c <HAL_ADC_Init+0xec>
 8000b48:	ffe1f7fd 	.word	0xffe1f7fd
 8000b4c:	ff1f0efe 	.word	0xff1f0efe

08000b50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b52:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b5e:	041b      	lsls	r3, r3, #16
 8000b60:	0c1b      	lsrs	r3, r3, #16
 8000b62:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b6a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b6c:	60d3      	str	r3, [r2, #12]
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b530      	push	{r4, r5, lr}
 8000b78:	68dc      	ldr	r4, [r3, #12]
 8000b7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	bf28      	it	cs
 8000b88:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b90:	bf98      	it	ls
 8000b92:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	fa05 f303 	lsl.w	r3, r5, r3
 8000b98:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9c:	bf88      	it	hi
 8000b9e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4019      	ands	r1, r3
 8000ba2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	fa05 f404 	lsl.w	r4, r5, r4
 8000ba8:	3c01      	subs	r4, #1
 8000baa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bac:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bae:	ea42 0201 	orr.w	r2, r2, r1
 8000bb2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	bfa9      	itett	ge
 8000bb8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	4b06      	ldrlt	r3, [pc, #24]	; (8000bd8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	b2d2      	uxtbge	r2, r2
 8000bc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	bfbb      	ittet	lt
 8000bc6:	f000 000f 	andlt.w	r0, r0, #15
 8000bca:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	541a      	strblt	r2, [r3, r0]
 8000bd2:	bd30      	pop	{r4, r5, pc}
 8000bd4:	e000ed00 	.word	0xe000ed00
 8000bd8:	e000ed14 	.word	0xe000ed14

08000bdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	db08      	blt.n	8000bf2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be0:	2301      	movs	r3, #1
 8000be2:	0942      	lsrs	r2, r0, #5
 8000be4:	f000 001f 	and.w	r0, r0, #31
 8000be8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bec:	4b01      	ldr	r3, [pc, #4]	; (8000bf4 <HAL_NVIC_EnableIRQ+0x18>)
 8000bee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfe:	d20a      	bcs.n	8000c16 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c24:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c26:	b330      	cbz	r0, 8000c76 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c28:	2214      	movs	r2, #20
 8000c2a:	6801      	ldr	r1, [r0, #0]
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c2e:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c30:	440b      	add	r3, r1
 8000c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000c3c:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000c3e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000c40:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c42:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000c46:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c48:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c4a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c4e:	4323      	orrs	r3, r4
 8000c50:	6904      	ldr	r4, [r0, #16]
 8000c52:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c54:	6944      	ldr	r4, [r0, #20]
 8000c56:	4323      	orrs	r3, r4
 8000c58:	6984      	ldr	r4, [r0, #24]
 8000c5a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c5c:	69c4      	ldr	r4, [r0, #28]
 8000c5e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000c60:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c62:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c64:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c66:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000c68:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c6c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c6e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c76:	2001      	movs	r0, #1
}
 8000c78:	bd10      	pop	{r4, pc}
 8000c7a:	bf00      	nop
 8000c7c:	bffdfff8 	.word	0xbffdfff8
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c86:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000c8a:	2c01      	cmp	r4, #1
 8000c8c:	d035      	beq.n	8000cfa <HAL_DMA_Start_IT+0x76>
 8000c8e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c90:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000c94:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	f04f 0600 	mov.w	r6, #0
 8000c9e:	f04f 0402 	mov.w	r4, #2
 8000ca2:	d128      	bne.n	8000cf6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ca4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ca8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000caa:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000cac:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cae:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000cb0:	f026 0601 	bic.w	r6, r6, #1
 8000cb4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cb6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000cb8:	40bd      	lsls	r5, r7
 8000cba:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000cbc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cbe:	6843      	ldr	r3, [r0, #4]
 8000cc0:	6805      	ldr	r5, [r0, #0]
 8000cc2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000cc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000cc6:	bf0b      	itete	eq
 8000cc8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000cca:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ccc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000cce:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000cd0:	b14b      	cbz	r3, 8000ce6 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cd8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000cda:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cdc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f023 0304 	bic.w	r3, r3, #4
 8000cec:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f043 030a 	orr.w	r3, r3, #10
 8000cf4:	e7f0      	b.n	8000cd8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000cf6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000cfa:	2002      	movs	r0, #2
}
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000d00 <HAL_DMA_IRQHandler>:
{
 8000d00:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d02:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d04:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d06:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d08:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d0a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000d10:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d12:	d032      	beq.n	8000d7a <HAL_DMA_IRQHandler+0x7a>
 8000d14:	074d      	lsls	r5, r1, #29
 8000d16:	d530      	bpl.n	8000d7a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d1c:	bf5e      	ittt	pl
 8000d1e:	681a      	ldrpl	r2, [r3, #0]
 8000d20:	f022 0204 	bicpl.w	r2, r2, #4
 8000d24:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d26:	4a3e      	ldr	r2, [pc, #248]	; (8000e20 <HAL_DMA_IRQHandler+0x120>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d019      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x60>
 8000d2c:	3214      	adds	r2, #20
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d018      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x64>
 8000d32:	3214      	adds	r2, #20
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d017      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x68>
 8000d38:	3214      	adds	r2, #20
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d017      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x6e>
 8000d3e:	3214      	adds	r2, #20
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d017      	beq.n	8000d74 <HAL_DMA_IRQHandler+0x74>
 8000d44:	3214      	adds	r2, #20
 8000d46:	4293      	cmp	r3, r2
 8000d48:	bf0c      	ite	eq
 8000d4a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000d4e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000d52:	4a34      	ldr	r2, [pc, #208]	; (8000e24 <HAL_DMA_IRQHandler+0x124>)
 8000d54:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000d56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d05e      	beq.n	8000e1a <HAL_DMA_IRQHandler+0x11a>
}
 8000d5c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000d5e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d60:	2304      	movs	r3, #4
 8000d62:	e7f6      	b.n	8000d52 <HAL_DMA_IRQHandler+0x52>
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	e7f4      	b.n	8000d52 <HAL_DMA_IRQHandler+0x52>
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	e7f1      	b.n	8000d52 <HAL_DMA_IRQHandler+0x52>
 8000d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d72:	e7ee      	b.n	8000d52 <HAL_DMA_IRQHandler+0x52>
 8000d74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d78:	e7eb      	b.n	8000d52 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d7a:	2502      	movs	r5, #2
 8000d7c:	4095      	lsls	r5, r2
 8000d7e:	4225      	tst	r5, r4
 8000d80:	d035      	beq.n	8000dee <HAL_DMA_IRQHandler+0xee>
 8000d82:	078d      	lsls	r5, r1, #30
 8000d84:	d533      	bpl.n	8000dee <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	0694      	lsls	r4, r2, #26
 8000d8a:	d406      	bmi.n	8000d9a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	f022 020a 	bic.w	r2, r2, #10
 8000d92:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000d94:	2201      	movs	r2, #1
 8000d96:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d9a:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_DMA_IRQHandler+0x120>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d019      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0xd4>
 8000da0:	3214      	adds	r2, #20
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d018      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0xd8>
 8000da6:	3214      	adds	r2, #20
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d017      	beq.n	8000ddc <HAL_DMA_IRQHandler+0xdc>
 8000dac:	3214      	adds	r2, #20
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d017      	beq.n	8000de2 <HAL_DMA_IRQHandler+0xe2>
 8000db2:	3214      	adds	r2, #20
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d017      	beq.n	8000de8 <HAL_DMA_IRQHandler+0xe8>
 8000db8:	3214      	adds	r2, #20
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	bf0c      	ite	eq
 8000dbe:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000dc2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_DMA_IRQHandler+0x124>)
 8000dc8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000dd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000dd2:	e7c1      	b.n	8000d58 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e7f6      	b.n	8000dc6 <HAL_DMA_IRQHandler+0xc6>
 8000dd8:	2320      	movs	r3, #32
 8000dda:	e7f4      	b.n	8000dc6 <HAL_DMA_IRQHandler+0xc6>
 8000ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de0:	e7f1      	b.n	8000dc6 <HAL_DMA_IRQHandler+0xc6>
 8000de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de6:	e7ee      	b.n	8000dc6 <HAL_DMA_IRQHandler+0xc6>
 8000de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dec:	e7eb      	b.n	8000dc6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dee:	2508      	movs	r5, #8
 8000df0:	4095      	lsls	r5, r2
 8000df2:	4225      	tst	r5, r4
 8000df4:	d011      	beq.n	8000e1a <HAL_DMA_IRQHandler+0x11a>
 8000df6:	0709      	lsls	r1, r1, #28
 8000df8:	d50f      	bpl.n	8000e1a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	f021 010e 	bic.w	r1, r1, #14
 8000e00:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e02:	2301      	movs	r3, #1
 8000e04:	fa03 f202 	lsl.w	r2, r3, r2
 8000e08:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e0a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000e10:	2300      	movs	r3, #0
 8000e12:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000e16:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e18:	e79e      	b.n	8000d58 <HAL_DMA_IRQHandler+0x58>
}
 8000e1a:	bc70      	pop	{r4, r5, r6}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40020008 	.word	0x40020008
 8000e24:	40020000 	.word	0x40020000

08000e28 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e28:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <FLASH_SetErrorCode+0x48>)
 8000e2a:	68d3      	ldr	r3, [r2, #12]
 8000e2c:	f013 0310 	ands.w	r3, r3, #16
 8000e30:	d005      	beq.n	8000e3e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e32:	4910      	ldr	r1, [pc, #64]	; (8000e74 <FLASH_SetErrorCode+0x4c>)
 8000e34:	69cb      	ldr	r3, [r1, #28]
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e3c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e3e:	68d2      	ldr	r2, [r2, #12]
 8000e40:	0750      	lsls	r0, r2, #29
 8000e42:	d506      	bpl.n	8000e52 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e44:	490b      	ldr	r1, [pc, #44]	; (8000e74 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000e46:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e4a:	69ca      	ldr	r2, [r1, #28]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <FLASH_SetErrorCode+0x48>)
 8000e54:	69d1      	ldr	r1, [r2, #28]
 8000e56:	07c9      	lsls	r1, r1, #31
 8000e58:	d508      	bpl.n	8000e6c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <FLASH_SetErrorCode+0x4c>)
 8000e5c:	69c1      	ldr	r1, [r0, #28]
 8000e5e:	f041 0104 	orr.w	r1, r1, #4
 8000e62:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e64:	69d1      	ldr	r1, [r2, #28]
 8000e66:	f021 0101 	bic.w	r1, r1, #1
 8000e6a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e6c:	60d3      	str	r3, [r2, #12]
 8000e6e:	4770      	bx	lr
 8000e70:	40022000 	.word	0x40022000
 8000e74:	200006e0 	.word	0x200006e0

08000e78 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_FLASH_Unlock+0x1c>)
 8000e7a:	6918      	ldr	r0, [r3, #16]
 8000e7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000e80:	d007      	beq.n	8000e92 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <HAL_FLASH_Unlock+0x20>)
 8000e84:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e86:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000e8a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e8c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000e92:	4770      	bx	lr
 8000e94:	40022000 	.word	0x40022000
 8000e98:	45670123 	.word	0x45670123

08000e9c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e9c:	4a03      	ldr	r2, [pc, #12]	; (8000eac <HAL_FLASH_Lock+0x10>)
}
 8000e9e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ea0:	6913      	ldr	r3, [r2, #16]
 8000ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea6:	6113      	str	r3, [r2, #16]
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <FLASH_WaitForLastOperation>:
{
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff fc1e 	bl	80006f4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000eb8:	4c11      	ldr	r4, [pc, #68]	; (8000f00 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000eba:	4607      	mov	r7, r0
 8000ebc:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ebe:	68e3      	ldr	r3, [r4, #12]
 8000ec0:	07d8      	lsls	r0, r3, #31
 8000ec2:	d412      	bmi.n	8000eea <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ec4:	68e3      	ldr	r3, [r4, #12]
 8000ec6:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ec8:	bf44      	itt	mi
 8000eca:	2320      	movmi	r3, #32
 8000ecc:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ece:	68eb      	ldr	r3, [r5, #12]
 8000ed0:	06da      	lsls	r2, r3, #27
 8000ed2:	d406      	bmi.n	8000ee2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ed4:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ed6:	07db      	lsls	r3, r3, #31
 8000ed8:	d403      	bmi.n	8000ee2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000eda:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000edc:	f010 0004 	ands.w	r0, r0, #4
 8000ee0:	d002      	beq.n	8000ee8 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8000ee2:	f7ff ffa1 	bl	8000e28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
}
 8000ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000eea:	1c73      	adds	r3, r6, #1
 8000eec:	d0e7      	beq.n	8000ebe <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000eee:	b90e      	cbnz	r6, 8000ef4 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ef4:	f7ff fbfe 	bl	80006f4 <HAL_GetTick>
 8000ef8:	1bc0      	subs	r0, r0, r7
 8000efa:	4286      	cmp	r6, r0
 8000efc:	d2df      	bcs.n	8000ebe <FLASH_WaitForLastOperation+0xe>
 8000efe:	e7f7      	b.n	8000ef0 <FLASH_WaitForLastOperation+0x40>
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_FLASH_Program>:
{
 8000f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000f08:	4c1f      	ldr	r4, [pc, #124]	; (8000f88 <HAL_FLASH_Program+0x84>)
{
 8000f0a:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8000f0c:	7e23      	ldrb	r3, [r4, #24]
{
 8000f0e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000f10:	2b01      	cmp	r3, #1
{
 8000f12:	460f      	mov	r7, r1
 8000f14:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000f16:	d033      	beq.n	8000f80 <HAL_FLASH_Program+0x7c>
 8000f18:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f1a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000f1e:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f20:	f7ff ffc6 	bl	8000eb0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f24:	bb40      	cbnz	r0, 8000f78 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f26:	2d01      	cmp	r5, #1
 8000f28:	d003      	beq.n	8000f32 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000f2a:	2d02      	cmp	r5, #2
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2502      	moveq	r5, #2
 8000f30:	2504      	movne	r5, #4
 8000f32:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f34:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f36:	f8df b054 	ldr.w	fp, [pc, #84]	; 8000f8c <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f3a:	0132      	lsls	r2, r6, #4
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	4649      	mov	r1, r9
 8000f40:	f7ff f90c 	bl	800015c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f44:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f48:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f4c:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8000f56:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f5e:	f7ff ffa7 	bl	8000eb0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f62:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8000f6e:	b918      	cbnz	r0, 8000f78 <HAL_FLASH_Program+0x74>
 8000f70:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8000f72:	b2f3      	uxtb	r3, r6
 8000f74:	429d      	cmp	r5, r3
 8000f76:	d8e0      	bhi.n	8000f3a <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	7623      	strb	r3, [r4, #24]
  return status;
 8000f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000f80:	2002      	movs	r0, #2
}
 8000f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f86:	bf00      	nop
 8000f88:	200006e0 	.word	0x200006e0
 8000f8c:	40022000 	.word	0x40022000

08000f90 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f90:	2200      	movs	r2, #0
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <FLASH_PageErase+0x1c>)
 8000f94:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <FLASH_PageErase+0x20>)
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000fa0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4770      	bx	lr
 8000fac:	200006e0 	.word	0x200006e0
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fb8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000fba:	4626      	mov	r6, r4
 8000fbc:	4b66      	ldr	r3, [pc, #408]	; (8001158 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fbe:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001168 <HAL_GPIO_Init+0x1b4>
 8000fc2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800116c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	680a      	ldr	r2, [r1, #0]
 8000fc8:	fa32 f506 	lsrs.w	r5, r2, r6
 8000fcc:	d102      	bne.n	8000fd4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000fce:	b003      	add	sp, #12
 8000fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000fd4:	f04f 0801 	mov.w	r8, #1
 8000fd8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fdc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000fe0:	4590      	cmp	r8, r2
 8000fe2:	d17f      	bne.n	80010e4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000fe4:	684d      	ldr	r5, [r1, #4]
 8000fe6:	2d12      	cmp	r5, #18
 8000fe8:	f000 80aa 	beq.w	8001140 <HAL_GPIO_Init+0x18c>
 8000fec:	f200 8083 	bhi.w	80010f6 <HAL_GPIO_Init+0x142>
 8000ff0:	2d02      	cmp	r5, #2
 8000ff2:	f000 80a2 	beq.w	800113a <HAL_GPIO_Init+0x186>
 8000ff6:	d877      	bhi.n	80010e8 <HAL_GPIO_Init+0x134>
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	f000 8089 	beq.w	8001110 <HAL_GPIO_Init+0x15c>
 8000ffe:	2d01      	cmp	r5, #1
 8001000:	f000 8099 	beq.w	8001136 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001004:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001008:	2aff      	cmp	r2, #255	; 0xff
 800100a:	bf93      	iteet	ls
 800100c:	4682      	movls	sl, r0
 800100e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001012:	3d08      	subhi	r5, #8
 8001014:	f8d0 b000 	ldrls.w	fp, [r0]
 8001018:	bf92      	itee	ls
 800101a:	00b5      	lslls	r5, r6, #2
 800101c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001020:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001022:	fa09 f805 	lsl.w	r8, r9, r5
 8001026:	ea2b 0808 	bic.w	r8, fp, r8
 800102a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800102e:	bf88      	it	hi
 8001030:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001034:	ea48 0505 	orr.w	r5, r8, r5
 8001038:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001040:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001044:	d04e      	beq.n	80010e4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001046:	4d45      	ldr	r5, [pc, #276]	; (800115c <HAL_GPIO_Init+0x1a8>)
 8001048:	4f44      	ldr	r7, [pc, #272]	; (800115c <HAL_GPIO_Init+0x1a8>)
 800104a:	69ad      	ldr	r5, [r5, #24]
 800104c:	f026 0803 	bic.w	r8, r6, #3
 8001050:	f045 0501 	orr.w	r5, r5, #1
 8001054:	61bd      	str	r5, [r7, #24]
 8001056:	69bd      	ldr	r5, [r7, #24]
 8001058:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800105c:	f005 0501 	and.w	r5, r5, #1
 8001060:	9501      	str	r5, [sp, #4]
 8001062:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001066:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800106c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001070:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001074:	fa09 f90b 	lsl.w	r9, r9, fp
 8001078:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800107c:	4d38      	ldr	r5, [pc, #224]	; (8001160 <HAL_GPIO_Init+0x1ac>)
 800107e:	42a8      	cmp	r0, r5
 8001080:	d063      	beq.n	800114a <HAL_GPIO_Init+0x196>
 8001082:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001086:	42a8      	cmp	r0, r5
 8001088:	d061      	beq.n	800114e <HAL_GPIO_Init+0x19a>
 800108a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800108e:	42a8      	cmp	r0, r5
 8001090:	d05f      	beq.n	8001152 <HAL_GPIO_Init+0x19e>
 8001092:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001096:	42a8      	cmp	r0, r5
 8001098:	bf0c      	ite	eq
 800109a:	2503      	moveq	r5, #3
 800109c:	2504      	movne	r5, #4
 800109e:	fa05 f50b 	lsl.w	r5, r5, fp
 80010a2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80010a6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80010aa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80010b0:	bf14      	ite	ne
 80010b2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b4:	4395      	biceq	r5, r2
 80010b6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80010b8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80010be:	bf14      	ite	ne
 80010c0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010c2:	4395      	biceq	r5, r2
 80010c4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80010cc:	bf14      	ite	ne
 80010ce:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010d0:	4395      	biceq	r5, r2
 80010d2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80010da:	bf14      	ite	ne
 80010dc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010de:	ea25 0202 	biceq.w	r2, r5, r2
 80010e2:	60da      	str	r2, [r3, #12]
	position++;
 80010e4:	3601      	adds	r6, #1
 80010e6:	e76e      	b.n	8000fc6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80010e8:	2d03      	cmp	r5, #3
 80010ea:	d022      	beq.n	8001132 <HAL_GPIO_Init+0x17e>
 80010ec:	2d11      	cmp	r5, #17
 80010ee:	d189      	bne.n	8001004 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010f0:	68cc      	ldr	r4, [r1, #12]
 80010f2:	3404      	adds	r4, #4
          break;
 80010f4:	e786      	b.n	8001004 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80010f6:	4f1b      	ldr	r7, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x1b0>)
 80010f8:	42bd      	cmp	r5, r7
 80010fa:	d009      	beq.n	8001110 <HAL_GPIO_Init+0x15c>
 80010fc:	d812      	bhi.n	8001124 <HAL_GPIO_Init+0x170>
 80010fe:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001170 <HAL_GPIO_Init+0x1bc>
 8001102:	454d      	cmp	r5, r9
 8001104:	d004      	beq.n	8001110 <HAL_GPIO_Init+0x15c>
 8001106:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800110a:	454d      	cmp	r5, r9
 800110c:	f47f af7a 	bne.w	8001004 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001110:	688c      	ldr	r4, [r1, #8]
 8001112:	b1c4      	cbz	r4, 8001146 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001114:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001116:	bf0c      	ite	eq
 8001118:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800111c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2408      	movs	r4, #8
 8001122:	e76f      	b.n	8001004 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001124:	4575      	cmp	r5, lr
 8001126:	d0f3      	beq.n	8001110 <HAL_GPIO_Init+0x15c>
 8001128:	4565      	cmp	r5, ip
 800112a:	d0f1      	beq.n	8001110 <HAL_GPIO_Init+0x15c>
 800112c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001174 <HAL_GPIO_Init+0x1c0>
 8001130:	e7eb      	b.n	800110a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001132:	2400      	movs	r4, #0
 8001134:	e766      	b.n	8001004 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001136:	68cc      	ldr	r4, [r1, #12]
          break;
 8001138:	e764      	b.n	8001004 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113a:	68cc      	ldr	r4, [r1, #12]
 800113c:	3408      	adds	r4, #8
          break;
 800113e:	e761      	b.n	8001004 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001140:	68cc      	ldr	r4, [r1, #12]
 8001142:	340c      	adds	r4, #12
          break;
 8001144:	e75e      	b.n	8001004 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001146:	2404      	movs	r4, #4
 8001148:	e75c      	b.n	8001004 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800114a:	2500      	movs	r5, #0
 800114c:	e7a7      	b.n	800109e <HAL_GPIO_Init+0xea>
 800114e:	2501      	movs	r5, #1
 8001150:	e7a5      	b.n	800109e <HAL_GPIO_Init+0xea>
 8001152:	2502      	movs	r5, #2
 8001154:	e7a3      	b.n	800109e <HAL_GPIO_Init+0xea>
 8001156:	bf00      	nop
 8001158:	40010400 	.word	0x40010400
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800
 8001164:	10210000 	.word	0x10210000
 8001168:	10310000 	.word	0x10310000
 800116c:	10320000 	.word	0x10320000
 8001170:	10110000 	.word	0x10110000
 8001174:	10220000 	.word	0x10220000

08001178 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001178:	6883      	ldr	r3, [r0, #8]
 800117a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800117c:	bf14      	ite	ne
 800117e:	2001      	movne	r0, #1
 8001180:	2000      	moveq	r0, #0
 8001182:	4770      	bx	lr

08001184 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001184:	b10a      	cbz	r2, 800118a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001186:	6101      	str	r1, [r0, #16]
 8001188:	4770      	bx	lr
 800118a:	0409      	lsls	r1, r1, #16
 800118c:	e7fb      	b.n	8001186 <HAL_GPIO_WritePin+0x2>

0800118e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800118e:	68c3      	ldr	r3, [r0, #12]
 8001190:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001192:	bf14      	ite	ne
 8001194:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001196:	6101      	streq	r1, [r0, #16]
 8001198:	4770      	bx	lr

0800119a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800119a:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800119c:	4604      	mov	r4, r0
{
 800119e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80011a0:	b310      	cbz	r0, 80011e8 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011a2:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 80011a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011aa:	b91b      	cbnz	r3, 80011b4 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ac:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b0:	f003 f984 	bl	80044bc <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011b4:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80011b6:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b8:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80011ba:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80011be:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 80011c2:	f001 f9eb 	bl	800259c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	4625      	mov	r5, r4
 80011ce:	6033      	str	r3, [r6, #0]
 80011d0:	1d27      	adds	r7, r4, #4
 80011d2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80011d6:	f855 0b10 	ldr.w	r0, [r5], #16
 80011da:	f001 f9cf 	bl	800257c <USB_CoreInit>
 80011de:	4606      	mov	r6, r0
 80011e0:	b120      	cbz	r0, 80011ec <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80011e8:	2501      	movs	r5, #1
 80011ea:	e048      	b.n	800127e <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011ec:	4601      	mov	r1, r0
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	f001 f9de 	bl	80025b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011f6:	f04f 0e01 	mov.w	lr, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fa:	6861      	ldr	r1, [r4, #4]
 80011fc:	b2c3      	uxtb	r3, r0
 80011fe:	4299      	cmp	r1, r3
 8001200:	f100 0001 	add.w	r0, r0, #1
 8001204:	d817      	bhi.n	8001236 <HAL_PCD_Init+0x9c>
 8001206:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001208:	4610      	mov	r0, r2
 800120a:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	4299      	cmp	r1, r3
 800120e:	f102 0201 	add.w	r2, r2, #1
 8001212:	d81d      	bhi.n	8001250 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001214:	466e      	mov	r6, sp
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	6033      	str	r3, [r6, #0]
 800121e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001222:	6820      	ldr	r0, [r4, #0]
 8001224:	f001 f9c6 	bl	80025b4 <USB_DevInit>
 8001228:	2301      	movs	r3, #1
 800122a:	4605      	mov	r5, r0
 800122c:	b300      	cbz	r0, 8001270 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800122e:	2202      	movs	r2, #2
 8001230:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8001234:	e7d8      	b.n	80011e8 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8001236:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800123a:	f882 e029 	strb.w	lr, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800123e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001242:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001244:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001248:	6396      	str	r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800124a:	63d6      	str	r6, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800124c:	6416      	str	r6, [r2, #64]	; 0x40
 800124e:	e7d5      	b.n	80011fc <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8001250:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001254:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001258:	330a      	adds	r3, #10
 800125a:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 800125c:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001260:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001264:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001268:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800126c:	50e0      	str	r0, [r4, r3]
 800126e:	e7cc      	b.n	800120a <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001270:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001274:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001278:	6820      	ldr	r0, [r4, #0]
 800127a:	f001 fc81 	bl	8002b80 <USB_DevDisconnect>

  return HAL_OK;
}
 800127e:	4628      	mov	r0, r5
 8001280:	b007      	add	sp, #28
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001284 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001284:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8001288:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800128a:	2b01      	cmp	r3, #1
{
 800128c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800128e:	d00e      	beq.n	80012ae <HAL_PCD_Start+0x2a>
 8001290:	2101      	movs	r1, #1
 8001292:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001296:	f003 fa3a 	bl	800470e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800129a:	6820      	ldr	r0, [r4, #0]
 800129c:	f001 fc6e 	bl	8002b7c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80012a0:	6820      	ldr	r0, [r4, #0]
 80012a2:	f001 f972 	bl	800258a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80012ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012ae:	2002      	movs	r0, #2
}
 80012b0:	bd10      	pop	{r4, pc}

080012b2 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80012b2:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 80012b6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80012b8:	2a01      	cmp	r2, #1
{
 80012ba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012bc:	d00b      	beq.n	80012d6 <HAL_PCD_SetAddress+0x24>
 80012be:	2201      	movs	r2, #1
 80012c0:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 80012c4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012c8:	6800      	ldr	r0, [r0, #0]
 80012ca:	f001 fc51 	bl	8002b70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 80012d4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80012d6:	2002      	movs	r0, #2
  return HAL_OK;
}
 80012d8:	bd10      	pop	{r4, pc}

080012da <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80012da:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012dc:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80012e0:	4604      	mov	r4, r0
 80012e2:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012e6:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 80012ea:	d01f      	beq.n	800132c <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 80012ec:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ee:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 80012f2:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f4:	4421      	add	r1, r4
    ep->is_in = 1U;
 80012f6:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80012fa:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80012fc:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012fe:	b2c0      	uxtb	r0, r0
 8001300:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001302:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001304:	b102      	cbz	r2, 8001308 <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001306:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001308:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 800130a:	bf04      	itt	eq
 800130c:	2300      	moveq	r3, #0
 800130e:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001310:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001314:	2b01      	cmp	r3, #1
 8001316:	d011      	beq.n	800133c <HAL_PCD_EP_Open+0x62>
 8001318:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800131a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800131c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001320:	f001 f964 	bl	80025ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001324:	2000      	movs	r0, #0
 8001326:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 800132a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800132c:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800132e:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 8001332:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001334:	4421      	add	r1, r4
    ep->is_in = 0U;
 8001336:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 800133a:	e7de      	b.n	80012fa <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 800133c:	2002      	movs	r0, #2
}
 800133e:	bd70      	pop	{r4, r5, r6, pc}

08001340 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001340:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001344:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001348:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800134a:	ea4f 1243 	mov.w	r2, r3, lsl #5
{
 800134e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001350:	d015      	beq.n	800137e <HAL_PCD_EP_Close+0x3e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001352:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8001356:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001358:	4402      	add	r2, r0
 800135a:	2001      	movs	r0, #1
 800135c:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001360:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8001362:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001366:	2b01      	cmp	r3, #1
 8001368:	d011      	beq.n	800138e <HAL_PCD_EP_Close+0x4e>
 800136a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800136c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800136e:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001372:	f001 fab3 	bl	80028dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001376:	2000      	movs	r0, #0
 8001378:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 800137c:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800137e:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8001382:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001384:	4402      	add	r2, r0
 8001386:	2000      	movs	r0, #0
 8001388:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 800138c:	e7e8      	b.n	8001360 <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 800138e:	2002      	movs	r0, #2
}
 8001390:	bd10      	pop	{r4, pc}

08001392 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001392:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001394:	2600      	movs	r6, #0
 8001396:	f001 0107 	and.w	r1, r1, #7
 800139a:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 800139c:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 800139e:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013a2:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013a6:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80013a8:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80013ac:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80013b0:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80013b4:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013b8:	6800      	ldr	r0, [r0, #0]
 80013ba:	f001 fbf9 	bl	8002bb0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80013be:	4630      	mov	r0, r6
 80013c0:	bd70      	pop	{r4, r5, r6, pc}

080013c2 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013c2:	f001 0107 	and.w	r1, r1, #7
 80013c6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80013ca:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 80013ce:	4770      	bx	lr

080013d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013d0:	f001 0107 	and.w	r1, r1, #7
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013d8:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80013da:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80013dc:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80013de:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e4:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013e8:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80013ea:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80013ec:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80013ee:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013f2:	6800      	ldr	r0, [r0, #0]
 80013f4:	f001 fbdc 	bl	8002bb0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80013f8:	4630      	mov	r0, r6
 80013fa:	bd70      	pop	{r4, r5, r6, pc}

080013fc <HAL_PCD_IRQHandler>:
{
 80013fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001400:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001402:	6800      	ldr	r0, [r0, #0]
 8001404:	f001 fbbe 	bl	8002b84 <USB_ReadInterrupts>
 8001408:	0402      	lsls	r2, r0, #16
 800140a:	f100 8210 	bmi.w	800182e <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800140e:	6820      	ldr	r0, [r4, #0]
 8001410:	f001 fbb8 	bl	8002b84 <USB_ReadInterrupts>
 8001414:	0543      	lsls	r3, r0, #21
 8001416:	d50f      	bpl.n	8001438 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001418:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800141a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800141c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001424:	041b      	lsls	r3, r3, #16
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800142c:	f003 f87d 	bl	800452a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001430:	2100      	movs	r1, #0
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff ff3d 	bl	80012b2 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001438:	6820      	ldr	r0, [r4, #0]
 800143a:	f001 fba3 	bl	8002b84 <USB_ReadInterrupts>
 800143e:	0447      	lsls	r7, r0, #17
 8001440:	d508      	bpl.n	8001454 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001454:	6820      	ldr	r0, [r4, #0]
 8001456:	f001 fb95 	bl	8002b84 <USB_ReadInterrupts>
 800145a:	0486      	lsls	r6, r0, #18
 800145c:	d508      	bpl.n	8001470 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800145e:	6822      	ldr	r2, [r4, #0]
 8001460:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	0c1b      	lsrs	r3, r3, #16
 800146c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	f001 fb87 	bl	8002b84 <USB_ReadInterrupts>
 8001476:	04c5      	lsls	r5, r0, #19
 8001478:	d51c      	bpl.n	80014b4 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800147a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800147c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800147e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001482:	f023 0304 	bic.w	r3, r3, #4
 8001486:	041b      	lsls	r3, r3, #16
 8001488:	0c1b      	lsrs	r3, r3, #16
 800148a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800148e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001492:	f023 0308 	bic.w	r3, r3, #8
 8001496:	041b      	lsls	r3, r3, #16
 8001498:	0c1b      	lsrs	r3, r3, #16
 800149a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800149e:	f003 f867 	bl	8004570 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014a2:	6822      	ldr	r2, [r4, #0]
 80014a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	0c1b      	lsrs	r3, r3, #16
 80014b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	f001 fb65 	bl	8002b84 <USB_ReadInterrupts>
 80014ba:	0500      	lsls	r0, r0, #20
 80014bc:	d526      	bpl.n	800150c <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80014be:	6820      	ldr	r0, [r4, #0]
 80014c0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014ce:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80014d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	0c1b      	lsrs	r3, r3, #16
 80014da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80014de:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014ec:	f001 fb4a 	bl	8002b84 <USB_ReadInterrupts>
 80014f0:	04c1      	lsls	r1, r0, #19
 80014f2:	d508      	bpl.n	8001506 <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001506:	4620      	mov	r0, r4
 8001508:	f003 f822 	bl	8004550 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	f001 fb39 	bl	8002b84 <USB_ReadInterrupts>
 8001512:	0582      	lsls	r2, r0, #22
 8001514:	d50b      	bpl.n	800152e <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001516:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001518:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800151a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800151e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800152a:	f002 fffa 	bl	8004522 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800152e:	6820      	ldr	r0, [r4, #0]
 8001530:	f001 fb28 	bl	8002b84 <USB_ReadInterrupts>
 8001534:	05c3      	lsls	r3, r0, #23
 8001536:	d508      	bpl.n	800154a <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800153e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800154a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 800154e:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001552:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001554:	f011 060f 	ands.w	r6, r1, #15
 8001558:	f040 80b7 	bne.w	80016ca <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800155c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800155e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001562:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001564:	d12c      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001566:	ea03 0309 	and.w	r3, r3, r9
 800156a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156e:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001570:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001574:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001578:	b29b      	uxth	r3, r3
 800157a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800157e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001582:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001586:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800158c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800158e:	4413      	add	r3, r2
 8001590:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001592:	4620      	mov	r0, r4
 8001594:	f002 ffbe 	bl	8004514 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001598:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800159c:	b153      	cbz	r3, 80015b4 <HAL_PCD_IRQHandler+0x1b8>
 800159e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015a0:	b942      	cbnz	r2, 80015b4 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015a2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80015a6:	6821      	ldr	r1, [r4, #0]
 80015a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ac:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015b0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	d4c7      	bmi.n	800154e <HAL_PCD_IRQHandler+0x152>
 80015be:	e726      	b.n	800140e <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015c0:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80015c4:	d021      	beq.n	800160a <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015ca:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015d8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015dc:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80015e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015e4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015e8:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80015ec:	f001 fbc8 	bl	8002d80 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015f0:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015f2:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015f4:	8813      	ldrh	r3, [r2, #0]
 80015f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015fa:	051b      	lsls	r3, r3, #20
 80015fc:	0d1b      	lsrs	r3, r3, #20
 80015fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001602:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001604:	f002 ff78 	bl	80044f8 <HAL_PCD_SetupStageCallback>
 8001608:	e7d4      	b.n	80015b4 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800160a:	041f      	lsls	r7, r3, #16
 800160c:	d5d2      	bpl.n	80015b4 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800160e:	8803      	ldrh	r3, [r0, #0]
 8001610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	0d1b      	lsrs	r3, r3, #20
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800161e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001622:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001626:	b29b      	uxth	r3, r3
 8001628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800162c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001630:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001638:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800163c:	b18b      	cbz	r3, 8001662 <HAL_PCD_IRQHandler+0x266>
 800163e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001642:	b171      	cbz	r1, 8001662 <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001644:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001648:	f001 fb9a 	bl	8002d80 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800164c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001650:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001654:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001656:	4413      	add	r3, r2
 8001658:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800165c:	4620      	mov	r0, r4
 800165e:	f002 ff51 	bl	8004504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001662:	6821      	ldr	r1, [r4, #0]
 8001664:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8001668:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800166c:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001670:	b29b      	uxth	r3, r3
 8001672:	b9cd      	cbnz	r5, 80016a8 <HAL_PCD_IRQHandler+0x2ac>
 8001674:	5ac2      	ldrh	r2, [r0, r3]
 8001676:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800167a:	0412      	lsls	r2, r2, #16
 800167c:	0c12      	lsrs	r2, r2, #16
 800167e:	52c2      	strh	r2, [r0, r3]
 8001680:	5ac2      	ldrh	r2, [r0, r3]
 8001682:	b292      	uxth	r2, r2
 8001684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001688:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800168a:	880b      	ldrh	r3, [r1, #0]
 800168c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800169c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	800b      	strh	r3, [r1, #0]
 80016a6:	e785      	b.n	80015b4 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016a8:	2d3e      	cmp	r5, #62	; 0x3e
 80016aa:	d806      	bhi.n	80016ba <HAL_PCD_IRQHandler+0x2be>
 80016ac:	086a      	lsrs	r2, r5, #1
 80016ae:	07ee      	lsls	r6, r5, #31
 80016b0:	bf48      	it	mi
 80016b2:	3201      	addmi	r2, #1
 80016b4:	0292      	lsls	r2, r2, #10
 80016b6:	b292      	uxth	r2, r2
 80016b8:	e7e6      	b.n	8001688 <HAL_PCD_IRQHandler+0x28c>
 80016ba:	096a      	lsrs	r2, r5, #5
 80016bc:	06ed      	lsls	r5, r5, #27
 80016be:	bf08      	it	eq
 80016c0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80016c4:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80016c8:	e7f5      	b.n	80016b6 <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016ca:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80016ce:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016d2:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80016d6:	d03d      	beq.n	8001754 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016d8:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80016dc:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e2:	051b      	lsls	r3, r3, #20
 80016e4:	0d1b      	lsrs	r3, r3, #20
 80016e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ea:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80016ee:	19e1      	adds	r1, r4, r7
 80016f0:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d158      	bne.n	80017aa <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016fc:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8001700:	b29b      	uxth	r3, r3
 8001702:	3306      	adds	r3, #6
 8001704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001708:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800170c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8001710:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001714:	b135      	cbz	r5, 8001724 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001716:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800171a:	462b      	mov	r3, r5
 800171c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001720:	f001 fb2e 	bl	8002d80 <USB_ReadPMA>
 8001724:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001726:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 800172a:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 800172e:	442b      	add	r3, r5
 8001730:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001734:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8001738:	442a      	add	r2, r5
 800173a:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800173e:	b11b      	cbz	r3, 8001748 <HAL_PCD_IRQHandler+0x34c>
 8001740:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001744:	4285      	cmp	r5, r0
 8001746:	d269      	bcs.n	800181c <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001748:	4427      	add	r7, r4
 800174a:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800174e:	4620      	mov	r0, r4
 8001750:	f002 fed8 	bl	8004504 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001754:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001758:	f43f af2c 	beq.w	80015b4 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800175c:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800175e:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001760:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8001764:	b292      	uxth	r2, r2
 8001766:	ea02 0209 	and.w	r2, r2, r9
 800176a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800176e:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001772:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001776:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 800177a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800177e:	b29b      	uxth	r3, r3
 8001780:	3302      	adds	r3, #2
 8001782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001786:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800178a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 800178e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001790:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001794:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001796:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8001798:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800179a:	63f2      	str	r2, [r6, #60]	; 0x3c
 800179c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d141      	bne.n	8001828 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017a4:	f002 feb6 	bl	8004514 <HAL_PCD_DataInStageCallback>
 80017a8:	e704      	b.n	80015b4 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017aa:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 80017ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017b8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80017bc:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017be:	d01f      	beq.n	8001800 <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017c0:	3202      	adds	r2, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017c8:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 80017cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80017d0:	b135      	cbz	r5, 80017e0 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017d2:	462b      	mov	r3, r5
 80017d4:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017d8:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80017dc:	f001 fad0 	bl	8002d80 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017e0:	19e3      	adds	r3, r4, r7
 80017e2:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	ea03 030b 	and.w	r3, r3, fp
 80017f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017fa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80017fe:	e791      	b.n	8001724 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001800:	3206      	adds	r2, #6
 8001802:	4413      	add	r3, r2
 8001804:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001808:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 800180c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001810:	2d00      	cmp	r5, #0
 8001812:	d0e5      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001814:	462b      	mov	r3, r5
 8001816:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800181a:	e7dd      	b.n	80017d8 <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800181c:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff fdb6 	bl	8001392 <HAL_PCD_EP_Receive>
 8001826:	e795      	b.n	8001754 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001828:	f7ff fdd2 	bl	80013d0 <HAL_PCD_EP_Transmit>
 800182c:	e6c2      	b.n	80015b4 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800182e:	f8df 900c 	ldr.w	r9, [pc, #12]	; 800183c <HAL_PCD_IRQHandler+0x440>
 8001832:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8001840 <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001836:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8001844 <HAL_PCD_IRQHandler+0x448>
 800183a:	e6bb      	b.n	80015b4 <HAL_PCD_IRQHandler+0x1b8>
 800183c:	ffff8f0f 	.word	0xffff8f0f
 8001840:	ffff8000 	.word	0xffff8000
 8001844:	ffff8f8f 	.word	0xffff8f8f

08001848 <HAL_PCD_EP_SetStall>:
{
 8001848:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800184a:	6843      	ldr	r3, [r0, #4]
 800184c:	f001 0507 	and.w	r5, r1, #7
 8001850:	429d      	cmp	r5, r3
{
 8001852:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001854:	d828      	bhi.n	80018a8 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8001856:	060b      	lsls	r3, r1, #24
 8001858:	d51d      	bpl.n	8001896 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 800185a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800185c:	016b      	lsls	r3, r5, #5
 800185e:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8001862:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001864:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001866:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 800186a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800186c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800186e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001870:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001874:	429a      	cmp	r2, r3
 8001876:	d019      	beq.n	80018ac <HAL_PCD_EP_SetStall+0x64>
 8001878:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800187c:	6820      	ldr	r0, [r4, #0]
 800187e:	f001 f90c 	bl	8002a9a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001882:	b925      	cbnz	r5, 800188e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001884:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	f001 f97f 	bl	8002b8c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800188e:	2000      	movs	r0, #0
 8001890:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001894:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001896:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001898:	014b      	lsls	r3, r1, #5
 800189a:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 800189e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80018a0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80018a2:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80018a6:	e7e0      	b.n	800186a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80018a8:	2001      	movs	r0, #1
 80018aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80018ac:	2002      	movs	r0, #2
}
 80018ae:	bd38      	pop	{r3, r4, r5, pc}

080018b0 <HAL_PCD_EP_ClrStall>:
{
 80018b0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018b2:	6843      	ldr	r3, [r0, #4]
 80018b4:	f001 020f 	and.w	r2, r1, #15
 80018b8:	429a      	cmp	r2, r3
{
 80018ba:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018bc:	d826      	bhi.n	800190c <HAL_PCD_EP_ClrStall+0x5c>
 80018be:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80018c2:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c6:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 80018ca:	d017      	beq.n	80018fc <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80018d0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80018d2:	4402      	add	r2, r0
 80018d4:	2001      	movs	r0, #1
 80018d6:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 80018da:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80018dc:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80018de:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80018e0:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d013      	beq.n	8001910 <HAL_PCD_EP_ClrStall+0x60>
 80018e8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80018ec:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018f0:	f001 f8f3 	bl	8002ada <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018f4:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 80018f8:	4628      	mov	r0, r5
 80018fa:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018fc:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8001900:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001902:	4402      	add	r2, r0
 8001904:	2000      	movs	r0, #0
 8001906:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 800190a:	e7e6      	b.n	80018da <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001910:	2002      	movs	r0, #2
}
 8001912:	bd38      	pop	{r3, r4, r5, pc}

08001914 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001914:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001918:	bf1b      	ittet	ne
 800191a:	f001 0107 	andne.w	r1, r1, #7
 800191e:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001922:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001926:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001928:	bf08      	it	eq
 800192a:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800192e:	b91a      	cbnz	r2, 8001938 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001930:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001932:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001934:	2000      	movs	r0, #0
 8001936:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001938:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800193a:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800193c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800193e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001940:	8143      	strh	r3, [r0, #10]
 8001942:	e7f7      	b.n	8001934 <HAL_PCDEx_PMAConfig+0x20>

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001948:	4605      	mov	r5, r0
 800194a:	b908      	cbnz	r0, 8001950 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800194c:	2001      	movs	r0, #1
 800194e:	e03c      	b.n	80019ca <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	6803      	ldr	r3, [r0, #0]
 8001952:	07db      	lsls	r3, r3, #31
 8001954:	d410      	bmi.n	8001978 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	079f      	lsls	r7, r3, #30
 800195a:	d45d      	bmi.n	8001a18 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	0719      	lsls	r1, r3, #28
 8001960:	f100 8094 	bmi.w	8001a8c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	075a      	lsls	r2, r3, #29
 8001968:	f100 80be 	bmi.w	8001ae8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196c:	69e8      	ldr	r0, [r5, #28]
 800196e:	2800      	cmp	r0, #0
 8001970:	f040 812c 	bne.w	8001bcc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001974:	2000      	movs	r0, #0
 8001976:	e028      	b.n	80019ca <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001978:	4c8f      	ldr	r4, [pc, #572]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 800197a:	6863      	ldr	r3, [r4, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b04      	cmp	r3, #4
 8001982:	d007      	beq.n	8001994 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
 800198e:	6863      	ldr	r3, [r4, #4]
 8001990:	03de      	lsls	r6, r3, #15
 8001992:	d506      	bpl.n	80019a2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	039c      	lsls	r4, r3, #14
 8001998:	d5dd      	bpl.n	8001956 <HAL_RCC_OscConfig+0x12>
 800199a:	686b      	ldr	r3, [r5, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1da      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
 80019a0:	e7d4      	b.n	800194c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	686b      	ldr	r3, [r5, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d112      	bne.n	80019d0 <HAL_RCC_OscConfig+0x8c>
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019b2:	f7fe fe9f 	bl	80006f4 <HAL_GetTick>
 80019b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	0398      	lsls	r0, r3, #14
 80019bc:	d4cb      	bmi.n	8001956 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019be:	f7fe fe99 	bl	80006f4 <HAL_GetTick>
 80019c2:	1b80      	subs	r0, r0, r6
 80019c4:	2864      	cmp	r0, #100	; 0x64
 80019c6:	d9f7      	bls.n	80019b8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80019c8:	2003      	movs	r0, #3
}
 80019ca:	b002      	add	sp, #8
 80019cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	b99b      	cbnz	r3, 80019fa <HAL_RCC_OscConfig+0xb6>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019e2:	f7fe fe87 	bl	80006f4 <HAL_GetTick>
 80019e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	0399      	lsls	r1, r3, #14
 80019ec:	d5b3      	bpl.n	8001956 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ee:	f7fe fe81 	bl	80006f4 <HAL_GetTick>
 80019f2:	1b80      	subs	r0, r0, r6
 80019f4:	2864      	cmp	r0, #100	; 0x64
 80019f6:	d9f7      	bls.n	80019e8 <HAL_RCC_OscConfig+0xa4>
 80019f8:	e7e6      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	d103      	bne.n	8001a0a <HAL_RCC_OscConfig+0xc6>
 8001a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a06:	6023      	str	r3, [r4, #0]
 8001a08:	e7cf      	b.n	80019aa <HAL_RCC_OscConfig+0x66>
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0e:	6023      	str	r3, [r4, #0]
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	e7cb      	b.n	80019b0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a18:	4c67      	ldr	r4, [pc, #412]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	6863      	ldr	r3, [r4, #4]
 8001a1c:	f013 0f0c 	tst.w	r3, #12
 8001a20:	d007      	beq.n	8001a32 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a22:	6863      	ldr	r3, [r4, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d110      	bne.n	8001a4e <HAL_RCC_OscConfig+0x10a>
 8001a2c:	6863      	ldr	r3, [r4, #4]
 8001a2e:	03da      	lsls	r2, r3, #15
 8001a30:	d40d      	bmi.n	8001a4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	079b      	lsls	r3, r3, #30
 8001a36:	d502      	bpl.n	8001a3e <HAL_RCC_OscConfig+0xfa>
 8001a38:	692b      	ldr	r3, [r5, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d186      	bne.n	800194c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	696a      	ldr	r2, [r5, #20]
 8001a42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a4a:	6023      	str	r3, [r4, #0]
 8001a4c:	e786      	b.n	800195c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a4e:	692a      	ldr	r2, [r5, #16]
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x278>)
 8001a52:	b16a      	cbz	r2, 8001a70 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a58:	f7fe fe4c 	bl	80006f4 <HAL_GetTick>
 8001a5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	079f      	lsls	r7, r3, #30
 8001a62:	d4ec      	bmi.n	8001a3e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7fe fe46 	bl	80006f4 <HAL_GetTick>
 8001a68:	1b80      	subs	r0, r0, r6
 8001a6a:	2802      	cmp	r0, #2
 8001a6c:	d9f7      	bls.n	8001a5e <HAL_RCC_OscConfig+0x11a>
 8001a6e:	e7ab      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001a70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a72:	f7fe fe3f 	bl	80006f4 <HAL_GetTick>
 8001a76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	0798      	lsls	r0, r3, #30
 8001a7c:	f57f af6e 	bpl.w	800195c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7fe fe38 	bl	80006f4 <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9f6      	bls.n	8001a78 <HAL_RCC_OscConfig+0x134>
 8001a8a:	e79d      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	69aa      	ldr	r2, [r5, #24]
 8001a8e:	4c4a      	ldr	r4, [pc, #296]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a90:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	b1da      	cbz	r2, 8001acc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a98:	f7fe fe2c 	bl	80006f4 <HAL_GetTick>
 8001a9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa0:	079b      	lsls	r3, r3, #30
 8001aa2:	d50d      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aa4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001aa8:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ab0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001ab2:	bf00      	nop
  }
  while (Delay --);
 8001ab4:	9b01      	ldr	r3, [sp, #4]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	9201      	str	r2, [sp, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x16e>
 8001abe:	e751      	b.n	8001964 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7fe fe18 	bl	80006f4 <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9e9      	bls.n	8001a9e <HAL_RCC_OscConfig+0x15a>
 8001aca:	e77d      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001acc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ace:	f7fe fe11 	bl	80006f4 <HAL_GetTick>
 8001ad2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ad6:	079f      	lsls	r7, r3, #30
 8001ad8:	f57f af44 	bpl.w	8001964 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7fe fe0a 	bl	80006f4 <HAL_GetTick>
 8001ae0:	1b80      	subs	r0, r0, r6
 8001ae2:	2802      	cmp	r0, #2
 8001ae4:	d9f6      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x190>
 8001ae6:	e76f      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae8:	4c33      	ldr	r4, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001aea:	69e3      	ldr	r3, [r4, #28]
 8001aec:	00d8      	lsls	r0, r3, #3
 8001aee:	d424      	bmi.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001af0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	69e3      	ldr	r3, [r4, #28]
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61e3      	str	r3, [r4, #28]
 8001afa:	69e3      	ldr	r3, [r4, #28]
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4e30      	ldr	r6, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x284>)
 8001b06:	6833      	ldr	r3, [r6, #0]
 8001b08:	05d9      	lsls	r1, r3, #23
 8001b0a:	d518      	bpl.n	8001b3e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	68eb      	ldr	r3, [r5, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d126      	bne.n	8001b60 <HAL_RCC_OscConfig+0x21c>
 8001b12:	6a23      	ldr	r3, [r4, #32]
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b1a:	f7fe fdeb 	bl	80006f4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b22:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	6a23      	ldr	r3, [r4, #32]
 8001b26:	079b      	lsls	r3, r3, #30
 8001b28:	d53f      	bpl.n	8001baa <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001b2a:	2f00      	cmp	r7, #0
 8001b2c:	f43f af1e 	beq.w	800196c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	69e3      	ldr	r3, [r4, #28]
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	61e3      	str	r3, [r4, #28]
 8001b38:	e718      	b.n	800196c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2700      	movs	r7, #0
 8001b3c:	e7e2      	b.n	8001b04 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	6833      	ldr	r3, [r6, #0]
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b46:	f7fe fdd5 	bl	80006f4 <HAL_GetTick>
 8001b4a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	6833      	ldr	r3, [r6, #0]
 8001b4e:	05da      	lsls	r2, r3, #23
 8001b50:	d4dc      	bmi.n	8001b0c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7fe fdcf 	bl	80006f4 <HAL_GetTick>
 8001b56:	eba0 0008 	sub.w	r0, r0, r8
 8001b5a:	2864      	cmp	r0, #100	; 0x64
 8001b5c:	d9f6      	bls.n	8001b4c <HAL_RCC_OscConfig+0x208>
 8001b5e:	e733      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	b9ab      	cbnz	r3, 8001b8e <HAL_RCC_OscConfig+0x24a>
 8001b62:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6223      	str	r3, [r4, #32]
 8001b6e:	6a23      	ldr	r3, [r4, #32]
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b76:	f7fe fdbd 	bl	80006f4 <HAL_GetTick>
 8001b7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	6a23      	ldr	r3, [r4, #32]
 8001b7e:	0798      	lsls	r0, r3, #30
 8001b80:	d5d3      	bpl.n	8001b2a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7fe fdb7 	bl	80006f4 <HAL_GetTick>
 8001b86:	1b80      	subs	r0, r0, r6
 8001b88:	4540      	cmp	r0, r8
 8001b8a:	d9f7      	bls.n	8001b7c <HAL_RCC_OscConfig+0x238>
 8001b8c:	e71c      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	6a23      	ldr	r3, [r4, #32]
 8001b92:	d103      	bne.n	8001b9c <HAL_RCC_OscConfig+0x258>
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6223      	str	r3, [r4, #32]
 8001b9a:	e7ba      	b.n	8001b12 <HAL_RCC_OscConfig+0x1ce>
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6223      	str	r3, [r4, #32]
 8001ba2:	6a23      	ldr	r3, [r4, #32]
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	e7b6      	b.n	8001b18 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe fda3 	bl	80006f4 <HAL_GetTick>
 8001bae:	eba0 0008 	sub.w	r0, r0, r8
 8001bb2:	42b0      	cmp	r0, r6
 8001bb4:	d9b6      	bls.n	8001b24 <HAL_RCC_OscConfig+0x1e0>
 8001bb6:	e707      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	42420000 	.word	0x42420000
 8001bc0:	42420480 	.word	0x42420480
 8001bc4:	20000120 	.word	0x20000120
 8001bc8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x334>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	461c      	mov	r4, r3
 8001bd2:	f002 020c 	and.w	r2, r2, #12
 8001bd6:	2a08      	cmp	r2, #8
 8001bd8:	d03d      	beq.n	8001c56 <HAL_RCC_OscConfig+0x312>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	4e27      	ldr	r6, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001be0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	d12b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001be4:	f7fe fd86 	bl	80006f4 <HAL_GetTick>
 8001be8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	0199      	lsls	r1, r3, #6
 8001bee:	d41f      	bmi.n	8001c30 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bf0:	6a2b      	ldr	r3, [r5, #32]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	68a9      	ldr	r1, [r5, #8]
 8001bfc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c00:	430a      	orrs	r2, r1
 8001c02:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c04:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c06:	6862      	ldr	r2, [r4, #4]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c12:	2301      	movs	r3, #1
 8001c14:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c16:	f7fe fd6d 	bl	80006f4 <HAL_GetTick>
 8001c1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	019a      	lsls	r2, r3, #6
 8001c20:	f53f aea8 	bmi.w	8001974 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7fe fd66 	bl	80006f4 <HAL_GetTick>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	2802      	cmp	r0, #2
 8001c2c:	d9f6      	bls.n	8001c1c <HAL_RCC_OscConfig+0x2d8>
 8001c2e:	e6cb      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe fd60 	bl	80006f4 <HAL_GetTick>
 8001c34:	1bc0      	subs	r0, r0, r7
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9d7      	bls.n	8001bea <HAL_RCC_OscConfig+0x2a6>
 8001c3a:	e6c5      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001c3c:	f7fe fd5a 	bl	80006f4 <HAL_GetTick>
 8001c40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	f57f ae95 	bpl.w	8001974 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe fd53 	bl	80006f4 <HAL_GetTick>
 8001c4e:	1b40      	subs	r0, r0, r5
 8001c50:	2802      	cmp	r0, #2
 8001c52:	d9f6      	bls.n	8001c42 <HAL_RCC_OscConfig+0x2fe>
 8001c54:	e6b8      	b.n	80019c8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c56:	2801      	cmp	r0, #1
 8001c58:	f43f aeb7 	beq.w	80019ca <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001c5c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	6a2b      	ldr	r3, [r5, #32]
 8001c60:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f47f ae71 	bne.w	800194c <HAL_RCC_OscConfig+0x8>
 8001c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001c70:	1ac0      	subs	r0, r0, r3
 8001c72:	bf18      	it	ne
 8001c74:	2001      	movne	r0, #1
 8001c76:	e6a8      	b.n	80019ca <HAL_RCC_OscConfig+0x86>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	42420060 	.word	0x42420060

08001c80 <HAL_RCC_GetSysClockFreq>:
{
 8001c80:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001c84:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c86:	ac02      	add	r4, sp, #8
 8001c88:	f103 0510 	add.w	r5, r3, #16
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	6859      	ldr	r1, [r3, #4]
 8001c92:	3308      	adds	r3, #8
 8001c94:	c203      	stmia	r2!, {r0, r1}
 8001c96:	42ab      	cmp	r3, r5
 8001c98:	4614      	mov	r4, r2
 8001c9a:	d1f7      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001ca2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001ca4:	4911      	ldr	r1, [pc, #68]	; (8001cec <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ca6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001caa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001cac:	f003 020c 	and.w	r2, r3, #12
 8001cb0:	2a08      	cmp	r2, #8
 8001cb2:	d117      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001cb8:	a806      	add	r0, sp, #24
 8001cba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cbc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cbe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc2:	d50c      	bpl.n	8001cde <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cc6:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ccc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cce:	aa06      	add	r2, sp, #24
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cd6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001cda:	b007      	add	sp, #28
 8001cdc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x74>)
 8001ce0:	4350      	muls	r0, r2
 8001ce2:	e7fa      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001ce6:	e7f8      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x5a>
 8001ce8:	080052b4 	.word	0x080052b4
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	007a1200 	.word	0x007a1200
 8001cf4:	003d0900 	.word	0x003d0900

08001cf8 <HAL_RCC_ClockConfig>:
{
 8001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b910      	cbnz	r0, 8001d08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
 8001d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <HAL_RCC_ClockConfig+0x128>)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d329      	bcc.n	8001d68 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	6821      	ldr	r1, [r4, #0]
 8001d16:	078e      	lsls	r6, r1, #30
 8001d18:	d431      	bmi.n	8001d7e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	07ca      	lsls	r2, r1, #31
 8001d1c:	d444      	bmi.n	8001da8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1e:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <HAL_RCC_ClockConfig+0x128>)
 8001d20:	6813      	ldr	r3, [r2, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	429d      	cmp	r5, r3
 8001d28:	d367      	bcc.n	8001dfa <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	4d3d      	ldr	r5, [pc, #244]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001d2e:	f012 0f04 	tst.w	r2, #4
 8001d32:	d16e      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	0713      	lsls	r3, r2, #28
 8001d36:	d506      	bpl.n	8001d46 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d38:	686b      	ldr	r3, [r5, #4]
 8001d3a:	6922      	ldr	r2, [r4, #16]
 8001d3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d44:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f7ff ff9b 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001d4a:	686b      	ldr	r3, [r5, #4]
 8001d4c:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <HAL_RCC_ClockConfig+0x130>)
 8001d4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	40d8      	lsrs	r0, r3
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_ClockConfig+0x134>)
 8001d58:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_RCC_ClockConfig+0x138>)
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	f7fe fc87 	bl	8000670 <HAL_InitTick>
  return HAL_OK;
 8001d62:	2000      	movs	r0, #0
 8001d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d68:	6813      	ldr	r3, [r2, #0]
 8001d6a:	f023 0307 	bic.w	r3, r3, #7
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4299      	cmp	r1, r3
 8001d7a:	d1c2      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xa>
 8001d7c:	e7ca      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1c>
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	bf1e      	ittt	ne
 8001d86:	685a      	ldrne	r2, [r3, #4]
 8001d88:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001d8c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d90:	bf42      	ittt	mi
 8001d92:	685a      	ldrmi	r2, [r3, #4]
 8001d94:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001d98:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	68a0      	ldr	r0, [r4, #8]
 8001d9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001da2:	4302      	orrs	r2, r0
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e7b8      	b.n	8001d1a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da8:	6862      	ldr	r2, [r4, #4]
 8001daa:	4e1e      	ldr	r6, [pc, #120]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001dac:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db0:	d11b      	bne.n	8001dea <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	d0a4      	beq.n	8001d02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001dc6:	f7fe fc95 	bl	80006f4 <HAL_GetTick>
 8001dca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dcc:	6873      	ldr	r3, [r6, #4]
 8001dce:	6862      	ldr	r2, [r4, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dd8:	d0a1      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dda:	f7fe fc8b 	bl	80006f4 <HAL_GetTick>
 8001dde:	1bc0      	subs	r0, r0, r7
 8001de0:	4540      	cmp	r0, r8
 8001de2:	d9f3      	bls.n	8001dcc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001de4:	2003      	movs	r0, #3
}
 8001de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dea:	2a02      	cmp	r2, #2
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001df2:	e7e0      	b.n	8001db6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	f013 0f02 	tst.w	r3, #2
 8001df8:	e7dd      	b.n	8001db6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f023 0307 	bic.w	r3, r3, #7
 8001e00:	432b      	orrs	r3, r5
 8001e02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e04:	6813      	ldr	r3, [r2, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	429d      	cmp	r5, r3
 8001e0c:	f47f af79 	bne.w	8001d02 <HAL_RCC_ClockConfig+0xa>
 8001e10:	e78b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e12:	686b      	ldr	r3, [r5, #4]
 8001e14:	68e1      	ldr	r1, [r4, #12]
 8001e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	606b      	str	r3, [r5, #4]
 8001e1e:	e789      	b.n	8001d34 <HAL_RCC_ClockConfig+0x3c>
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	080052c8 	.word	0x080052c8
 8001e2c:	20000120 	.word	0x20000120
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e34:	6803      	ldr	r3, [r0, #0]
{
 8001e36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e3a:	07d9      	lsls	r1, r3, #31
{
 8001e3c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e3e:	d520      	bpl.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e40:	4c35      	ldr	r4, [pc, #212]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001e42:	69e3      	ldr	r3, [r4, #28]
 8001e44:	00da      	lsls	r2, r3, #3
 8001e46:	d432      	bmi.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001e48:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	69e3      	ldr	r3, [r4, #28]
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61e3      	str	r3, [r4, #28]
 8001e52:	69e3      	ldr	r3, [r4, #28]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	4e2f      	ldr	r6, [pc, #188]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001e5e:	6833      	ldr	r3, [r6, #0]
 8001e60:	05db      	lsls	r3, r3, #23
 8001e62:	d526      	bpl.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e64:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e66:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e6a:	d136      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6c:	6a23      	ldr	r3, [r4, #32]
 8001e6e:	686a      	ldr	r2, [r5, #4]
 8001e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e74:	4313      	orrs	r3, r2
 8001e76:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e78:	b11f      	cbz	r7, 8001e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	69e3      	ldr	r3, [r4, #28]
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e82:	6828      	ldr	r0, [r5, #0]
 8001e84:	0783      	lsls	r3, r0, #30
 8001e86:	d506      	bpl.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001e8a:	68a9      	ldr	r1, [r5, #8]
 8001e8c:	6853      	ldr	r3, [r2, #4]
 8001e8e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e92:	430b      	orrs	r3, r1
 8001e94:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e96:	f010 0010 	ands.w	r0, r0, #16
 8001e9a:	d01b      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e9c:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001e9e:	68e9      	ldr	r1, [r5, #12]
 8001ea0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ea2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ea4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6053      	str	r3, [r2, #4]
 8001eac:	e012      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2700      	movs	r7, #0
 8001eb0:	e7d4      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	6833      	ldr	r3, [r6, #0]
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001eba:	f7fe fc1b 	bl	80006f4 <HAL_GetTick>
 8001ebe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	6833      	ldr	r3, [r6, #0]
 8001ec2:	05d8      	lsls	r0, r3, #23
 8001ec4:	d4ce      	bmi.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7fe fc15 	bl	80006f4 <HAL_GetTick>
 8001eca:	eba0 0008 	sub.w	r0, r0, r8
 8001ece:	2864      	cmp	r0, #100	; 0x64
 8001ed0:	d9f6      	bls.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
}
 8001ed4:	b002      	add	sp, #8
 8001ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eda:	686a      	ldr	r2, [r5, #4]
 8001edc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d0c3      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eea:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eec:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001ef4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ef6:	07d9      	lsls	r1, r3, #31
 8001ef8:	d5b8      	bpl.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001efa:	f7fe fbfb 	bl	80006f4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	6a23      	ldr	r3, [r4, #32]
 8001f06:	079a      	lsls	r2, r3, #30
 8001f08:	d4b0      	bmi.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7fe fbf3 	bl	80006f4 <HAL_GetTick>
 8001f0e:	1b80      	subs	r0, r0, r6
 8001f10:	4540      	cmp	r0, r8
 8001f12:	d9f7      	bls.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001f14:	e7dd      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42420440 	.word	0x42420440

08001f24 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f24:	6a03      	ldr	r3, [r0, #32]
{
 8001f26:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f32:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f36:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f3a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f3c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f3e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001f42:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f44:	4d0a      	ldr	r5, [pc, #40]	; (8001f70 <TIM_OC1_SetConfig+0x4c>)
 8001f46:	42a8      	cmp	r0, r5
 8001f48:	d10b      	bne.n	8001f62 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f4a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f4c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f50:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f52:	698e      	ldr	r6, [r1, #24]
 8001f54:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f56:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f5a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f60:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f62:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f64:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f66:	684a      	ldr	r2, [r1, #4]
 8001f68:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f6a:	6203      	str	r3, [r0, #32]
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
 8001f6e:	bf00      	nop
 8001f70:	40012c00 	.word	0x40012c00

08001f74 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f74:	6a03      	ldr	r3, [r0, #32]
{
 8001f76:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f7e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f82:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f8a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001f8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f96:	4d0b      	ldr	r5, [pc, #44]	; (8001fc4 <TIM_OC3_SetConfig+0x50>)
 8001f98:	42a8      	cmp	r0, r5
 8001f9a:	d10d      	bne.n	8001fb8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f9c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fa2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fa6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fa8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001faa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fae:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fb4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fb8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fba:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fbc:	684a      	ldr	r2, [r1, #4]
 8001fbe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc0:	6203      	str	r3, [r0, #32]
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	40012c00 	.word	0x40012c00

08001fc8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fc8:	6a03      	ldr	r3, [r0, #32]
{
 8001fca:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fd0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fd6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fd8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fda:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fde:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fe2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fe8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fec:	4d06      	ldr	r5, [pc, #24]	; (8002008 <TIM_OC4_SetConfig+0x40>)
 8001fee:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ff0:	bf02      	ittt	eq
 8001ff2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ff4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ff8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ffc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ffe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002000:	684a      	ldr	r2, [r1, #4]
 8002002:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002004:	6203      	str	r3, [r0, #32]
 8002006:	bd30      	pop	{r4, r5, pc}
 8002008:	40012c00 	.word	0x40012c00

0800200c <HAL_TIM_PWM_MspInit>:
 800200c:	4770      	bx	lr

0800200e <HAL_TIM_OC_DelayElapsedCallback>:
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_IC_CaptureCallback>:
 8002010:	4770      	bx	lr

08002012 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_TriggerCallback>:
 8002014:	4770      	bx	lr

08002016 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002016:	6803      	ldr	r3, [r0, #0]
{
 8002018:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800201a:	691a      	ldr	r2, [r3, #16]
{
 800201c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800201e:	0791      	lsls	r1, r2, #30
 8002020:	d50e      	bpl.n	8002040 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	0792      	lsls	r2, r2, #30
 8002026:	d50b      	bpl.n	8002040 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002028:	f06f 0202 	mvn.w	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800202e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002030:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002032:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002034:	079b      	lsls	r3, r3, #30
 8002036:	d077      	beq.n	8002128 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002038:	f7ff ffea 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203c:	2300      	movs	r3, #0
 800203e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	0750      	lsls	r0, r2, #29
 8002046:	d510      	bpl.n	800206a <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	0751      	lsls	r1, r2, #29
 800204c:	d50d      	bpl.n	800206a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800204e:	f06f 0204 	mvn.w	r2, #4
 8002052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002054:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002056:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002058:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800205a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002060:	d068      	beq.n	8002134 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	f7ff ffd5 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	2300      	movs	r3, #0
 8002068:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	0712      	lsls	r2, r2, #28
 8002070:	d50f      	bpl.n	8002092 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	0710      	lsls	r0, r2, #28
 8002076:	d50c      	bpl.n	8002092 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002078:	f06f 0208 	mvn.w	r2, #8
 800207c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002080:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002082:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002084:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002088:	d05a      	beq.n	8002140 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	f7ff ffc1 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	2300      	movs	r3, #0
 8002090:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	06d2      	lsls	r2, r2, #27
 8002098:	d510      	bpl.n	80020bc <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	06d0      	lsls	r0, r2, #27
 800209e:	d50d      	bpl.n	80020bc <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a0:	f06f 0210 	mvn.w	r2, #16
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a6:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ac:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80020b0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b2:	d04b      	beq.n	800214c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020b4:	f7ff ffac 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	2300      	movs	r3, #0
 80020ba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	07d1      	lsls	r1, r2, #31
 80020c2:	d508      	bpl.n	80020d6 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	07d2      	lsls	r2, r2, #31
 80020c8:	d505      	bpl.n	80020d6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d2:	f001 fd41 	bl	8003b58 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	0610      	lsls	r0, r2, #24
 80020dc:	d508      	bpl.n	80020f0 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	0611      	lsls	r1, r2, #24
 80020e2:	d505      	bpl.n	80020f0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80020e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020ec:	f000 fa45 	bl	800257a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	0652      	lsls	r2, r2, #25
 80020f6:	d508      	bpl.n	800210a <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	0650      	lsls	r0, r2, #25
 80020fc:	d505      	bpl.n	800210a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002102:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002104:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002106:	f7ff ff85 	bl	8002014 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	0691      	lsls	r1, r2, #26
 8002110:	d522      	bpl.n	8002158 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	0692      	lsls	r2, r2, #26
 8002116:	d51f      	bpl.n	8002158 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002118:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800211c:	4620      	mov	r0, r4
}
 800211e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002122:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002124:	f000 ba28 	b.w	8002578 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002128:	f7ff ff71 	bl	800200e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff ff70 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
 8002132:	e783      	b.n	800203c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002134:	f7ff ff6b 	bl	800200e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ff6a 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
 800213e:	e792      	b.n	8002066 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002140:	f7ff ff65 	bl	800200e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ff64 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
 800214a:	e7a0      	b.n	800208e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214c:	f7ff ff5f 	bl	800200e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff ff5e 	bl	8002012 <HAL_TIM_PWM_PulseFinishedCallback>
 8002156:	e7af      	b.n	80020b8 <HAL_TIM_IRQHandler+0xa2>
 8002158:	bd10      	pop	{r4, pc}
	...

0800215c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800215e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	4290      	cmp	r0, r2
 8002162:	d00a      	beq.n	800217a <TIM_Base_SetConfig+0x1e>
 8002164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002168:	d007      	beq.n	800217a <TIM_Base_SetConfig+0x1e>
 800216a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800216e:	4290      	cmp	r0, r2
 8002170:	d003      	beq.n	800217a <TIM_Base_SetConfig+0x1e>
 8002172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002176:	4290      	cmp	r0, r2
 8002178:	d115      	bne.n	80021a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800217a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002180:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002182:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <TIM_Base_SetConfig+0x6c>)
 8002184:	4290      	cmp	r0, r2
 8002186:	d00a      	beq.n	800219e <TIM_Base_SetConfig+0x42>
 8002188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800218c:	d007      	beq.n	800219e <TIM_Base_SetConfig+0x42>
 800218e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002192:	4290      	cmp	r0, r2
 8002194:	d003      	beq.n	800219e <TIM_Base_SetConfig+0x42>
 8002196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800219a:	4290      	cmp	r0, r2
 800219c:	d103      	bne.n	80021a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a6:	694a      	ldr	r2, [r1, #20]
 80021a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80021ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b0:	688b      	ldr	r3, [r1, #8]
 80021b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021b4:	680b      	ldr	r3, [r1, #0]
 80021b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <TIM_Base_SetConfig+0x6c>)
 80021ba:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80021bc:	bf04      	itt	eq
 80021be:	690b      	ldreq	r3, [r1, #16]
 80021c0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80021c2:	2301      	movs	r3, #1
 80021c4:	6143      	str	r3, [r0, #20]
 80021c6:	4770      	bx	lr
 80021c8:	40012c00 	.word	0x40012c00

080021cc <HAL_TIM_Base_Init>:
{
 80021cc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80021ce:	4604      	mov	r4, r0
 80021d0:	b1a0      	cbz	r0, 80021fc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80021d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021da:	b91b      	cbnz	r3, 80021e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80021dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021e0:	f002 f81c 	bl	800421c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ec:	1d21      	adds	r1, r4, #4
 80021ee:	f7ff ffb5 	bl	800215c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80021f2:	2301      	movs	r3, #1
  return HAL_OK;
 80021f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80021f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80021fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021fc:	2001      	movs	r0, #1
}
 80021fe:	bd10      	pop	{r4, pc}

08002200 <HAL_TIM_PWM_Init>:
{
 8002200:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002202:	4604      	mov	r4, r0
 8002204:	b1a0      	cbz	r0, 8002230 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800220a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800220e:	b91b      	cbnz	r3, 8002218 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002210:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002214:	f7ff fefa 	bl	800200c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002220:	1d21      	adds	r1, r4, #4
 8002222:	f7ff ff9b 	bl	800215c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002226:	2301      	movs	r3, #1
  return HAL_OK;
 8002228:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800222a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800222e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
}
 8002232:	bd10      	pop	{r4, pc}

08002234 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002234:	6a03      	ldr	r3, [r0, #32]
{
 8002236:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002238:	f023 0310 	bic.w	r3, r3, #16
 800223c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800223e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002240:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002242:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002244:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002246:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800224a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800224e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002250:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002254:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002258:	4d0b      	ldr	r5, [pc, #44]	; (8002288 <TIM_OC2_SetConfig+0x54>)
 800225a:	42a8      	cmp	r0, r5
 800225c:	d10d      	bne.n	800227a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800225e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002264:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002268:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800226a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800226c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002270:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002276:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800227a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800227c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800227e:	684a      	ldr	r2, [r1, #4]
 8002280:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002282:	6203      	str	r3, [r0, #32]
 8002284:	bd70      	pop	{r4, r5, r6, pc}
 8002286:	bf00      	nop
 8002288:	40012c00 	.word	0x40012c00

0800228c <HAL_TIM_PWM_ConfigChannel>:
{
 800228c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800228e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002292:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002294:	2b01      	cmp	r3, #1
 8002296:	f04f 0002 	mov.w	r0, #2
 800229a:	d025      	beq.n	80022e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800229c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800229e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80022a6:	2a0c      	cmp	r2, #12
 80022a8:	d818      	bhi.n	80022dc <HAL_TIM_PWM_ConfigChannel+0x50>
 80022aa:	e8df f002 	tbb	[pc, r2]
 80022ae:	1707      	.short	0x1707
 80022b0:	171e1717 	.word	0x171e1717
 80022b4:	172f1717 	.word	0x172f1717
 80022b8:	1717      	.short	0x1717
 80022ba:	40          	.byte	0x40
 80022bb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022bc:	6820      	ldr	r0, [r4, #0]
 80022be:	f7ff fe31 	bl	8001f24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022c4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	f042 0208 	orr.w	r2, r2, #8
 80022cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	f022 0204 	bic.w	r2, r2, #4
 80022d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022da:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80022de:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80022e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	f7ff ffa2 	bl	8002234 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800230a:	e7e6      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800230c:	6820      	ldr	r0, [r4, #0]
 800230e:	f7ff fe31 	bl	8001f74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002312:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002314:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	f042 0208 	orr.w	r2, r2, #8
 800231c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	f022 0204 	bic.w	r2, r2, #4
 8002324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800232a:	61da      	str	r2, [r3, #28]
      break;
 800232c:	e7d6      	b.n	80022dc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800232e:	6820      	ldr	r0, [r4, #0]
 8002330:	f7ff fe4a 	bl	8001fc8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002334:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002336:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002346:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800234e:	e7ec      	b.n	800232a <HAL_TIM_PWM_ConfigChannel+0x9e>

08002350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002350:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002352:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002354:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002356:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800235a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800235e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002360:	6083      	str	r3, [r0, #8]
 8002362:	bd10      	pop	{r4, pc}

08002364 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002364:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002368:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800236a:	2b01      	cmp	r3, #1
{
 800236c:	4604      	mov	r4, r0
 800236e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002372:	d019      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x44>
 8002374:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002376:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800237a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800237c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002380:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800238a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800238c:	680b      	ldr	r3, [r1, #0]
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d065      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xfa>
 8002392:	d815      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x5c>
 8002394:	2b10      	cmp	r3, #16
 8002396:	d00c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x4e>
 8002398:	d807      	bhi.n	80023aa <HAL_TIM_ConfigClockSource+0x46>
 800239a:	b153      	cbz	r3, 80023b2 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800239c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800239e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d001      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x4e>
 80023ae:	2b30      	cmp	r3, #48	; 0x30
 80023b0:	d1f4      	bne.n	800239c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80023b2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023b4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023bc:	4313      	orrs	r3, r2
 80023be:	e01a      	b.n	80023f6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d034      	beq.n	800242e <HAL_TIM_ConfigClockSource+0xca>
 80023c4:	d819      	bhi.n	80023fa <HAL_TIM_ConfigClockSource+0x96>
 80023c6:	2b50      	cmp	r3, #80	; 0x50
 80023c8:	d1e8      	bne.n	800239c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ca:	684a      	ldr	r2, [r1, #4]
 80023cc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023ce:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d6:	f025 0501 	bic.w	r5, r5, #1
 80023da:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023dc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80023de:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023e4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80023e8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023ea:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80023ec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80023f6:	6083      	str	r3, [r0, #8]
 80023f8:	e7d0      	b.n	800239c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80023fa:	2b70      	cmp	r3, #112	; 0x70
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xb4>
 80023fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002402:	d1cb      	bne.n	800239c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002404:	68cb      	ldr	r3, [r1, #12]
 8002406:	684a      	ldr	r2, [r1, #4]
 8002408:	6889      	ldr	r1, [r1, #8]
 800240a:	f7ff ffa1 	bl	8002350 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240e:	6822      	ldr	r2, [r4, #0]
 8002410:	6893      	ldr	r3, [r2, #8]
 8002412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002416:	e008      	b.n	800242a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002418:	68cb      	ldr	r3, [r1, #12]
 800241a:	684a      	ldr	r2, [r1, #4]
 800241c:	6889      	ldr	r1, [r1, #8]
 800241e:	f7ff ff97 	bl	8002350 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002426:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800242a:	6093      	str	r3, [r2, #8]
      break;
 800242c:	e7b6      	b.n	800239c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800242e:	684d      	ldr	r5, [r1, #4]
 8002430:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002432:	6a01      	ldr	r1, [r0, #32]
 8002434:	f021 0110 	bic.w	r1, r1, #16
 8002438:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800243c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800243e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002446:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800244a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800244e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002450:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002452:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002458:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800245c:	e7cb      	b.n	80023f6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	684a      	ldr	r2, [r1, #4]
 8002460:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002462:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002464:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002466:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246a:	f025 0501 	bic.w	r5, r5, #1
 800246e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002470:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002472:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002478:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800247c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800247e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002480:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002486:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800248a:	e7b4      	b.n	80023f6 <HAL_TIM_ConfigClockSource+0x92>

0800248c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800248c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800248e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002490:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002492:	f001 011f 	and.w	r1, r1, #31
 8002496:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002498:	ea23 0304 	bic.w	r3, r3, r4
 800249c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800249e:	6a03      	ldr	r3, [r0, #32]
 80024a0:	408a      	lsls	r2, r1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6202      	str	r2, [r0, #32]
 80024a6:	bd10      	pop	{r4, pc}

080024a8 <HAL_TIM_PWM_Start>:
{
 80024a8:	b510      	push	{r4, lr}
 80024aa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024ac:	2201      	movs	r2, #1
 80024ae:	6800      	ldr	r0, [r0, #0]
 80024b0:	f7ff ffec 	bl	800248c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_TIM_PWM_Start+0x34>)
}
 80024b8:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ba:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80024bc:	bf02      	ittt	eq
 80024be:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80024c0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80024c4:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024cc:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80024ce:	bf1e      	ittt	ne
 80024d0:	681a      	ldrne	r2, [r3, #0]
 80024d2:	f042 0201 	orrne.w	r2, r2, #1
 80024d6:	601a      	strne	r2, [r3, #0]
}
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <HAL_TIM_PWM_Stop>:
{
 80024e0:	b510      	push	{r4, lr}
 80024e2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024e4:	2200      	movs	r2, #0
 80024e6:	6800      	ldr	r0, [r0, #0]
 80024e8:	f7ff ffd0 	bl	800248c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_TIM_PWM_Stop+0x58>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10d      	bne.n	8002510 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80024f4:	f241 1211 	movw	r2, #4369	; 0x1111
 80024f8:	6a19      	ldr	r1, [r3, #32]
 80024fa:	4211      	tst	r1, r2
 80024fc:	d108      	bne.n	8002510 <HAL_TIM_PWM_Stop+0x30>
 80024fe:	f240 4244 	movw	r2, #1092	; 0x444
 8002502:	6a19      	ldr	r1, [r3, #32]
 8002504:	4211      	tst	r1, r2
 8002506:	bf02      	ittt	eq
 8002508:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800250a:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800250e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002510:	f241 1211 	movw	r2, #4369	; 0x1111
 8002514:	6a19      	ldr	r1, [r3, #32]
 8002516:	4211      	tst	r1, r2
 8002518:	d108      	bne.n	800252c <HAL_TIM_PWM_Stop+0x4c>
 800251a:	f240 4244 	movw	r2, #1092	; 0x444
 800251e:	6a19      	ldr	r1, [r3, #32]
 8002520:	4211      	tst	r1, r2
 8002522:	bf02      	ittt	eq
 8002524:	681a      	ldreq	r2, [r3, #0]
 8002526:	f022 0201 	biceq.w	r2, r2, #1
 800252a:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800252c:	2301      	movs	r3, #1
}
 800252e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002530:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002534:	bd10      	pop	{r4, pc}
 8002536:	bf00      	nop
 8002538:	40012c00 	.word	0x40012c00

0800253c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800253c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002540:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002542:	2b01      	cmp	r3, #1
 8002544:	f04f 0302 	mov.w	r3, #2
 8002548:	d014      	beq.n	8002574 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800254a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002550:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002552:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002554:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002556:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002558:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800255c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002560:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002562:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002564:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002566:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002568:	2301      	movs	r3, #1
 800256a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800256e:	2300      	movs	r3, #0
 8002570:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002574:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002576:	bd30      	pop	{r4, r5, pc}

08002578 <HAL_TIMEx_CommutCallback>:
 8002578:	4770      	bx	lr

0800257a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800257a:	4770      	bx	lr

0800257c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800257c:	b084      	sub	sp, #16
 800257e:	a801      	add	r0, sp, #4
 8002580:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002584:	b004      	add	sp, #16
 8002586:	2000      	movs	r0, #0
 8002588:	4770      	bx	lr

0800258a <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800258a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800258e:	b29b      	uxth	r3, r3
 8002590:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002594:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002598:	2000      	movs	r0, #0
 800259a:	4770      	bx	lr

0800259c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800259c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80025a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025a4:	045b      	lsls	r3, r3, #17
 80025a6:	0c5b      	lsrs	r3, r3, #17
 80025a8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80025ac:	2000      	movs	r0, #0
 80025ae:	4770      	bx	lr

080025b0 <USB_SetCurrentMode>:
 80025b0:	2000      	movs	r0, #0
 80025b2:	4770      	bx	lr

080025b4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80025b4:	b084      	sub	sp, #16
 80025b6:	b510      	push	{r4, lr}
 80025b8:	ac03      	add	r4, sp, #12
 80025ba:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80025be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 80025c2:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80025ca:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80025ce:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80025d2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80025d6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80025da:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80025e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80025e6:	4610      	mov	r0, r2
 80025e8:	4770      	bx	lr
	...

080025ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80025ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80025ee:	780d      	ldrb	r5, [r1, #0]
{
 80025f0:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80025f2:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80025f6:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80025f8:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80025fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002600:	0412      	lsls	r2, r2, #16
 8002602:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8002604:	2803      	cmp	r0, #3
 8002606:	d84e      	bhi.n	80026a6 <USB_ActivateEndpoint+0xba>
 8002608:	e8df f000 	tbb	[pc, r0]
 800260c:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002614:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002616:	f248 0480 	movw	r4, #32896	; 0x8080
 800261a:	4322      	orrs	r2, r4
 800261c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002620:	780e      	ldrb	r6, [r1, #0]
 8002622:	4dab      	ldr	r5, [pc, #684]	; (80028d0 <USB_ActivateEndpoint+0x2e4>)
 8002624:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8002628:	4334      	orrs	r4, r6
 800262a:	b292      	uxth	r2, r2
 800262c:	402a      	ands	r2, r5
 800262e:	4322      	orrs	r2, r4
 8002630:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002634:	7b0c      	ldrb	r4, [r1, #12]
 8002636:	780a      	ldrb	r2, [r1, #0]
 8002638:	2c00      	cmp	r4, #0
 800263a:	f040 8088 	bne.w	800274e <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 800263e:	784e      	ldrb	r6, [r1, #1]
 8002640:	88cc      	ldrh	r4, [r1, #6]
 8002642:	b396      	cbz	r6, 80026aa <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002644:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002648:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800264c:	f024 0401 	bic.w	r4, r4, #1
 8002650:	b2b6      	uxth	r6, r6
 8002652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002656:	b2a4      	uxth	r4, r4
 8002658:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800265a:	780c      	ldrb	r4, [r1, #0]
 800265c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002660:	0656      	lsls	r6, r2, #25
 8002662:	d509      	bpl.n	8002678 <USB_ActivateEndpoint+0x8c>
 8002664:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002668:	b292      	uxth	r2, r2
 800266a:	402a      	ands	r2, r5
 800266c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002670:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002674:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002678:	78ca      	ldrb	r2, [r1, #3]
 800267a:	7809      	ldrb	r1, [r1, #0]
 800267c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800267e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002682:	4c94      	ldr	r4, [pc, #592]	; (80028d4 <USB_ActivateEndpoint+0x2e8>)
 8002684:	b292      	uxth	r2, r2
 8002686:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800268a:	d001      	beq.n	8002690 <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800268c:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002694:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002698:	e0cb      	b.n	8002832 <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 800269a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800269e:	e7b9      	b.n	8002614 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80026a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026a4:	e7b6      	b.n	8002614 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80026a6:	2001      	movs	r0, #1
 80026a8:	e7b5      	b.n	8002616 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80026aa:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80026ae:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80026b2:	f024 0401 	bic.w	r4, r4, #1
 80026b6:	b2ad      	uxth	r5, r5
 80026b8:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80026bc:	b2a4      	uxth	r4, r4
 80026be:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80026c0:	780a      	ldrb	r2, [r1, #0]
 80026c2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80026c6:	690d      	ldr	r5, [r1, #16]
 80026c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80026cc:	b2b6      	uxth	r6, r6
 80026ce:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80026d2:	bb5d      	cbnz	r5, 800272c <USB_ActivateEndpoint+0x140>
 80026d4:	5b94      	ldrh	r4, [r2, r6]
 80026d6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80026da:	0424      	lsls	r4, r4, #16
 80026dc:	0c24      	lsrs	r4, r4, #16
 80026de:	5394      	strh	r4, [r2, r6]
 80026e0:	5b94      	ldrh	r4, [r2, r6]
 80026e2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80026e6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80026ea:	b2a4      	uxth	r4, r4
 80026ec:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026ee:	780c      	ldrb	r4, [r1, #0]
 80026f0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026f4:	0455      	lsls	r5, r2, #17
 80026f6:	d50d      	bpl.n	8002714 <USB_ActivateEndpoint+0x128>
 80026f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002700:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002704:	0412      	lsls	r2, r2, #16
 8002706:	0c12      	lsrs	r2, r2, #16
 8002708:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800270c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002710:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002714:	7809      	ldrb	r1, [r1, #0]
 8002716:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800271a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800271e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002722:	0412      	lsls	r2, r2, #16
 8002724:	0c12      	lsrs	r2, r2, #16
 8002726:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800272a:	e7b1      	b.n	8002690 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800272c:	2d3e      	cmp	r5, #62	; 0x3e
 800272e:	d805      	bhi.n	800273c <USB_ActivateEndpoint+0x150>
 8002730:	086c      	lsrs	r4, r5, #1
 8002732:	07ed      	lsls	r5, r5, #31
 8002734:	bf48      	it	mi
 8002736:	3401      	addmi	r4, #1
 8002738:	02a4      	lsls	r4, r4, #10
 800273a:	e7d6      	b.n	80026ea <USB_ActivateEndpoint+0xfe>
 800273c:	096f      	lsrs	r7, r5, #5
 800273e:	06ec      	lsls	r4, r5, #27
 8002740:	4c65      	ldr	r4, [pc, #404]	; (80028d8 <USB_ActivateEndpoint+0x2ec>)
 8002742:	bf08      	it	eq
 8002744:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002748:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 800274c:	e7cd      	b.n	80026ea <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800274e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002752:	b2a4      	uxth	r4, r4
 8002754:	402c      	ands	r4, r5
 8002756:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800275a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800275e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002762:	780a      	ldrb	r2, [r1, #0]
 8002764:	890c      	ldrh	r4, [r1, #8]
 8002766:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800276a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800276e:	f024 0401 	bic.w	r4, r4, #1
 8002772:	b2b6      	uxth	r6, r6
 8002774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002778:	b2a4      	uxth	r4, r4
 800277a:	5394      	strh	r4, [r2, r6]
 800277c:	780a      	ldrb	r2, [r1, #0]
 800277e:	894c      	ldrh	r4, [r1, #10]
 8002780:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002784:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002788:	f024 0401 	bic.w	r4, r4, #1
 800278c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002790:	b2a4      	uxth	r4, r4
 8002792:	b2b6      	uxth	r6, r6
 8002794:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8002796:	784a      	ldrb	r2, [r1, #1]
 8002798:	780c      	ldrb	r4, [r1, #0]
 800279a:	2a00      	cmp	r2, #0
 800279c:	d14c      	bne.n	8002838 <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800279e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027a2:	0452      	lsls	r2, r2, #17
 80027a4:	d509      	bpl.n	80027ba <USB_ActivateEndpoint+0x1ce>
 80027a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027aa:	b292      	uxth	r2, r2
 80027ac:	402a      	ands	r2, r5
 80027ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80027b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027ba:	780c      	ldrb	r4, [r1, #0]
 80027bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027c0:	0657      	lsls	r7, r2, #25
 80027c2:	d50d      	bpl.n	80027e0 <USB_ActivateEndpoint+0x1f4>
 80027c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027d0:	0412      	lsls	r2, r2, #16
 80027d2:	0c12      	lsrs	r2, r2, #16
 80027d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80027e0:	780c      	ldrb	r4, [r1, #0]
 80027e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027e6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027ee:	0412      	lsls	r2, r2, #16
 80027f0:	0c12      	lsrs	r2, r2, #16
 80027f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027fa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027fe:	f248 0480 	movw	r4, #32896	; 0x8080
 8002802:	780d      	ldrb	r5, [r1, #0]
 8002804:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800280c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002810:	0412      	lsls	r2, r2, #16
 8002812:	0c12      	lsrs	r2, r2, #16
 8002814:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002818:	4322      	orrs	r2, r4
 800281a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800281e:	7809      	ldrb	r1, [r1, #0]
 8002820:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002824:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800282c:	0412      	lsls	r2, r2, #16
 800282e:	0c12      	lsrs	r2, r2, #16
 8002830:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002832:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002838:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800283c:	0456      	lsls	r6, r2, #17
 800283e:	d509      	bpl.n	8002854 <USB_ActivateEndpoint+0x268>
 8002840:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002844:	b292      	uxth	r2, r2
 8002846:	402a      	ands	r2, r5
 8002848:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800284c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002850:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002854:	780c      	ldrb	r4, [r1, #0]
 8002856:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800285a:	0652      	lsls	r2, r2, #25
 800285c:	d50d      	bpl.n	800287a <USB_ActivateEndpoint+0x28e>
 800285e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002862:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002866:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800286a:	0412      	lsls	r2, r2, #16
 800286c:	0c12      	lsrs	r2, r2, #16
 800286e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002872:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002876:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800287a:	780c      	ldrb	r4, [r1, #0]
 800287c:	4d15      	ldr	r5, [pc, #84]	; (80028d4 <USB_ActivateEndpoint+0x2e8>)
 800287e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002882:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002886:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800288a:	0412      	lsls	r2, r2, #16
 800288c:	0c12      	lsrs	r2, r2, #16
 800288e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002896:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800289a:	78ca      	ldrb	r2, [r1, #3]
 800289c:	780c      	ldrb	r4, [r1, #0]
 800289e:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80028a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028a4:	b292      	uxth	r2, r2
 80028a6:	ea02 0205 	and.w	r2, r2, r5
 80028aa:	bf18      	it	ne
 80028ac:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028b8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028bc:	7809      	ldrb	r1, [r1, #0]
 80028be:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80028c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028ca:	0412      	lsls	r2, r2, #16
 80028cc:	0c12      	lsrs	r2, r2, #16
 80028ce:	e6df      	b.n	8002690 <USB_ActivateEndpoint+0xa4>
 80028d0:	ffff8f8f 	.word	0xffff8f8f
 80028d4:	ffff8fbf 	.word	0xffff8fbf
 80028d8:	ffff8000 	.word	0xffff8000

080028dc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028dc:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80028de:	7b0c      	ldrb	r4, [r1, #12]
 80028e0:	784b      	ldrb	r3, [r1, #1]
 80028e2:	780a      	ldrb	r2, [r1, #0]
 80028e4:	2c00      	cmp	r4, #0
 80028e6:	d13d      	bne.n	8002964 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 80028e8:	b313      	cbz	r3, 8002930 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028ee:	065c      	lsls	r4, r3, #25
 80028f0:	d50d      	bpl.n	800290e <USB_DeactivateEndpoint+0x32>
 80028f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800290a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800290e:	780a      	ldrb	r2, [r1, #0]
 8002910:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002928:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800292c:	2000      	movs	r0, #0
 800292e:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002930:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002934:	045b      	lsls	r3, r3, #17
 8002936:	d50d      	bpl.n	8002954 <USB_DeactivateEndpoint+0x78>
 8002938:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800293c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002950:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002954:	780a      	ldrb	r2, [r1, #0]
 8002956:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800295a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	e7db      	b.n	800291c <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 8002964:	2b00      	cmp	r3, #0
 8002966:	d14e      	bne.n	8002a06 <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002968:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800296c:	045c      	lsls	r4, r3, #17
 800296e:	d50d      	bpl.n	800298c <USB_DeactivateEndpoint+0xb0>
 8002970:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	0c1b      	lsrs	r3, r3, #16
 8002980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800298c:	780a      	ldrb	r2, [r1, #0]
 800298e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002992:	065b      	lsls	r3, r3, #25
 8002994:	d50d      	bpl.n	80029b2 <USB_DeactivateEndpoint+0xd6>
 8002996:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800299a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80029b2:	780a      	ldrb	r2, [r1, #0]
 80029b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029d0:	f248 0280 	movw	r2, #32896	; 0x8080
 80029d4:	780c      	ldrb	r4, [r1, #0]
 80029d6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80029da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029ec:	7809      	ldrb	r1, [r1, #0]
 80029ee:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80029f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002a04:	e792      	b.n	800292c <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a0a:	045c      	lsls	r4, r3, #17
 8002a0c:	d50d      	bpl.n	8002a2a <USB_DeactivateEndpoint+0x14e>
 8002a0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	041b      	lsls	r3, r3, #16
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a2a:	780a      	ldrb	r2, [r1, #0]
 8002a2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a30:	065b      	lsls	r3, r3, #25
 8002a32:	d50d      	bpl.n	8002a50 <USB_DeactivateEndpoint+0x174>
 8002a34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002a50:	780a      	ldrb	r2, [r1, #0]
 8002a52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a6e:	f248 0280 	movw	r2, #32896	; 0x8080
 8002a72:	780c      	ldrb	r4, [r1, #0]
 8002a74:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a8a:	7809      	ldrb	r1, [r1, #0]
 8002a8c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a98:	e7af      	b.n	80029fa <USB_DeactivateEndpoint+0x11e>

08002a9a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002a9a:	784b      	ldrb	r3, [r1, #1]
 8002a9c:	780a      	ldrb	r2, [r1, #0]
 8002a9e:	b18b      	cbz	r3, 8002ac4 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002aa0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002ac4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ad8:	e7ec      	b.n	8002ab4 <USB_EPSetStall+0x1a>

08002ada <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002ada:	7b0b      	ldrb	r3, [r1, #12]
 8002adc:	bb43      	cbnz	r3, 8002b30 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8002ade:	784b      	ldrb	r3, [r1, #1]
 8002ae0:	780a      	ldrb	r2, [r1, #0]
 8002ae2:	b33b      	cbz	r3, 8002b34 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ae4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ae8:	065b      	lsls	r3, r3, #25
 8002aea:	d50d      	bpl.n	8002b08 <USB_EPClearStall+0x2e>
 8002aec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002b08:	78cb      	ldrb	r3, [r1, #3]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d010      	beq.n	8002b30 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b0e:	780a      	ldrb	r2, [r1, #0]
 8002b10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002b30:	2000      	movs	r0, #0
 8002b32:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b38:	045b      	lsls	r3, r3, #17
 8002b3a:	d50d      	bpl.n	8002b58 <USB_EPClearStall+0x7e>
 8002b3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	0c1b      	lsrs	r3, r3, #16
 8002b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b58:	780a      	ldrb	r2, [r1, #0]
 8002b5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b6e:	e7d9      	b.n	8002b24 <USB_EPClearStall+0x4a>

08002b70 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002b70:	b911      	cbnz	r1, 8002b78 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002b78:	2000      	movs	r0, #0
 8002b7a:	4770      	bx	lr

08002b7c <USB_DevConnect>:
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	4770      	bx	lr

08002b80 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002b80:	2000      	movs	r0, #0
 8002b82:	4770      	bx	lr

08002b84 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002b84:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002b88:	b280      	uxth	r0, r0
 8002b8a:	4770      	bx	lr

08002b8c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	4770      	bx	lr

08002b90 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b90:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002b94:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d100      	bne.n	8002ba6 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002ba4:	4770      	bx	lr
 8002ba6:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8002baa:	f822 0b04 	strh.w	r0, [r2], #4
 8002bae:	e7f7      	b.n	8002ba0 <USB_WritePMA+0x10>

08002bb0 <USB_EPStartXfer>:
{
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8002bb4:	7849      	ldrb	r1, [r1, #1]
{
 8002bb6:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002bb8:	2901      	cmp	r1, #1
 8002bba:	69aa      	ldr	r2, [r5, #24]
 8002bbc:	692b      	ldr	r3, [r5, #16]
 8002bbe:	7b28      	ldrb	r0, [r5, #12]
 8002bc0:	d166      	bne.n	8002c90 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002bc2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002bc4:	bf9d      	ittte	ls
 8002bc6:	2300      	movls	r3, #0
 8002bc8:	61ab      	strls	r3, [r5, #24]
 8002bca:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8002bcc:	1ad2      	subhi	r2, r2, r3
 8002bce:	bf88      	it	hi
 8002bd0:	61aa      	strhi	r2, [r5, #24]
 8002bd2:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8002bd4:	bb08      	cbnz	r0, 8002c1a <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002bd6:	4633      	mov	r3, r6
 8002bd8:	88ea      	ldrh	r2, [r5, #6]
 8002bda:	6969      	ldr	r1, [r5, #20]
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff ffd7 	bl	8002b90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002be2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002be6:	782a      	ldrb	r2, [r5, #0]
 8002be8:	b299      	uxth	r1, r3
 8002bea:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	440b      	add	r3, r1
 8002bf2:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002bf4:	782a      	ldrb	r2, [r5, #0]
 8002bf6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c12:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002c16:	2000      	movs	r0, #0
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c1a:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c1c:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c1e:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c28:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002c2c:	b291      	uxth	r1, r2
 8002c2e:	bf15      	itete	ne
 8002c30:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c34:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c38:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c3a:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c3c:	bf15      	itete	ne
 8002c3e:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c40:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8002c42:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002c44:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c46:	4633      	mov	r3, r6
 8002c48:	6969      	ldr	r1, [r5, #20]
 8002c4a:	f7ff ffa1 	bl	8002b90 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c4e:	786b      	ldrb	r3, [r5, #1]
 8002c50:	782a      	ldrb	r2, [r5, #0]
 8002c52:	b973      	cbnz	r3, 8002c72 <USB_EPStartXfer+0xc2>
 8002c54:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c6c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002c70:	e7c0      	b.n	8002bf4 <USB_EPStartXfer+0x44>
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d1be      	bne.n	8002bf4 <USB_EPStartXfer+0x44>
 8002c76:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8e:	e7ed      	b.n	8002c6c <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 8002c90:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002c92:	bf93      	iteet	ls
 8002c94:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002c96:	1ad2      	subhi	r2, r2, r3
 8002c98:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8002c9a:	61ab      	strls	r3, [r5, #24]
 8002c9c:	bf98      	it	ls
 8002c9e:	4613      	movls	r3, r2
 8002ca0:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8002ca2:	b9b0      	cbnz	r0, 8002cd2 <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002ca4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	b281      	uxth	r1, r0
 8002cac:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8002cb0:	4408      	add	r0, r1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d144      	bne.n	8002d40 <USB_EPStartXfer+0x190>
 8002cb6:	5a83      	ldrh	r3, [r0, r2]
 8002cb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	5283      	strh	r3, [r0, r2]
 8002cc2:	5a83      	ldrh	r3, [r0, r2]
 8002cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	5283      	strh	r3, [r0, r2]
 8002cd0:	e03f      	b.n	8002d52 <USB_EPStartXfer+0x1a2>
 8002cd2:	b9a1      	cbnz	r1, 8002cfe <USB_EPStartXfer+0x14e>
 8002cd4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b281      	uxth	r1, r0
 8002cdc:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8002ce0:	4408      	add	r0, r1
 8002ce2:	b9e3      	cbnz	r3, 8002d1e <USB_EPStartXfer+0x16e>
 8002ce4:	5a81      	ldrh	r1, [r0, r2]
 8002ce6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002cea:	0409      	lsls	r1, r1, #16
 8002cec:	0c09      	lsrs	r1, r1, #16
 8002cee:	5281      	strh	r1, [r0, r2]
 8002cf0:	5a81      	ldrh	r1, [r0, r2]
 8002cf2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002cf6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002cfa:	b289      	uxth	r1, r1
 8002cfc:	5281      	strh	r1, [r0, r2]
 8002cfe:	7869      	ldrb	r1, [r5, #1]
 8002d00:	782a      	ldrb	r2, [r5, #0]
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d0ce      	beq.n	8002ca4 <USB_EPStartXfer+0xf4>
 8002d06:	2901      	cmp	r1, #1
 8002d08:	d123      	bne.n	8002d52 <USB_EPStartXfer+0x1a2>
 8002d0a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b288      	uxth	r0, r1
 8002d12:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002d16:	4401      	add	r1, r0
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	528b      	strh	r3, [r1, r2]
 8002d1c:	e019      	b.n	8002d52 <USB_EPStartXfer+0x1a2>
 8002d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d20:	d805      	bhi.n	8002d2e <USB_EPStartXfer+0x17e>
 8002d22:	0859      	lsrs	r1, r3, #1
 8002d24:	07de      	lsls	r6, r3, #31
 8002d26:	bf48      	it	mi
 8002d28:	3101      	addmi	r1, #1
 8002d2a:	0289      	lsls	r1, r1, #10
 8002d2c:	e7e5      	b.n	8002cfa <USB_EPStartXfer+0x14a>
 8002d2e:	095e      	lsrs	r6, r3, #5
 8002d30:	06d9      	lsls	r1, r3, #27
 8002d32:	4912      	ldr	r1, [pc, #72]	; (8002d7c <USB_EPStartXfer+0x1cc>)
 8002d34:	bf08      	it	eq
 8002d36:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002d3a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002d3e:	e7dc      	b.n	8002cfa <USB_EPStartXfer+0x14a>
 8002d40:	2b3e      	cmp	r3, #62	; 0x3e
 8002d42:	d812      	bhi.n	8002d6a <USB_EPStartXfer+0x1ba>
 8002d44:	0859      	lsrs	r1, r3, #1
 8002d46:	07de      	lsls	r6, r3, #31
 8002d48:	bf48      	it	mi
 8002d4a:	3101      	addmi	r1, #1
 8002d4c:	0289      	lsls	r1, r1, #10
 8002d4e:	b289      	uxth	r1, r1
 8002d50:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d52:	782a      	ldrb	r2, [r5, #0]
 8002d54:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d68:	e74f      	b.n	8002c0a <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002d6a:	0959      	lsrs	r1, r3, #5
 8002d6c:	06db      	lsls	r3, r3, #27
 8002d6e:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <USB_EPStartXfer+0x1cc>)
 8002d70:	bf08      	it	eq
 8002d72:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002d76:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002d7a:	e7a7      	b.n	8002ccc <USB_EPStartXfer+0x11c>
 8002d7c:	ffff8000 	.word	0xffff8000

08002d80 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d80:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002d8a:	085d      	lsrs	r5, r3, #1
 8002d8c:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d8e:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8002d90:	462e      	mov	r6, r5
 8002d92:	3002      	adds	r0, #2
 8002d94:	b936      	cbnz	r6, 8002da4 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002d96:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002d98:	bf44      	itt	mi
 8002d9a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002d9e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8002da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002da4:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8002da8:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002daa:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002dac:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002db0:	0a24      	lsrs	r4, r4, #8
 8002db2:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002db6:	e7ec      	b.n	8002d92 <USB_ReadPMA+0x12>

08002db8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002db8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8002dbc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002dbe:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002dc2:	b15b      	cbz	r3, 8002ddc <USBD_CDC_EP0_RxReady+0x24>
 8002dc4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002dc8:	28ff      	cmp	r0, #255	; 0xff
 8002dca:	d007      	beq.n	8002ddc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002dd6:	23ff      	movs	r3, #255	; 0xff
 8002dd8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8002ddc:	2000      	movs	r0, #0
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002de0:	2343      	movs	r3, #67	; 0x43
 8002de2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002de4:	4800      	ldr	r0, [pc, #0]	; (8002de8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002de6:	4770      	bx	lr
 8002de8:	20000040 	.word	0x20000040

08002dec <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8002dec:	2343      	movs	r3, #67	; 0x43
 8002dee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002df0:	4800      	ldr	r0, [pc, #0]	; (8002df4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002df2:	4770      	bx	lr
 8002df4:	20000084 	.word	0x20000084

08002df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002df8:	2343      	movs	r3, #67	; 0x43
 8002dfa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002dfc:	4800      	ldr	r0, [pc, #0]	; (8002e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002dfe:	4770      	bx	lr
 8002e00:	200000d4 	.word	0x200000d4

08002e04 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8002e04:	230a      	movs	r3, #10
 8002e06:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002e08:	4800      	ldr	r0, [pc, #0]	; (8002e0c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002e0a:	4770      	bx	lr
 8002e0c:	200000c8 	.word	0x200000c8

08002e10 <USBD_CDC_DataOut>:
{
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e14:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002e18:	f001 fc70 	bl	80046fc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8002e1c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002e20:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8002e24:	b14b      	cbz	r3, 8002e3a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002e26:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8002e2a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002e34:	4798      	blx	r3
    return USBD_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002e3a:	2002      	movs	r0, #2
}
 8002e3c:	bd38      	pop	{r3, r4, r5, pc}

08002e3e <USBD_CDC_DataIn>:
{
 8002e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002e40:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8002e44:	b1ce      	cbz	r6, 8002e7a <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002e46:	2314      	movs	r3, #20
 8002e48:	fb03 0301 	mla	r3, r3, r1, r0
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	b182      	cbz	r2, 8002e72 <USBD_CDC_DataIn+0x34>
 8002e50:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8002e54:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8002e58:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002e5a:	fbb2 f4f5 	udiv	r4, r2, r5
 8002e5e:	fb05 2414 	mls	r4, r5, r4, r2
 8002e62:	b934      	cbnz	r4, 8002e72 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8002e64:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002e66:	4622      	mov	r2, r4
 8002e68:	4623      	mov	r3, r4
 8002e6a:	f001 fc2b 	bl	80046c4 <USBD_LL_Transmit>
    return USBD_OK;
 8002e6e:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002e72:	2000      	movs	r0, #0
 8002e74:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8002e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8002e7a:	2002      	movs	r0, #2
}
 8002e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e7e <USBD_CDC_Setup>:
{
 8002e7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8002e82:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e86:	780a      	ldrb	r2, [r1, #0]
{
 8002e88:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e8a:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8002e8e:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e90:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8002e94:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8002e98:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e9c:	d028      	beq.n	8002ef0 <USBD_CDC_Setup+0x72>
 8002e9e:	2c20      	cmp	r4, #32
 8002ea0:	d147      	bne.n	8002f32 <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8002ea2:	88cc      	ldrh	r4, [r1, #6]
 8002ea4:	784b      	ldrb	r3, [r1, #1]
 8002ea6:	b1e4      	cbz	r4, 8002ee2 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8002ea8:	0612      	lsls	r2, r2, #24
 8002eaa:	d511      	bpl.n	8002ed0 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002eac:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8002eb0:	4639      	mov	r1, r7
 8002eb2:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4622      	mov	r2, r4
 8002eba:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002ebc:	88f2      	ldrh	r2, [r6, #6]
 8002ebe:	4639      	mov	r1, r7
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f000 fc48 	bl	8003756 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002ec6:	4644      	mov	r4, r8
}
 8002ec8:	4620      	mov	r0, r4
 8002eca:	b003      	add	sp, #12
 8002ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8002ed0:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002ed4:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002ed8:	4622      	mov	r2, r4
 8002eda:	4639      	mov	r1, r7
 8002edc:	f000 fc50 	bl	8003780 <USBD_CtlPrepareRx>
 8002ee0:	e7f1      	b.n	8002ec6 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ee2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	6895      	ldr	r5, [r2, #8]
 8002eea:	4622      	mov	r2, r4
 8002eec:	47a8      	blx	r5
 8002eee:	e7eb      	b.n	8002ec8 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8002ef0:	784f      	ldrb	r7, [r1, #1]
 8002ef2:	2f0a      	cmp	r7, #10
 8002ef4:	d00d      	beq.n	8002f12 <USBD_CDC_Setup+0x94>
 8002ef6:	2f0b      	cmp	r7, #11
 8002ef8:	d015      	beq.n	8002f26 <USBD_CDC_Setup+0xa8>
 8002efa:	b9d7      	cbnz	r7, 8002f32 <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002efc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d114      	bne.n	8002f2e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002f04:	2202      	movs	r2, #2
 8002f06:	f10d 0106 	add.w	r1, sp, #6
 8002f0a:	f000 fc24 	bl	8003756 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002f0e:	463c      	mov	r4, r7
 8002f10:	e7da      	b.n	8002ec8 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d109      	bne.n	8002f2e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f10d 0105 	add.w	r1, sp, #5
 8002f20:	f000 fc19 	bl	8003756 <USBD_CtlSendData>
 8002f24:	e7d0      	b.n	8002ec8 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002f26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d0cc      	beq.n	8002ec8 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8002f2e:	4631      	mov	r1, r6
 8002f30:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8002f32:	f000 fbe9 	bl	8003708 <USBD_CtlError>
      ret = USBD_FAIL;
 8002f36:	2402      	movs	r4, #2
      break;
 8002f38:	e7c6      	b.n	8002ec8 <USBD_CDC_Setup+0x4a>

08002f3a <USBD_CDC_DeInit>:
{
 8002f3a:	b538      	push	{r3, r4, r5, lr}
 8002f3c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002f3e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002f40:	2181      	movs	r1, #129	; 0x81
 8002f42:	f001 fb77 	bl	8004634 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002f46:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002f48:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f001 fb72 	bl	8004634 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002f50:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002f54:	2182      	movs	r1, #130	; 0x82
 8002f56:	4620      	mov	r0, r4
 8002f58:	f001 fb6c 	bl	8004634 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002f5c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002f60:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8002f62:	b14b      	cbz	r3, 8002f78 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002f64:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002f6c:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002f70:	f001 fbcc 	bl	800470c <USBD_static_free>
    pdev->pClassData = NULL;
 8002f74:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002f78:	2000      	movs	r0, #0
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}

08002f7c <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f7c:	7c03      	ldrb	r3, [r0, #16]
{
 8002f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f82:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f84:	bbcb      	cbnz	r3, 8002ffa <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f8e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002f90:	f001 fb40 	bl	8004614 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f94:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f98:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f001 fb38 	bl	8004614 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002fa4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002fa8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002faa:	2308      	movs	r3, #8
 8002fac:	2203      	movs	r2, #3
 8002fae:	2182      	movs	r1, #130	; 0x82
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f001 fb2f 	bl	8004614 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002fb6:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002fb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002fbc:	f001 fba2 	bl	8004704 <USBD_static_malloc>
 8002fc0:	4606      	mov	r6, r0
 8002fc2:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002fc6:	b358      	cbz	r0, 8003020 <USBD_CDC_Init+0xa4>
    hcdc->TxState = 0U;
 8002fc8:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002fca:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002fd2:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8002fd6:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8002fda:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002fde:	f1b8 0f00 	cmp.w	r8, #0
 8002fe2:	d113      	bne.n	800300c <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe8:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002fec:	4629      	mov	r1, r5
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f001 fb76 	bl	80046e0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002ffa:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002ffc:	2340      	movs	r3, #64	; 0x40
 8002ffe:	2202      	movs	r2, #2
 8003000:	2181      	movs	r1, #129	; 0x81
 8003002:	f001 fb07 	bl	8004614 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003006:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	e7c6      	b.n	8002f9a <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800300c:	2340      	movs	r3, #64	; 0x40
 800300e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003012:	4629      	mov	r1, r5
 8003014:	4620      	mov	r0, r4
 8003016:	f001 fb63 	bl	80046e0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800301a:	4638      	mov	r0, r7
 800301c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8003020:	4628      	mov	r0, r5
}
 8003022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003026 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003026:	b119      	cbz	r1, 8003030 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003028:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003030:	2002      	movs	r0, #2
  }

  return ret;
}
 8003032:	4770      	bx	lr

08003034 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003034:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003038:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800303a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800303e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003042:	4770      	bx	lr

08003044 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003044:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003048:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800304a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800304e:	4770      	bx	lr

08003050 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003050:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003054:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8003056:	b182      	cbz	r2, 800307a <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8003058:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800305c:	2301      	movs	r3, #1
 800305e:	b974      	cbnz	r4, 800307e <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003060:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003064:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003068:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800306a:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800306c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003070:	b29b      	uxth	r3, r3
 8003072:	f001 fb27 	bl	80046c4 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8003076:	4620      	mov	r0, r4
 8003078:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800307a:	2002      	movs	r0, #2
 800307c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800307e:	4618      	mov	r0, r3
  }
}
 8003080:	bd10      	pop	{r4, pc}

08003082 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003082:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003086:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003088:	b162      	cbz	r2, 80030a4 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800308a:	7c04      	ldrb	r4, [r0, #16]
 800308c:	b944      	cbnz	r4, 80030a0 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800308e:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003092:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003096:	2101      	movs	r1, #1
 8003098:	f001 fb22 	bl	80046e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800309c:	2000      	movs	r0, #0
 800309e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80030a0:	2340      	movs	r3, #64	; 0x40
 80030a2:	e7f6      	b.n	8003092 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80030a4:	2002      	movs	r0, #2
  }
}
 80030a6:	bd10      	pop	{r4, pc}

080030a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80030a8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80030aa:	b180      	cbz	r0, 80030ce <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80030ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030b0:	b113      	cbz	r3, 80030b8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80030b8:	b109      	cbz	r1, 80030be <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80030ba:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80030be:	2301      	movs	r3, #1
  pdev->id = id;
 80030c0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80030c2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80030c6:	f001 fa57 	bl	8004578 <USBD_LL_Init>

  return USBD_OK;
 80030ca:	2000      	movs	r0, #0
 80030cc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80030ce:	2002      	movs	r0, #2
}
 80030d0:	bd08      	pop	{r3, pc}

080030d2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80030d2:	b119      	cbz	r1, 80030dc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80030d4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80030d8:	2000      	movs	r0, #0
 80030da:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80030dc:	2002      	movs	r0, #2
  }

  return status;
}
 80030de:	4770      	bx	lr

080030e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80030e0:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80030e2:	f001 fa89 	bl	80045f8 <USBD_LL_Start>

  return USBD_OK;
}
 80030e6:	2000      	movs	r0, #0
 80030e8:	bd08      	pop	{r3, pc}

080030ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80030ea:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80030ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030f0:	b90b      	cbnz	r3, 80030f6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80030f2:	2002      	movs	r0, #2
 80030f4:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4798      	blx	r3
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d1f9      	bne.n	80030f2 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80030fe:	bd08      	pop	{r3, pc}

08003100 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003100:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003102:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4798      	blx	r3

  return USBD_OK;
}
 800310a:	2000      	movs	r0, #0
 800310c:	bd08      	pop	{r3, pc}

0800310e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800310e:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003110:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003114:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003116:	4628      	mov	r0, r5
 8003118:	f000 fae2 	bl	80036e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800311c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800311e:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003122:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003126:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800312a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800312e:	f001 031f 	and.w	r3, r1, #31
 8003132:	2b01      	cmp	r3, #1
 8003134:	d00e      	beq.n	8003154 <USBD_LL_SetupStage+0x46>
 8003136:	d307      	bcc.n	8003148 <USBD_LL_SetupStage+0x3a>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d010      	beq.n	800315e <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800313c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003140:	4620      	mov	r0, r4
 8003142:	f001 fa85 	bl	8004650 <USBD_LL_StallEP>
      break;
 8003146:	e003      	b.n	8003150 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003148:	4629      	mov	r1, r5
 800314a:	4620      	mov	r0, r4
 800314c:	f000 f8f6 	bl	800333c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003150:	2000      	movs	r0, #0
 8003152:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003154:	4629      	mov	r1, r5
 8003156:	4620      	mov	r0, r4
 8003158:	f000 fa14 	bl	8003584 <USBD_StdItfReq>
      break;
 800315c:	e7f8      	b.n	8003150 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800315e:	4629      	mov	r1, r5
 8003160:	4620      	mov	r0, r4
 8003162:	f000 fa34 	bl	80035ce <USBD_StdEPReq>
      break;
 8003166:	e7f3      	b.n	8003150 <USBD_LL_SetupStage+0x42>

08003168 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	4605      	mov	r5, r0
 800316c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800316e:	bb49      	cbnz	r1, 80031c4 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003170:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003174:	2b03      	cmp	r3, #3
 8003176:	d11e      	bne.n	80031b6 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003178:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 800317c:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003180:	4293      	cmp	r3, r2
 8003182:	d90b      	bls.n	800319c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8003184:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003186:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003188:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800318c:	bf8c      	ite	hi
 800318e:	b29a      	uxthhi	r2, r3
 8003190:	b292      	uxthls	r2, r2
 8003192:	4631      	mov	r1, r6
 8003194:	f000 fb03 	bl	800379e <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003198:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800319a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800319c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	b123      	cbz	r3, 80031ae <USBD_LL_DataOutStage+0x46>
 80031a4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80031a8:	2a03      	cmp	r2, #3
 80031aa:	d100      	bne.n	80031ae <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80031ac:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80031ae:	4628      	mov	r0, r5
 80031b0:	f000 fafd 	bl	80037ae <USBD_CtlSendStatus>
 80031b4:	e7f0      	b.n	8003198 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d1ee      	bne.n	8003198 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80031ba:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80031be:	f001 fa47 	bl	8004650 <USBD_LL_StallEP>
 80031c2:	e7e9      	b.n	8003198 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 80031c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	b12b      	cbz	r3, 80031d8 <USBD_LL_DataOutStage+0x70>
 80031cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80031d0:	2a03      	cmp	r2, #3
 80031d2:	d101      	bne.n	80031d8 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80031d4:	4798      	blx	r3
 80031d6:	e7df      	b.n	8003198 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80031d8:	2002      	movs	r0, #2
}
 80031da:	bd70      	pop	{r4, r5, r6, pc}

080031dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4613      	mov	r3, r2
 80031e0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80031e2:	460e      	mov	r6, r1
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d147      	bne.n	8003278 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80031e8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80031ec:	2a02      	cmp	r2, #2
 80031ee:	d13c      	bne.n	800326a <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80031f0:	6a05      	ldr	r5, [r0, #32]
 80031f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80031f4:	4295      	cmp	r5, r2
 80031f6:	d913      	bls.n	8003220 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 80031f8:	1aaa      	subs	r2, r5, r2
 80031fa:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80031fc:	4619      	mov	r1, r3
 80031fe:	b292      	uxth	r2, r2
 8003200:	f000 fab6 	bl	8003770 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003204:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003206:	461a      	mov	r2, r3
 8003208:	4619      	mov	r1, r3
 800320a:	4620      	mov	r0, r4
 800320c:	f001 fa68 	bl	80046e0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003210:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003214:	2000      	movs	r0, #0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d13a      	bne.n	8003290 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800321a:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 800321e:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003220:	69c3      	ldr	r3, [r0, #28]
 8003222:	fbb3 f5f2 	udiv	r5, r3, r2
 8003226:	fb02 3515 	mls	r5, r2, r5, r3
 800322a:	b965      	cbnz	r5, 8003246 <USBD_LL_DataInStage+0x6a>
 800322c:	429a      	cmp	r2, r3
 800322e:	d80a      	bhi.n	8003246 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003230:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003234:	4293      	cmp	r3, r2
 8003236:	d206      	bcs.n	8003246 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003238:	462a      	mov	r2, r5
 800323a:	f000 fa99 	bl	8003770 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800323e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003242:	462b      	mov	r3, r5
 8003244:	e7df      	b.n	8003206 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003246:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	b12b      	cbz	r3, 800325a <USBD_LL_DataInStage+0x7e>
 800324e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003252:	2a03      	cmp	r2, #3
 8003254:	d101      	bne.n	800325a <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003256:	4620      	mov	r0, r4
 8003258:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	4620      	mov	r0, r4
 800325e:	f001 f9f7 	bl	8004650 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003262:	4620      	mov	r0, r4
 8003264:	f000 faae 	bl	80037c4 <USBD_CtlReceiveStatus>
 8003268:	e7d2      	b.n	8003210 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800326a:	f032 0304 	bics.w	r3, r2, #4
 800326e:	d1cf      	bne.n	8003210 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	f001 f9ed 	bl	8004650 <USBD_LL_StallEP>
 8003276:	e7cb      	b.n	8003210 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003278:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	b133      	cbz	r3, 800328e <USBD_LL_DataInStage+0xb2>
 8003280:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003284:	2a03      	cmp	r2, #3
 8003286:	d102      	bne.n	800328e <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003288:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800328a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800328c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800328e:	2002      	movs	r0, #2
}
 8003290:	bd70      	pop	{r4, r5, r6, pc}

08003292 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003292:	2200      	movs	r2, #0
{
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003298:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800329a:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800329c:	4611      	mov	r1, r2
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	f001 f9b8 	bl	8004614 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032a4:	4633      	mov	r3, r6
 80032a6:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80032a8:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032ac:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032b0:	2200      	movs	r2, #0
 80032b2:	4620      	mov	r0, r4
 80032b4:	f001 f9ae 	bl	8004614 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80032b8:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80032ba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80032be:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80032c0:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032c2:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80032c6:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80032ca:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80032cc:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80032d0:	b123      	cbz	r3, 80032dc <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80032d2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80032d6:	4620      	mov	r0, r4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4798      	blx	r3
  }

  return USBD_OK;
}
 80032dc:	2000      	movs	r0, #0
 80032de:	bd70      	pop	{r4, r5, r6, pc}

080032e0 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80032e0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80032e2:	2000      	movs	r0, #0
 80032e4:	4770      	bx	lr

080032e6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80032e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032ea:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80032ee:	2304      	movs	r3, #4
 80032f0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80032f4:	2000      	movs	r0, #0
 80032f6:	4770      	bx	lr

080032f8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80032f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032fc:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80032fe:	bf04      	itt	eq
 8003300:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003304:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003308:	2000      	movs	r0, #0
 800330a:	4770      	bx	lr

0800330c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800330c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800330e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003312:	2a03      	cmp	r2, #3
 8003314:	d104      	bne.n	8003320 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003316:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	b103      	cbz	r3, 8003320 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800331e:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003320:	2000      	movs	r0, #0
 8003322:	bd08      	pop	{r3, pc}

08003324 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003324:	b510      	push	{r4, lr}
 8003326:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	f001 f991 	bl	8004650 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800332e:	4620      	mov	r0, r4
}
 8003330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003334:	2100      	movs	r1, #0
 8003336:	f001 b98b 	b.w	8004650 <USBD_LL_StallEP>
	...

0800333c <USBD_StdDevReq>:
{
 800333c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800333e:	780b      	ldrb	r3, [r1, #0]
{
 8003340:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003346:	2b20      	cmp	r3, #32
{
 8003348:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800334a:	d012      	beq.n	8003372 <USBD_StdDevReq+0x36>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d010      	beq.n	8003372 <USBD_StdDevReq+0x36>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d15c      	bne.n	800340e <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8003354:	784b      	ldrb	r3, [r1, #1]
 8003356:	2b09      	cmp	r3, #9
 8003358:	d858      	bhi.n	800340c <USBD_StdDevReq+0xd0>
 800335a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800335e:	00e9      	.short	0x00e9
 8003360:	00570105 	.word	0x00570105
 8003364:	005700fe 	.word	0x005700fe
 8003368:	00130084 	.word	0x00130084
 800336c:	00d20057 	.word	0x00d20057
 8003370:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8003372:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003376:	4629      	mov	r1, r5
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4620      	mov	r0, r4
 800337c:	4798      	blx	r3
}
 800337e:	2000      	movs	r0, #0
 8003380:	b003      	add	sp, #12
 8003382:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800338a:	884b      	ldrh	r3, [r1, #2]
 800338c:	0a1a      	lsrs	r2, r3, #8
 800338e:	3a01      	subs	r2, #1
 8003390:	2a06      	cmp	r2, #6
 8003392:	d83b      	bhi.n	800340c <USBD_StdDevReq+0xd0>
 8003394:	e8df f002 	tbb	[pc, r2]
 8003398:	3a2d2004 	.word	0x3a2d2004
 800339c:	523a      	.short	0x523a
 800339e:	5c          	.byte	0x5c
 800339f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80033a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80033a4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80033a6:	f10d 0106 	add.w	r1, sp, #6
 80033aa:	7c20      	ldrb	r0, [r4, #16]
 80033ac:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80033ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80033b2:	b152      	cbz	r2, 80033ca <USBD_StdDevReq+0x8e>
 80033b4:	88eb      	ldrh	r3, [r5, #6]
 80033b6:	b143      	cbz	r3, 80033ca <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 80033b8:	429a      	cmp	r2, r3
 80033ba:	bf28      	it	cs
 80033bc:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80033be:	4601      	mov	r1, r0
 80033c0:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80033c2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80033c6:	f000 f9c6 	bl	8003756 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80033ca:	88eb      	ldrh	r3, [r5, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1d6      	bne.n	800337e <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 80033d0:	4620      	mov	r0, r4
 80033d2:	f000 f9ec 	bl	80037ae <USBD_CtlSendStatus>
 80033d6:	e7d2      	b.n	800337e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033d8:	7c02      	ldrb	r2, [r0, #16]
 80033da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033de:	b932      	cbnz	r2, 80033ee <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80033e2:	f10d 0006 	add.w	r0, sp, #6
 80033e6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033e8:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80033ea:	7043      	strb	r3, [r0, #1]
 80033ec:	e7df      	b.n	80033ae <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	e7f7      	b.n	80033e2 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d809      	bhi.n	800340c <USBD_StdDevReq+0xd0>
 80033f8:	e8df f003 	tbb	[pc, r3]
 80033fc:	14100c03 	.word	0x14100c03
 8003400:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003402:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003406:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1cc      	bne.n	80033a6 <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 800340c:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800340e:	f7ff ff89 	bl	8003324 <USBD_CtlError.constprop.1>
  return ret;
 8003412:	e7b4      	b.n	800337e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003414:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	e7f5      	b.n	8003408 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800341c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	e7f1      	b.n	8003408 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003424:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	e7ed      	b.n	8003408 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800342c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	e7e9      	b.n	8003408 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003434:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	e7e5      	b.n	8003408 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800343c:	7c03      	ldrb	r3, [r0, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e4      	bne.n	800340c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003442:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003446:	f10d 0006 	add.w	r0, sp, #6
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	4798      	blx	r3
 800344e:	e7ae      	b.n	80033ae <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003450:	7c03      	ldrb	r3, [r0, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1da      	bne.n	800340c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003456:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800345a:	f10d 0006 	add.w	r0, sp, #6
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003462:	2307      	movs	r3, #7
 8003464:	e7c1      	b.n	80033ea <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003466:	888b      	ldrh	r3, [r1, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1cf      	bne.n	800340c <USBD_StdDevReq+0xd0>
 800346c:	88cb      	ldrh	r3, [r1, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1cc      	bne.n	800340c <USBD_StdDevReq+0xd0>
 8003472:	884d      	ldrh	r5, [r1, #2]
 8003474:	2d7f      	cmp	r5, #127	; 0x7f
 8003476:	d8c9      	bhi.n	800340c <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003478:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800347c:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800347e:	2b03      	cmp	r3, #3
 8003480:	d0c4      	beq.n	800340c <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 8003482:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003486:	f001 f90f 	bl	80046a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800348a:	4620      	mov	r0, r4
 800348c:	f000 f98f 	bl	80037ae <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003490:	b11d      	cbz	r5, 800349a <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003492:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003494:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003498:	e771      	b.n	800337e <USBD_StdDevReq+0x42>
 800349a:	2301      	movs	r3, #1
 800349c:	e7fa      	b.n	8003494 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 800349e:	7889      	ldrb	r1, [r1, #2]
 80034a0:	4d37      	ldr	r5, [pc, #220]	; (8003580 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80034a2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80034a4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80034a6:	d8b1      	bhi.n	800340c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80034a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d008      	beq.n	80034c2 <USBD_StdDevReq+0x186>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d014      	beq.n	80034de <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 80034b4:	f7ff ff36 	bl	8003324 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80034b8:	7829      	ldrb	r1, [r5, #0]
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7ff fe20 	bl	8003100 <USBD_ClrClassConfig>
 80034c0:	e75d      	b.n	800337e <USBD_StdDevReq+0x42>
        if (cfgidx)
 80034c2:	2900      	cmp	r1, #0
 80034c4:	d084      	beq.n	80033d0 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 80034c6:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80034c8:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80034ca:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80034cc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7ff fe0a 	bl	80030ea <USBD_SetClassConfig>
 80034d6:	2802      	cmp	r0, #2
 80034d8:	f47f af7a 	bne.w	80033d0 <USBD_StdDevReq+0x94>
 80034dc:	e796      	b.n	800340c <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 80034de:	b931      	cbnz	r1, 80034ee <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80034e0:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80034e2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80034e4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80034e8:	f7ff fe0a 	bl	8003100 <USBD_ClrClassConfig>
 80034ec:	e770      	b.n	80033d0 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 80034ee:	6841      	ldr	r1, [r0, #4]
 80034f0:	2901      	cmp	r1, #1
 80034f2:	f43f af6d 	beq.w	80033d0 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80034f6:	b2c9      	uxtb	r1, r1
 80034f8:	f7ff fe02 	bl	8003100 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80034fc:	7829      	ldrb	r1, [r5, #0]
 80034fe:	6061      	str	r1, [r4, #4]
 8003500:	e7e6      	b.n	80034d0 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8003502:	88ca      	ldrh	r2, [r1, #6]
 8003504:	2a01      	cmp	r2, #1
 8003506:	d181      	bne.n	800340c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003508:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800350c:	2b00      	cmp	r3, #0
 800350e:	f43f af7d 	beq.w	800340c <USBD_StdDevReq+0xd0>
 8003512:	2b02      	cmp	r3, #2
 8003514:	d904      	bls.n	8003520 <USBD_StdDevReq+0x1e4>
 8003516:	2b03      	cmp	r3, #3
 8003518:	f47f af78 	bne.w	800340c <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800351c:	1d01      	adds	r1, r0, #4
 800351e:	e003      	b.n	8003528 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8003520:	4601      	mov	r1, r0
 8003522:	2300      	movs	r3, #0
 8003524:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003528:	4620      	mov	r0, r4
 800352a:	f000 f914 	bl	8003756 <USBD_CtlSendData>
 800352e:	e726      	b.n	800337e <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003530:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003534:	3b01      	subs	r3, #1
 8003536:	2b02      	cmp	r3, #2
 8003538:	f63f af68 	bhi.w	800340c <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 800353c:	88cb      	ldrh	r3, [r1, #6]
 800353e:	2b02      	cmp	r3, #2
 8003540:	f47f af64 	bne.w	800340c <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003544:	2301      	movs	r3, #1
 8003546:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003548:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800354c:	b10b      	cbz	r3, 8003552 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800354e:	2303      	movs	r3, #3
 8003550:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003552:	2202      	movs	r2, #2
 8003554:	f104 010c 	add.w	r1, r4, #12
 8003558:	e7e6      	b.n	8003528 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800355a:	884b      	ldrh	r3, [r1, #2]
 800355c:	2b01      	cmp	r3, #1
 800355e:	f47f af0e 	bne.w	800337e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003562:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003566:	e733      	b.n	80033d0 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8003568:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800356c:	3b01      	subs	r3, #1
 800356e:	2b02      	cmp	r3, #2
 8003570:	f63f af4c 	bhi.w	800340c <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003574:	884b      	ldrh	r3, [r1, #2]
 8003576:	2b01      	cmp	r3, #1
 8003578:	f47f af01 	bne.w	800337e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	e7f0      	b.n	8003562 <USBD_StdDevReq+0x226>
 8003580:	20000394 	.word	0x20000394

08003584 <USBD_StdItfReq>:
{
 8003584:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003586:	780b      	ldrb	r3, [r1, #0]
{
 8003588:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800358a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800358e:	2b20      	cmp	r3, #32
{
 8003590:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003592:	d002      	beq.n	800359a <USBD_StdItfReq+0x16>
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d000      	beq.n	800359a <USBD_StdItfReq+0x16>
 8003598:	b9b3      	cbnz	r3, 80035c8 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 800359a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800359e:	3b01      	subs	r3, #1
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d810      	bhi.n	80035c6 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80035a4:	792b      	ldrb	r3, [r5, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d80d      	bhi.n	80035c6 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80035aa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80035ae:	4629      	mov	r1, r5
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4620      	mov	r0, r4
 80035b4:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80035b6:	88eb      	ldrh	r3, [r5, #6]
 80035b8:	b91b      	cbnz	r3, 80035c2 <USBD_StdItfReq+0x3e>
 80035ba:	b910      	cbnz	r0, 80035c2 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80035bc:	4620      	mov	r0, r4
 80035be:	f000 f8f6 	bl	80037ae <USBD_CtlSendStatus>
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80035c6:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80035c8:	f7ff feac 	bl	8003324 <USBD_CtlError.constprop.1>
      break;
 80035cc:	e7f9      	b.n	80035c2 <USBD_StdItfReq+0x3e>

080035ce <USBD_StdEPReq>:
{
 80035ce:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035d0:	780a      	ldrb	r2, [r1, #0]
{
 80035d2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035d4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80035d8:	2a20      	cmp	r2, #32
{
 80035da:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035dc:	d013      	beq.n	8003606 <USBD_StdEPReq+0x38>
 80035de:	2a40      	cmp	r2, #64	; 0x40
 80035e0:	d011      	beq.n	8003606 <USBD_StdEPReq+0x38>
 80035e2:	b96a      	cbnz	r2, 8003600 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80035e4:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80035e6:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80035e8:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80035ea:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80035ec:	d01f      	beq.n	800362e <USBD_StdEPReq+0x60>
 80035ee:	d335      	bcc.n	800365c <USBD_StdEPReq+0x8e>
 80035f0:	2d03      	cmp	r5, #3
 80035f2:	d105      	bne.n	8003600 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80035f4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80035f8:	2a02      	cmp	r2, #2
 80035fa:	d026      	beq.n	800364a <USBD_StdEPReq+0x7c>
 80035fc:	2a03      	cmp	r2, #3
 80035fe:	d00a      	beq.n	8003616 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 8003600:	f7ff fe90 	bl	8003324 <USBD_CtlError.constprop.1>
      break;
 8003604:	e005      	b.n	8003612 <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 8003606:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800360a:	4619      	mov	r1, r3
 800360c:	6892      	ldr	r2, [r2, #8]
 800360e:	4620      	mov	r0, r4
 8003610:	4790      	blx	r2
}
 8003612:	2000      	movs	r0, #0
 8003614:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003616:	885a      	ldrh	r2, [r3, #2]
 8003618:	b92a      	cbnz	r2, 8003626 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 800361a:	064a      	lsls	r2, r1, #25
 800361c:	d003      	beq.n	8003626 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800361e:	88db      	ldrh	r3, [r3, #6]
 8003620:	b90b      	cbnz	r3, 8003626 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003622:	f001 f815 	bl	8004650 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003626:	4620      	mov	r0, r4
 8003628:	f000 f8c1 	bl	80037ae <USBD_CtlSendStatus>
              break;
 800362c:	e7f1      	b.n	8003612 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 800362e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003632:	2a02      	cmp	r2, #2
 8003634:	d009      	beq.n	800364a <USBD_StdEPReq+0x7c>
 8003636:	2a03      	cmp	r2, #3
 8003638:	d1e2      	bne.n	8003600 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800363a:	885b      	ldrh	r3, [r3, #2]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e8      	bne.n	8003612 <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003640:	064d      	lsls	r5, r1, #25
 8003642:	d0f0      	beq.n	8003626 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003644:	f001 f812 	bl	800466c <USBD_LL_ClearStallEP>
 8003648:	e7ed      	b.n	8003626 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800364a:	064b      	lsls	r3, r1, #25
 800364c:	d016      	beq.n	800367c <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 800364e:	f000 ffff 	bl	8004650 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	4620      	mov	r0, r4
 8003656:	f000 fffb 	bl	8004650 <USBD_LL_StallEP>
 800365a:	e7da      	b.n	8003612 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 800365c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003660:	2b02      	cmp	r3, #2
 8003662:	d00d      	beq.n	8003680 <USBD_StdEPReq+0xb2>
 8003664:	2b03      	cmp	r3, #3
 8003666:	d1cb      	bne.n	8003600 <USBD_StdEPReq+0x32>
 8003668:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 800366a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800366e:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003672:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003676:	d014      	beq.n	80036a2 <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003678:	6992      	ldr	r2, [r2, #24]
 800367a:	b9ea      	cbnz	r2, 80036b8 <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 800367c:	4620      	mov	r0, r4
 800367e:	e7bf      	b.n	8003600 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003680:	0649      	lsls	r1, r1, #25
 8003682:	d1fb      	bne.n	800367c <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003684:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 8003686:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800368a:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800368e:	bf4c      	ite	mi
 8003690:	f100 0114 	addmi.w	r1, r0, #20
 8003694:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8003698:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800369a:	4620      	mov	r0, r4
 800369c:	f000 f85b 	bl	8003756 <USBD_CtlSendData>
              break;
 80036a0:	e7b7      	b.n	8003612 <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80036a2:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d0e8      	beq.n	800367c <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80036aa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80036ae:	fb03 0505 	mla	r5, r3, r5, r0
 80036b2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80036b6:	e004      	b.n	80036c2 <USBD_StdEPReq+0xf4>
 80036b8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80036bc:	fb05 3503 	mla	r5, r5, r3, r3
 80036c0:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80036c2:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80036c6:	d103      	bne.n	80036d0 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80036c8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80036ca:	2202      	movs	r2, #2
 80036cc:	4629      	mov	r1, r5
 80036ce:	e7e4      	b.n	800369a <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 ffd9 	bl	8004688 <USBD_LL_IsStallEP>
 80036d6:	b108      	cbz	r0, 80036dc <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 80036d8:	2301      	movs	r3, #1
 80036da:	e7f5      	b.n	80036c8 <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 80036dc:	6028      	str	r0, [r5, #0]
 80036de:	e7f4      	b.n	80036ca <USBD_StdEPReq+0xfc>

080036e0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80036e0:	780b      	ldrb	r3, [r1, #0]
 80036e2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80036e4:	784b      	ldrb	r3, [r1, #1]
 80036e6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80036e8:	78ca      	ldrb	r2, [r1, #3]
 80036ea:	788b      	ldrb	r3, [r1, #2]
 80036ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036f0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80036f2:	794a      	ldrb	r2, [r1, #5]
 80036f4:	790b      	ldrb	r3, [r1, #4]
 80036f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80036fa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80036fc:	79ca      	ldrb	r2, [r1, #7]
 80036fe:	798b      	ldrb	r3, [r1, #6]
 8003700:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003704:	80c3      	strh	r3, [r0, #6]
 8003706:	4770      	bx	lr

08003708 <USBD_CtlError>:
{
 8003708:	b510      	push	{r4, lr}
 800370a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	f000 ff9f 	bl	8004650 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003712:	4620      	mov	r0, r4
}
 8003714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003718:	2100      	movs	r1, #0
 800371a:	f000 bf99 	b.w	8004650 <USBD_LL_StallEP>

0800371e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800371e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003720:	b188      	cbz	r0, 8003746 <USBD_GetString+0x28>
 8003722:	4605      	mov	r5, r0
 8003724:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003726:	f815 4b01 	ldrb.w	r4, [r5], #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2c00      	cmp	r4, #0
 800372e:	d1f9      	bne.n	8003724 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003730:	3301      	adds	r3, #1
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003736:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003738:	2303      	movs	r3, #3
 800373a:	704b      	strb	r3, [r1, #1]
 800373c:	2302      	movs	r3, #2
 800373e:	3801      	subs	r0, #1
    while (*desc != '\0')
 8003740:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003744:	b905      	cbnz	r5, 8003748 <USBD_GetString+0x2a>
 8003746:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	54cd      	strb	r5, [r1, r3]
 800374c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800374e:	3302      	adds	r3, #2
 8003750:	b2db      	uxtb	r3, r3
 8003752:	548c      	strb	r4, [r1, r2]
 8003754:	e7f4      	b.n	8003740 <USBD_GetString+0x22>

08003756 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003756:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003758:	2202      	movs	r2, #2
{
 800375a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800375c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8003760:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003762:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003764:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003766:	2100      	movs	r1, #0
 8003768:	f000 ffac 	bl	80046c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800376c:	2000      	movs	r0, #0
 800376e:	bd10      	pop	{r4, pc}

08003770 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003770:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003772:	4613      	mov	r3, r2
 8003774:	460a      	mov	r2, r1
 8003776:	2100      	movs	r1, #0
 8003778:	f000 ffa4 	bl	80046c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800377c:	2000      	movs	r0, #0
 800377e:	bd08      	pop	{r3, pc}

08003780 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003780:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003782:	2203      	movs	r2, #3
{
 8003784:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003786:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800378a:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800378e:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003790:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003794:	2100      	movs	r1, #0
 8003796:	f000 ffa3 	bl	80046e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800379a:	2000      	movs	r0, #0
 800379c:	bd10      	pop	{r4, pc}

0800379e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800379e:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80037a0:	4613      	mov	r3, r2
 80037a2:	460a      	mov	r2, r1
 80037a4:	2100      	movs	r1, #0
 80037a6:	f000 ff9b 	bl	80046e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80037aa:	2000      	movs	r0, #0
 80037ac:	bd08      	pop	{r3, pc}

080037ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80037ae:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80037b0:	2304      	movs	r3, #4
 80037b2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80037b6:	2300      	movs	r3, #0
 80037b8:	461a      	mov	r2, r3
 80037ba:	4619      	mov	r1, r3
 80037bc:	f000 ff82 	bl	80046c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80037c0:	2000      	movs	r0, #0
 80037c2:	bd08      	pop	{r3, pc}

080037c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80037c4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80037c6:	2305      	movs	r3, #5
 80037c8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80037cc:	2300      	movs	r3, #0
 80037ce:	461a      	mov	r2, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	f000 ff85 	bl	80046e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80037d6:	2000      	movs	r0, #0
 80037d8:	bd08      	pop	{r3, pc}
	...

080037dc <Reverse>:
		StateSandClock=0;
		WaitReverseFlag=TRUE;
	}
}

void Reverse (void){
 80037dc:	b570      	push	{r4, r5, r6, lr}

	static bool ReverseFlag = 0;
	static uint16_t ReverseTimeout = 100; /*Default timeout*/

	/* State entry works*/
	if (ReverseFlag) {
 80037de:	4c1f      	ldr	r4, [pc, #124]	; (800385c <Reverse+0x80>)
 80037e0:	4d1f      	ldr	r5, [pc, #124]	; (8003860 <Reverse+0x84>)
 80037e2:	7823      	ldrb	r3, [r4, #0]
 80037e4:	481f      	ldr	r0, [pc, #124]	; (8003864 <Reverse+0x88>)
 80037e6:	b12b      	cbz	r3, 80037f4 <Reverse+0x18>
		ReverseFlag = FALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	7023      	strb	r3, [r4, #0]
		StateSandClock = 0;
 80037ec:	802b      	strh	r3, [r5, #0]
		ReverseTimeout = 3000; /* ms, Can be adjusted by UCB Communication*/
 80037ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80037f2:	8003      	strh	r3, [r0, #0]
	}

	if (_10msFlagScan)	{
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <Reverse+0x8c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b173      	cbz	r3, 8003818 <Reverse+0x3c>
		StateSandClock += 10;
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <Reverse+0x90>)
		StateSandClock += 10;
 80037fc:	882b      	ldrh	r3, [r5, #0]
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 80037fe:	491c      	ldr	r1, [pc, #112]	; (8003870 <Reverse+0x94>)
 8003800:	8812      	ldrh	r2, [r2, #0]
		StateSandClock += 10;
 8003802:	330a      	adds	r3, #10
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 8003804:	0956      	lsrs	r6, r2, #5
		StateSandClock += 10;
 8003806:	802b      	strh	r3, [r5, #0]
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 8003808:	880b      	ldrh	r3, [r1, #0]
 800380a:	1b92      	subs	r2, r2, r6
 800380c:	4293      	cmp	r3, r2
		else Duty=DutyMAX_Reverse;
 800380e:	bfaa      	itet	ge
 8003810:	4b18      	ldrge	r3, [pc, #96]	; (8003874 <Reverse+0x98>)
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 8003812:	199b      	addlt	r3, r3, r6
		else Duty=DutyMAX_Reverse;
 8003814:	881b      	ldrhge	r3, [r3, #0]
 8003816:	800b      	strh	r3, [r1, #0]
	}

	if (StateSandClock > ReverseTimeout || 		HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==GPIO_PIN_RESET ) {
 8003818:	882a      	ldrh	r2, [r5, #0]
 800381a:	8803      	ldrh	r3, [r0, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d915      	bls.n	800384c <Reverse+0x70>

		HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 8003820:	2100      	movs	r1, #0
 8003822:	4815      	ldr	r0, [pc, #84]	; (8003878 <Reverse+0x9c>)
 8003824:	f7fe fe5c 	bl	80024e0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_2);
 8003828:	2104      	movs	r1, #4
 800382a:	4813      	ldr	r0, [pc, #76]	; (8003878 <Reverse+0x9c>)
 800382c:	f7fe fe58 	bl	80024e0 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14, GPIO_PIN_RESET);	//Enable Driver Chip
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003836:	4811      	ldr	r0, [pc, #68]	; (800387c <Reverse+0xa0>)
 8003838:	f7fd fca4 	bl	8001184 <HAL_GPIO_WritePin>
		Alpha_State_Ptr=*Wait_Reverse;
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <Reverse+0xa4>)
 800383e:	4a11      	ldr	r2, [pc, #68]	; (8003884 <Reverse+0xa8>)
 8003840:	601a      	str	r2, [r3, #0]
		ReverseFlag=TRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	7023      	strb	r3, [r4, #0]
		StateSandClock=0;
 8003846:	2300      	movs	r3, #0
 8003848:	802b      	strh	r3, [r5, #0]
 800384a:	bd70      	pop	{r4, r5, r6, pc}
	if (StateSandClock > ReverseTimeout || 		HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==GPIO_PIN_RESET ) {
 800384c:	2101      	movs	r1, #1
 800384e:	480e      	ldr	r0, [pc, #56]	; (8003888 <Reverse+0xac>)
 8003850:	f7fd fc92 	bl	8001178 <HAL_GPIO_ReadPin>
 8003854:	2800      	cmp	r0, #0
 8003856:	d0e3      	beq.n	8003820 <Reverse+0x44>
 8003858:	bd70      	pop	{r4, r5, r6, pc}
 800385a:	bf00      	nop
 800385c:	2000039e 	.word	0x2000039e
 8003860:	20000764 	.word	0x20000764
 8003864:	2000011a 	.word	0x2000011a
 8003868:	20000700 	.word	0x20000700
 800386c:	20000754 	.word	0x20000754
 8003870:	2000071c 	.word	0x2000071c
 8003874:	2000070a 	.word	0x2000070a
 8003878:	200007dc 	.word	0x200007dc
 800387c:	40011000 	.word	0x40011000
 8003880:	20000760 	.word	0x20000760
 8003884:	0800388d 	.word	0x0800388d
 8003888:	40010c00 	.word	0x40010c00

0800388c <Wait_Reverse>:
void Wait_Reverse (void){
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (WaitReverseFlag) {
 800388e:	4c29      	ldr	r4, [pc, #164]	; (8003934 <Wait_Reverse+0xa8>)
 8003890:	4d29      	ldr	r5, [pc, #164]	; (8003938 <Wait_Reverse+0xac>)
 8003892:	7823      	ldrb	r3, [r4, #0]
 8003894:	4e29      	ldr	r6, [pc, #164]	; (800393c <Wait_Reverse+0xb0>)
 8003896:	b1b3      	cbz	r3, 80038c6 <Wait_Reverse+0x3a>
		WaitReverseFlag = FALSE;
 8003898:	2300      	movs	r3, #0
 800389a:	7023      	strb	r3, [r4, #0]
		StateSandClock = 0;
 800389c:	802b      	strh	r3, [r5, #0]
		Wait_ReverseTimeout= (uint16_t) ((float) ParamArray[3] * (float) Pot2_ConvAvg/4096.0f);
 800389e:	4b28      	ldr	r3, [pc, #160]	; (8003940 <Wait_Reverse+0xb4>)
 80038a0:	88d8      	ldrh	r0, [r3, #6]
 80038a2:	f7fc fd1d 	bl	80002e0 <__aeabi_ui2f>
 80038a6:	4b27      	ldr	r3, [pc, #156]	; (8003944 <Wait_Reverse+0xb8>)
 80038a8:	4607      	mov	r7, r0
 80038aa:	8818      	ldrh	r0, [r3, #0]
 80038ac:	f7fc fd18 	bl	80002e0 <__aeabi_ui2f>
 80038b0:	4601      	mov	r1, r0
 80038b2:	4638      	mov	r0, r7
 80038b4:	f7fc fd6c 	bl	8000390 <__aeabi_fmul>
 80038b8:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80038bc:	f7fc fd68 	bl	8000390 <__aeabi_fmul>
 80038c0:	f7fc feb6 	bl	8000630 <__aeabi_f2uiz>
 80038c4:	8030      	strh	r0, [r6, #0]
	if (_10msFlagScan)	StateSandClock += 10;
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <Wait_Reverse+0xbc>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b113      	cbz	r3, 80038d2 <Wait_Reverse+0x46>
 80038cc:	882b      	ldrh	r3, [r5, #0]
 80038ce:	330a      	adds	r3, #10
 80038d0:	802b      	strh	r3, [r5, #0]
	if (StateSandClock > Wait_ReverseTimeout) {
 80038d2:	882a      	ldrh	r2, [r5, #0]
 80038d4:	8833      	ldrh	r3, [r6, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d92b      	bls.n	8003932 <Wait_Reverse+0xa6>
		tmpccmrx = htim2.Instance->CCMR1;
 80038da:	4e1c      	ldr	r6, [pc, #112]	; (800394c <Wait_Reverse+0xc0>)
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <Wait_Reverse+0xc4>)
 80038de:	6831      	ldr	r1, [r6, #0]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80038e0:	4630      	mov	r0, r6
		tmpccmrx = htim2.Instance->CCMR1;
 80038e2:	698a      	ldr	r2, [r1, #24]
 80038e4:	601a      	str	r2, [r3, #0]
		tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038ec:	601a      	str	r2, [r3, #0]
		tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80038f4:	601a      	str	r2, [r3, #0]
		tmpccmrx |= (TIM_OCMODE_PWM1);
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80038fc:	601a      	str	r2, [r3, #0]
		tmpccmrx |= (TIM_OCMODE_PWM2 << 8U);
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8003904:	601a      	str	r2, [r3, #0]
		htim2.Instance->CCMR1 = tmpccmrx;
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	618b      	str	r3, [r1, #24]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800390a:	2100      	movs	r1, #0
 800390c:	f7fe fdcc 	bl	80024a8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003910:	2104      	movs	r1, #4
 8003912:	4630      	mov	r0, r6
 8003914:	f7fe fdc8 	bl	80024a8 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14, GPIO_PIN_SET);
 8003918:	2201      	movs	r2, #1
 800391a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800391e:	480d      	ldr	r0, [pc, #52]	; (8003954 <Wait_Reverse+0xc8>)
 8003920:	f7fd fc30 	bl	8001184 <HAL_GPIO_WritePin>
		Alpha_State_Ptr = *Forward; /*next state*/
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <Wait_Reverse+0xcc>)
 8003926:	4a0d      	ldr	r2, [pc, #52]	; (800395c <Wait_Reverse+0xd0>)
 8003928:	601a      	str	r2, [r3, #0]
		StateSandClock=0;
 800392a:	2300      	movs	r3, #0
 800392c:	802b      	strh	r3, [r5, #0]
		WaitReverseFlag=TRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	7023      	strb	r3, [r4, #0]
 8003932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003934:	20000420 	.word	0x20000420
 8003938:	20000764 	.word	0x20000764
 800393c:	2000011e 	.word	0x2000011e
 8003940:	2000071e 	.word	0x2000071e
 8003944:	20000756 	.word	0x20000756
 8003948:	20000700 	.word	0x20000700
 800394c:	200007dc 	.word	0x200007dc
 8003950:	2000043c 	.word	0x2000043c
 8003954:	40011000 	.word	0x40011000
 8003958:	20000760 	.word	0x20000760
 800395c:	08003a15 	.word	0x08003a15

08003960 <Wait_Forward>:
	}

	/*exit reverse state */
}

void Wait_Forward(void) {
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static __IO uint32_t tmpccmrx;
	static bool WaitForwardFlag = 0;
	static uint16_t Wait_ForwardTimeout = 100; /*Default timeout*/

	/* State entry works*/
	if (WaitForwardFlag) {
 8003962:	4d22      	ldr	r5, [pc, #136]	; (80039ec <Wait_Forward+0x8c>)
 8003964:	4c22      	ldr	r4, [pc, #136]	; (80039f0 <Wait_Forward+0x90>)
 8003966:	782b      	ldrb	r3, [r5, #0]
 8003968:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <Wait_Forward+0x94>)
 800396a:	b12b      	cbz	r3, 8003978 <Wait_Forward+0x18>
		WaitForwardFlag = FALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	702b      	strb	r3, [r5, #0]
		StateSandClock = 0;
 8003970:	8023      	strh	r3, [r4, #0]
		Wait_ForwardTimeout = 1000; /* ms, Can be adjusted by UCB Communication*/
 8003972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003976:	8013      	strh	r3, [r2, #0]
	}

	if (_10msFlagScan)	StateSandClock += 10;
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <Wait_Forward+0x98>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	b113      	cbz	r3, 8003984 <Wait_Forward+0x24>
 800397e:	8823      	ldrh	r3, [r4, #0]
 8003980:	330a      	adds	r3, #10
 8003982:	8023      	strh	r3, [r4, #0]

	if (StateSandClock > Wait_ForwardTimeout) {
 8003984:	8821      	ldrh	r1, [r4, #0]
 8003986:	8813      	ldrh	r3, [r2, #0]
 8003988:	4299      	cmp	r1, r3
 800398a:	d92d      	bls.n	80039e8 <Wait_Forward+0x88>
		tmpccmrx &= ~TIM_CCMR1_OC2M;
		tmpccmrx |= (TIM_OCMODE_PWM2);
		tmpccmrx |= (TIM_OCMODE_PWM1 << 8U);
		htim2.Instance->CCMR1 = tmpccmrx;

		Duty = 0;
 800398c:	2600      	movs	r6, #0
		tmpccmrx = htim2.Instance->CCMR1;
 800398e:	4f1b      	ldr	r7, [pc, #108]	; (80039fc <Wait_Forward+0x9c>)
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <Wait_Forward+0xa0>)
 8003992:	6839      	ldr	r1, [r7, #0]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003994:	4638      	mov	r0, r7
		tmpccmrx = htim2.Instance->CCMR1;
 8003996:	698a      	ldr	r2, [r1, #24]
 8003998:	601a      	str	r2, [r3, #0]
		tmpccmrx &= ~TIM_CCMR1_OC1M;
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039a0:	601a      	str	r2, [r3, #0]
		tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039a8:	601a      	str	r2, [r3, #0]
		tmpccmrx |= (TIM_OCMODE_PWM2);
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80039b0:	601a      	str	r2, [r3, #0]
		tmpccmrx |= (TIM_OCMODE_PWM1 << 8U);
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80039b8:	601a      	str	r2, [r3, #0]
		htim2.Instance->CCMR1 = tmpccmrx;
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	618b      	str	r3, [r1, #24]
		Duty = 0;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <Wait_Forward+0xa4>)
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80039c0:	4631      	mov	r1, r6
		Duty = 0;
 80039c2:	801e      	strh	r6, [r3, #0]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80039c4:	f7fe fd70 	bl	80024a8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80039c8:	2104      	movs	r1, #4
 80039ca:	4638      	mov	r0, r7
 80039cc:	f7fe fd6c 	bl	80024a8 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14, GPIO_PIN_SET);	//Enable Driver Chip
 80039d0:	2201      	movs	r2, #1
 80039d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039d6:	480c      	ldr	r0, [pc, #48]	; (8003a08 <Wait_Forward+0xa8>)
 80039d8:	f7fd fbd4 	bl	8001184 <HAL_GPIO_WritePin>
		Alpha_State_Ptr = *Reverse; /*next state*/
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <Wait_Forward+0xac>)
 80039de:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <Wait_Forward+0xb0>)
		WaitForwardFlag=TRUE;
		StateSandClock=0;
 80039e0:	8026      	strh	r6, [r4, #0]
		Alpha_State_Ptr = *Reverse; /*next state*/
 80039e2:	601a      	str	r2, [r3, #0]
		WaitForwardFlag=TRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	702b      	strb	r3, [r5, #0]
 80039e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ea:	bf00      	nop
 80039ec:	2000041f 	.word	0x2000041f
 80039f0:	20000764 	.word	0x20000764
 80039f4:	2000011c 	.word	0x2000011c
 80039f8:	20000700 	.word	0x20000700
 80039fc:	200007dc 	.word	0x200007dc
 8003a00:	20000440 	.word	0x20000440
 8003a04:	2000071c 	.word	0x2000071c
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	20000760 	.word	0x20000760
 8003a10:	080037dd 	.word	0x080037dd

08003a14 <Forward>:
void Forward (void){
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ForwardFlag) {
 8003a16:	4d27      	ldr	r5, [pc, #156]	; (8003ab4 <Forward+0xa0>)
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_15);	//Enable Driver Chip
 8003a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a1c:	4826      	ldr	r0, [pc, #152]	; (8003ab8 <Forward+0xa4>)
 8003a1e:	f7fd fbb6 	bl	800118e <HAL_GPIO_TogglePin>
	if (ForwardFlag) {
 8003a22:	782b      	ldrb	r3, [r5, #0]
 8003a24:	4c25      	ldr	r4, [pc, #148]	; (8003abc <Forward+0xa8>)
 8003a26:	4e26      	ldr	r6, [pc, #152]	; (8003ac0 <Forward+0xac>)
 8003a28:	b1c3      	cbz	r3, 8003a5c <Forward+0x48>
		ForwardFlag = FALSE;
 8003a2a:	2300      	movs	r3, #0
		Duty = 0;
 8003a2c:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <Forward+0xb0>)
		ForwardFlag = FALSE;
 8003a2e:	702b      	strb	r3, [r5, #0]
		Duty = 0;
 8003a30:	8013      	strh	r3, [r2, #0]
		StateSandClock = 0;
 8003a32:	8023      	strh	r3, [r4, #0]
		Forwardimeout= (uint16_t) ((float) ParamArray[2] * (float) Pot1_ConvAvg/4096.0f);
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <Forward+0xb4>)
 8003a36:	8898      	ldrh	r0, [r3, #4]
 8003a38:	f7fc fc52 	bl	80002e0 <__aeabi_ui2f>
 8003a3c:	4b23      	ldr	r3, [pc, #140]	; (8003acc <Forward+0xb8>)
 8003a3e:	4607      	mov	r7, r0
 8003a40:	8818      	ldrh	r0, [r3, #0]
 8003a42:	f7fc fc4d 	bl	80002e0 <__aeabi_ui2f>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4638      	mov	r0, r7
 8003a4a:	f7fc fca1 	bl	8000390 <__aeabi_fmul>
 8003a4e:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8003a52:	f7fc fc9d 	bl	8000390 <__aeabi_fmul>
 8003a56:	f7fc fdeb 	bl	8000630 <__aeabi_f2uiz>
 8003a5a:	8030      	strh	r0, [r6, #0]
	if (_10msFlagScan)	{
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <Forward+0xbc>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b16b      	cbz	r3, 8003a7e <Forward+0x6a>
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 8003a62:	491c      	ldr	r1, [pc, #112]	; (8003ad4 <Forward+0xc0>)
		StateSandClock += 10;
 8003a64:	8823      	ldrh	r3, [r4, #0]
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <Forward+0xb0>)
 8003a68:	8809      	ldrh	r1, [r1, #0]
		StateSandClock += 10;
 8003a6a:	330a      	adds	r3, #10
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 8003a6c:	0948      	lsrs	r0, r1, #5
		StateSandClock += 10;
 8003a6e:	8023      	strh	r3, [r4, #0]
		if (Duty < (DutyMAX-(DutyMAX>>5U))) Duty=Duty+(DutyMAX>>5U);
 8003a70:	8813      	ldrh	r3, [r2, #0]
 8003a72:	1a0f      	subs	r7, r1, r0
 8003a74:	42bb      	cmp	r3, r7
 8003a76:	bfba      	itte	lt
 8003a78:	181b      	addlt	r3, r3, r0
 8003a7a:	8013      	strhlt	r3, [r2, #0]
		else Duty=DutyMAX;
 8003a7c:	8011      	strhge	r1, [r2, #0]
	if (StateSandClock > Forwardimeout) {
 8003a7e:	8822      	ldrh	r2, [r4, #0]
 8003a80:	8833      	ldrh	r3, [r6, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d914      	bls.n	8003ab0 <Forward+0x9c>
		HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 8003a86:	2100      	movs	r1, #0
 8003a88:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <Forward+0xc4>)
 8003a8a:	f7fe fd29 	bl	80024e0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_2);
 8003a8e:	2104      	movs	r1, #4
 8003a90:	4811      	ldr	r0, [pc, #68]	; (8003ad8 <Forward+0xc4>)
 8003a92:	f7fe fd25 	bl	80024e0 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14, GPIO_PIN_RESET);	//Enable Driver Chip
 8003a96:	2200      	movs	r2, #0
 8003a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a9c:	4806      	ldr	r0, [pc, #24]	; (8003ab8 <Forward+0xa4>)
 8003a9e:	f7fd fb71 	bl	8001184 <HAL_GPIO_WritePin>
		Alpha_State_Ptr=*Wait_Forward;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <Forward+0xc8>)
 8003aa4:	4a0e      	ldr	r2, [pc, #56]	; (8003ae0 <Forward+0xcc>)
 8003aa6:	601a      	str	r2, [r3, #0]
		ForwardFlag = TRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	702b      	strb	r3, [r5, #0]
		StateSandClock=0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	8023      	strh	r3, [r4, #0]
 8003ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000396 	.word	0x20000396
 8003ab8:	40011000 	.word	0x40011000
 8003abc:	20000764 	.word	0x20000764
 8003ac0:	20000118 	.word	0x20000118
 8003ac4:	2000071c 	.word	0x2000071c
 8003ac8:	2000071e 	.word	0x2000071e
 8003acc:	20000712 	.word	0x20000712
 8003ad0:	20000700 	.word	0x20000700
 8003ad4:	20000754 	.word	0x20000754
 8003ad8:	200007dc 	.word	0x200007dc
 8003adc:	20000760 	.word	0x20000760
 8003ae0:	08003961 	.word	0x08003961

08003ae4 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ae4:	2228      	movs	r2, #40	; 0x28
{
 8003ae6:	b530      	push	{r4, r5, lr}
 8003ae8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aea:	eb0d 0002 	add.w	r0, sp, r2
 8003aee:	2100      	movs	r1, #0
 8003af0:	f000 feda 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003af4:	2214      	movs	r2, #20
 8003af6:	2100      	movs	r1, #0
 8003af8:	eb0d 0002 	add.w	r0, sp, r2
 8003afc:	f000 fed4 	bl	80048a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b00:	2100      	movs	r1, #0
 8003b02:	2210      	movs	r2, #16
 8003b04:	a801      	add	r0, sp, #4
 8003b06:	f000 fecf 	bl	80048a8 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b0e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b10:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b12:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b14:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b16:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b1c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b1e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b20:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b22:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b24:	f7fd ff0e 	bl	8001944 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b28:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b2a:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b32:	4621      	mov	r1, r4
 8003b34:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b36:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b38:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b3a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b3c:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b3e:	f7fe f8db 	bl	8001cf8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003b42:	2312      	movs	r3, #18
 8003b44:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8003b46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b4a:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8003b4c:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003b4e:	9504      	str	r5, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b50:	f7fe f970 	bl	8001e34 <HAL_RCCEx_PeriphCLKConfig>
}
 8003b54:	b015      	add	sp, #84	; 0x54
 8003b56:	bd30      	pop	{r4, r5, pc}

08003b58 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM2) {
 8003b58:	6803      	ldr	r3, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003b5a:	b510      	push	{r4, lr}
	if (htim->Instance == TIM2) {
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003b60:	4604      	mov	r4, r0
	if (htim->Instance == TIM2) {
 8003b62:	d118      	bne.n	8003b96 <HAL_TIM_PeriodElapsedCallback+0x3e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8003b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b68:	480b      	ldr	r0, [pc, #44]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003b6a:	f7fd fb10 	bl	800118e <HAL_GPIO_TogglePin>
		if ((tiktok % 2)) {
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003b70:	68e3      	ldr	r3, [r4, #12]
 8003b72:	8811      	ldrh	r1, [r2, #0]
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f011 0f01 	tst.w	r1, #1
 8003b7a:	4c09      	ldr	r4, [pc, #36]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0x48>)
			htim->Instance->CCR1 = (htim->Init.Period + 5); /* overall period 1600 0x640*/
 8003b7c:	bf1b      	ittet	ne
 8003b7e:	3305      	addne	r3, #5
 8003b80:	6343      	strne	r3, [r0, #52]	; 0x34
			htim->Instance->CCR1 = Duty; /* overall period 1600 0x640*/
 8003b82:	8824      	ldrheq	r4, [r4, #0]
			htim->Instance->CCR2 = Duty;
 8003b84:	8823      	ldrhne	r3, [r4, #0]
			htim->Instance->CCR2 = (htim->Init.Period + 5);
 8003b86:	bf08      	it	eq
 8003b88:	3305      	addeq	r3, #5
		tiktok++;
 8003b8a:	f101 0101 	add.w	r1, r1, #1
			htim->Instance->CCR1 = Duty; /* overall period 1600 0x640*/
 8003b8e:	bf08      	it	eq
 8003b90:	6344      	streq	r4, [r0, #52]	; 0x34
			htim->Instance->CCR2 = (htim->Init.Period + 5);
 8003b92:	6383      	str	r3, [r0, #56]	; 0x38
		tiktok++;
 8003b94:	8011      	strh	r1, [r2, #0]
 8003b96:	bd10      	pop	{r4, pc}
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	2000043a 	.word	0x2000043a
 8003ba0:	2000071c 	.word	0x2000071c

08003ba4 <SysTickCountersUpdate>:
	static unsigned int _10msCounter = 0;
//	static unsigned int _50msCounter = 0;
	static unsigned int _100msCounter = 0;
//    static unsigned int _500msCounter = 0;

	_sysTickFlagScan = TRUE;
 8003ba4:	2101      	movs	r1, #1

//    CheckButtons();
//    //_msTickCounter++;
//
    _5msCounter++;
 8003ba6:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <SysTickCountersUpdate+0x54>)
	_sysTickFlagScan = TRUE;
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <SysTickCountersUpdate+0x58>)
    if(_5msCounter >= Tickin_1ms)	{
 8003baa:	4815      	ldr	r0, [pc, #84]	; (8003c00 <SysTickCountersUpdate+0x5c>)
	_sysTickFlagScan = TRUE;
 8003bac:	7019      	strb	r1, [r3, #0]
    _5msCounter++;
 8003bae:	6813      	ldr	r3, [r2, #0]
    if(_5msCounter >= Tickin_1ms)	{
 8003bb0:	8800      	ldrh	r0, [r0, #0]
    _5msCounter++;
 8003bb2:	440b      	add	r3, r1
    if(_5msCounter >= Tickin_1ms)	{
 8003bb4:	4283      	cmp	r3, r0
    _5msCounter++;
 8003bb6:	6013      	str	r3, [r2, #0]
       _5msFlagScan = TRUE;
 8003bb8:	bf21      	itttt	cs
 8003bba:	4b12      	ldrcs	r3, [pc, #72]	; (8003c04 <SysTickCountersUpdate+0x60>)
 8003bbc:	7019      	strbcs	r1, [r3, #0]
        _5msCounter = 0;
 8003bbe:	2300      	movcs	r3, #0
 8003bc0:	6013      	strcs	r3, [r2, #0]
    }

    _10msCounter++;
 8003bc2:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <SysTickCountersUpdate+0x64>)
    if(_10msCounter >= Tickin_10ms)	{
 8003bc4:	4911      	ldr	r1, [pc, #68]	; (8003c0c <SysTickCountersUpdate+0x68>)
    _10msCounter++;
 8003bc6:	6813      	ldr	r3, [r2, #0]
    if(_10msCounter >= Tickin_10ms)	{
 8003bc8:	8809      	ldrh	r1, [r1, #0]
    _10msCounter++;
 8003bca:	3301      	adds	r3, #1
    if(_10msCounter >= Tickin_10ms)	{
 8003bcc:	428b      	cmp	r3, r1
    _10msCounter++;
 8003bce:	6013      	str	r3, [r2, #0]
    if(_10msCounter >= Tickin_10ms)	{
 8003bd0:	d304      	bcc.n	8003bdc <SysTickCountersUpdate+0x38>
       _10msFlagScan = TRUE;
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <SysTickCountersUpdate+0x6c>)
 8003bd6:	7019      	strb	r1, [r3, #0]
       _10msCounter = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6013      	str	r3, [r2, #0]
    }

    _100msCounter++;
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <SysTickCountersUpdate+0x70>)
    if(_100msCounter >= Tickin_100ms)	{
 8003bde:	490e      	ldr	r1, [pc, #56]	; (8003c18 <SysTickCountersUpdate+0x74>)
    _100msCounter++;
 8003be0:	6813      	ldr	r3, [r2, #0]
    if(_100msCounter >= Tickin_100ms)	{
 8003be2:	8809      	ldrh	r1, [r1, #0]
    _100msCounter++;
 8003be4:	3301      	adds	r3, #1
    if(_100msCounter >= Tickin_100ms)	{
 8003be6:	428b      	cmp	r3, r1
    _100msCounter++;
 8003be8:	6013      	str	r3, [r2, #0]
    if(_100msCounter >= Tickin_100ms)	{
 8003bea:	d304      	bcc.n	8003bf6 <SysTickCountersUpdate+0x52>
       _100msFlagScan = TRUE;
 8003bec:	2101      	movs	r1, #1
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <SysTickCountersUpdate+0x78>)
 8003bf0:	7019      	strb	r1, [r3, #0]
       _100msCounter = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4770      	bx	lr
 8003bf8:	2000042c 	.word	0x2000042c
 8003bfc:	2000070e 	.word	0x2000070e
 8003c00:	20000758 	.word	0x20000758
 8003c04:	20000716 	.word	0x20000716
 8003c08:	20000428 	.word	0x20000428
 8003c0c:	20000718 	.word	0x20000718
 8003c10:	20000700 	.word	0x20000700
 8003c14:	20000424 	.word	0x20000424
 8003c18:	20000710 	.word	0x20000710
 8003c1c:	2000075c 	.word	0x2000075c

08003c20 <SaveandExit>:
//        _50msCounter = 0;
//    }
//
}

void SaveandExit (uint16_t * Parameters)		{
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4605      	mov	r5, r0
	HAL_FLASH_Unlock();
	FLASH_PageErase(FLASH_PAGE_63);
	HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, (uint32_t)userConfig, 0xABCD);
 8003c24:	4c14      	ldr	r4, [pc, #80]	; (8003c78 <SaveandExit+0x58>)
	HAL_FLASH_Unlock();
 8003c26:	f7fd f927 	bl	8000e78 <HAL_FLASH_Unlock>
	FLASH_PageErase(FLASH_PAGE_63);
 8003c2a:	4814      	ldr	r0, [pc, #80]	; (8003c7c <SaveandExit+0x5c>)
 8003c2c:	f7fd f9b0 	bl	8000f90 <FLASH_PageErase>
	HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, (uint32_t)userConfig, 0xABCD);
 8003c30:	4621      	mov	r1, r4
 8003c32:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8003c36:	2300      	movs	r3, #0
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f7fd f963 	bl	8000f04 <HAL_FLASH_Program>
	HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, (uint32_t)&userConfig[1], Parameters[0]);
 8003c3e:	882a      	ldrh	r2, [r5, #0]
 8003c40:	1ca1      	adds	r1, r4, #2
 8003c42:	2300      	movs	r3, #0
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7fd f95d 	bl	8000f04 <HAL_FLASH_Program>
	HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, (uint32_t)&userConfig[2], Parameters[1]);
 8003c4a:	886a      	ldrh	r2, [r5, #2]
 8003c4c:	1d21      	adds	r1, r4, #4
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fd f957 	bl	8000f04 <HAL_FLASH_Program>
	HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, (uint32_t)&userConfig[3], Parameters[2]);
 8003c56:	88aa      	ldrh	r2, [r5, #4]
 8003c58:	1da1      	adds	r1, r4, #6
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fd f951 	bl	8000f04 <HAL_FLASH_Program>
	HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, (uint32_t)&userConfig[4], Parameters[3]);
 8003c62:	88ea      	ldrh	r2, [r5, #6]
 8003c64:	2300      	movs	r3, #0
 8003c66:	f104 0108 	add.w	r1, r4, #8
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7fd f94a 	bl	8000f04 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
}
 8003c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_FLASH_Lock();
 8003c74:	f7fd b912 	b.w	8000e9c <HAL_FLASH_Lock>
 8003c78:	20000354 	.word	0x20000354
 8003c7c:	0800fc00 	.word	0x0800fc00

08003c80 <Idle_Works>:
void Idle_Works(void) {
 8003c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	POT1_ConvSum += ADC_Values[0];
 8003c84:	488e      	ldr	r0, [pc, #568]	; (8003ec0 <Idle_Works+0x240>)
 8003c86:	4b8f      	ldr	r3, [pc, #572]	; (8003ec4 <Idle_Works+0x244>)
 8003c88:	8801      	ldrh	r1, [r0, #0]
 8003c8a:	881a      	ldrh	r2, [r3, #0]
	POT2_ConvSum += ADC_Values[1];
 8003c8c:	4c8e      	ldr	r4, [pc, #568]	; (8003ec8 <Idle_Works+0x248>)
	POT1_ConvSum += ADC_Values[0];
 8003c8e:	440a      	add	r2, r1
	POT2_ConvSum += ADC_Values[1];
 8003c90:	885b      	ldrh	r3, [r3, #2]
 8003c92:	8821      	ldrh	r1, [r4, #0]
	ADCSAvgCounter++;
 8003c94:	4d8d      	ldr	r5, [pc, #564]	; (8003ecc <Idle_Works+0x24c>)
	POT2_ConvSum += ADC_Values[1];
 8003c96:	440b      	add	r3, r1
	ADCSAvgCounter++;
 8003c98:	7829      	ldrb	r1, [r5, #0]
	POT1_ConvSum += ADC_Values[0];
 8003c9a:	b292      	uxth	r2, r2
	ADCSAvgCounter++;
 8003c9c:	3101      	adds	r1, #1
 8003c9e:	b2c9      	uxtb	r1, r1
	POT2_ConvSum += ADC_Values[1];
 8003ca0:	b29b      	uxth	r3, r3
	if (ADCSAvgCounter == 16) {
 8003ca2:	2910      	cmp	r1, #16
	POT1_ConvSum += ADC_Values[0];
 8003ca4:	8002      	strh	r2, [r0, #0]
	POT2_ConvSum += ADC_Values[1];
 8003ca6:	8023      	strh	r3, [r4, #0]
	if (ADCSAvgCounter == 16) {
 8003ca8:	d04c      	beq.n	8003d44 <Idle_Works+0xc4>
	ADCSAvgCounter++;
 8003caa:	7029      	strb	r1, [r5, #0]
	if (check == 1) {
 8003cac:	4d88      	ldr	r5, [pc, #544]	; (8003ed0 <Idle_Works+0x250>)
 8003cae:	782b      	ldrb	r3, [r5, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	f040 8098 	bne.w	8003de8 <Idle_Works+0x168>
		if (PrintMode == Intro) {
 8003cb8:	4e86      	ldr	r6, [pc, #536]	; (8003ed4 <Idle_Works+0x254>)
 8003cba:	7832      	ldrb	r2, [r6, #0]
 8003cbc:	2a00      	cmp	r2, #0
 8003cbe:	d151      	bne.n	8003d64 <Idle_Works+0xe4>
			TransmitData[0] = 0x0A;			// new line
 8003cc0:	200a      	movs	r0, #10
 8003cc2:	4985      	ldr	r1, [pc, #532]	; (8003ed8 <Idle_Works+0x258>)
 8003cc4:	7008      	strb	r0, [r1, #0]
				TransmitData[i] = 0;
 8003cc6:	54ca      	strb	r2, [r1, r3]
			for (int i = 1; i < 128; i++) {
 8003cc8:	3301      	adds	r3, #1
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d1fb      	bne.n	8003cc6 <Idle_Works+0x46>
 8003cce:	2400      	movs	r4, #0
				strcat(TransmitData, StrArr[i]);
 8003cd0:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8003f10 <Idle_Works+0x290>
 8003cd4:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8003ed8 <Idle_Works+0x258>
				sprintf(str, "%d", ParamArray[i]);
 8003cd8:	4f80      	ldr	r7, [pc, #512]	; (8003edc <Idle_Works+0x25c>)
				strcat(TransmitData, StrArr[i]);
 8003cda:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8003cde:	4648      	mov	r0, r9
 8003ce0:	f000 fe0e 	bl	8004900 <strcat>
				sprintf(str, "%d", ParamArray[i]);
 8003ce4:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <Idle_Works+0x260>)
 8003ce6:	497f      	ldr	r1, [pc, #508]	; (8003ee4 <Idle_Works+0x264>)
 8003ce8:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8003cec:	4638      	mov	r0, r7
 8003cee:	f000 fde3 	bl	80048b8 <siprintf>
				strcat(str, CR);
 8003cf2:	497d      	ldr	r1, [pc, #500]	; (8003ee8 <Idle_Works+0x268>)
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f000 fe03 	bl	8004900 <strcat>
			for (int i = 0; i < NUMBER_OF_PARAMETERS; i++) {
 8003cfa:	3401      	adds	r4, #1
				strcat(TransmitData, str);
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	4648      	mov	r0, r9
 8003d00:	f000 fdfe 	bl	8004900 <strcat>
			for (int i = 0; i < NUMBER_OF_PARAMETERS; i++) {
 8003d04:	2c04      	cmp	r4, #4
 8003d06:	d1e8      	bne.n	8003cda <Idle_Works+0x5a>
			strcat(TransmitData, CR);
 8003d08:	4977      	ldr	r1, [pc, #476]	; (8003ee8 <Idle_Works+0x268>)
 8003d0a:	4873      	ldr	r0, [pc, #460]	; (8003ed8 <Idle_Works+0x258>)
 8003d0c:	f000 fdf8 	bl	8004900 <strcat>
			strcat(TransmitData, StrArr[NUMBER_OF_PARAMETERS]);
 8003d10:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003d14:	4870      	ldr	r0, [pc, #448]	; (8003ed8 <Idle_Works+0x258>)
 8003d16:	f000 fdf3 	bl	8004900 <strcat>
			CDC_Transmit_FS((uint8_t *) TransmitData, strlen(TransmitData));
 8003d1a:	486f      	ldr	r0, [pc, #444]	; (8003ed8 <Idle_Works+0x258>)
 8003d1c:	f7fc fa16 	bl	800014c <strlen>
 8003d20:	b281      	uxth	r1, r0
 8003d22:	486d      	ldr	r0, [pc, #436]	; (8003ed8 <Idle_Works+0x258>)
 8003d24:	f000 fbb4 	bl	8004490 <CDC_Transmit_FS>
			for (int i = 0; i < dataSize; i++) {
 8003d28:	4b70      	ldr	r3, [pc, #448]	; (8003eec <Idle_Works+0x26c>)
				ReceivedData[i] = 0;
 8003d2a:	4871      	ldr	r0, [pc, #452]	; (8003ef0 <Idle_Works+0x270>)
 8003d2c:	6819      	ldr	r1, [r3, #0]
			for (int i = 0; i < dataSize; i++) {
 8003d2e:	2300      	movs	r3, #0
 8003d30:	461a      	mov	r2, r3
 8003d32:	428b      	cmp	r3, r1
 8003d34:	d113      	bne.n	8003d5e <Idle_Works+0xde>
			PrintMode = Giris;
 8003d36:	2301      	movs	r3, #1
 8003d38:	7033      	strb	r3, [r6, #0]
			ParametreCount = 0;
 8003d3a:	4b6e      	ldr	r3, [pc, #440]	; (8003ef4 <Idle_Works+0x274>)
			check = 0;
 8003d3c:	702a      	strb	r2, [r5, #0]
			ParametreCount = 0;
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ADCSAvgCounter = 0;
 8003d44:	2100      	movs	r1, #0
		Pot1_ConvAvg = POT1_ConvSum >> 4;
 8003d46:	0912      	lsrs	r2, r2, #4
		ADCSAvgCounter = 0;
 8003d48:	7029      	strb	r1, [r5, #0]
		Pot1_ConvAvg=Pot1_ConvAvg+100;
 8003d4a:	4d6b      	ldr	r5, [pc, #428]	; (8003ef8 <Idle_Works+0x278>)
 8003d4c:	3264      	adds	r2, #100	; 0x64
 8003d4e:	802a      	strh	r2, [r5, #0]
		Pot2_ConvAvg = POT2_ConvSum >> 4;
 8003d50:	091b      	lsrs	r3, r3, #4
		Pot2_ConvAvg=Pot2_ConvAvg+100;
 8003d52:	4a6a      	ldr	r2, [pc, #424]	; (8003efc <Idle_Works+0x27c>)
 8003d54:	3364      	adds	r3, #100	; 0x64
 8003d56:	8013      	strh	r3, [r2, #0]
		POT1_ConvSum = 0;
 8003d58:	8001      	strh	r1, [r0, #0]
		POT2_ConvSum = 0;
 8003d5a:	8021      	strh	r1, [r4, #0]
 8003d5c:	e7a6      	b.n	8003cac <Idle_Works+0x2c>
				ReceivedData[i] = 0;
 8003d5e:	541a      	strb	r2, [r3, r0]
			for (int i = 0; i < dataSize; i++) {
 8003d60:	3301      	adds	r3, #1
 8003d62:	e7e6      	b.n	8003d32 <Idle_Works+0xb2>
		else if (PrintMode == Giris) {
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	d166      	bne.n	8003e36 <Idle_Works+0x1b6>
 8003d68:	2300      	movs	r3, #0
				TransmitData[i] = 0;
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4a5a      	ldr	r2, [pc, #360]	; (8003ed8 <Idle_Works+0x258>)
 8003d6e:	5499      	strb	r1, [r3, r2]
			for (int i = 0; i < 128; i++) {
 8003d70:	3301      	adds	r3, #1
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d1fb      	bne.n	8003d6e <Idle_Works+0xee>
			Rcv = atoi(ReceivedData);
 8003d76:	485e      	ldr	r0, [pc, #376]	; (8003ef0 <Idle_Works+0x270>)
 8003d78:	f000 fd67 	bl	800484a <atoi>
			for (int i = 0; i < dataSize; i++) {
 8003d7c:	4b5b      	ldr	r3, [pc, #364]	; (8003eec <Idle_Works+0x26c>)
				ReceivedData[i] = 0;
 8003d7e:	4c5c      	ldr	r4, [pc, #368]	; (8003ef0 <Idle_Works+0x270>)
 8003d80:	681a      	ldr	r2, [r3, #0]
			for (int i = 0; i < dataSize; i++) {
 8003d82:	2300      	movs	r3, #0
				ReceivedData[i] = 0;
 8003d84:	461f      	mov	r7, r3
			Rcv = atoi(ReceivedData);
 8003d86:	b281      	uxth	r1, r0
			for (int i = 0; i < dataSize; i++) {
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d12f      	bne.n	8003dec <Idle_Works+0x16c>
			if ( ((Rcv <= 100) && ParametreCount<2) || ((Rcv <= 5000) && ParametreCount>=2 ))			 {
 8003d8c:	2964      	cmp	r1, #100	; 0x64
 8003d8e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8003f10 <Idle_Works+0x290>
 8003d92:	4f58      	ldr	r7, [pc, #352]	; (8003ef4 <Idle_Works+0x274>)
 8003d94:	d82d      	bhi.n	8003df2 <Idle_Works+0x172>
 8003d96:	783b      	ldrb	r3, [r7, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d82e      	bhi.n	8003dfa <Idle_Works+0x17a>
				ScaleArray[ParametreCount] = Rcv;
 8003d9c:	4b58      	ldr	r3, [pc, #352]	; (8003f00 <Idle_Works+0x280>)
 8003d9e:	783a      	ldrb	r2, [r7, #0]
 8003da0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				sprintf(str, "%d", ScaleArray[ParametreCount]);
 8003da4:	b282      	uxth	r2, r0
 8003da6:	494f      	ldr	r1, [pc, #316]	; (8003ee4 <Idle_Works+0x264>)
 8003da8:	484c      	ldr	r0, [pc, #304]	; (8003edc <Idle_Works+0x25c>)
 8003daa:	f000 fd85 	bl	80048b8 <siprintf>
				strcat(TransmitData, str);
 8003dae:	494b      	ldr	r1, [pc, #300]	; (8003edc <Idle_Works+0x25c>)
 8003db0:	4849      	ldr	r0, [pc, #292]	; (8003ed8 <Idle_Works+0x258>)
 8003db2:	f000 fda5 	bl	8004900 <strcat>
				ParametreCount++;
 8003db6:	783c      	ldrb	r4, [r7, #0]
				strcat(TransmitData, CR);
 8003db8:	494b      	ldr	r1, [pc, #300]	; (8003ee8 <Idle_Works+0x268>)
				ParametreCount++;
 8003dba:	3401      	adds	r4, #1
 8003dbc:	b2e4      	uxtb	r4, r4
				strcat(TransmitData, CR);
 8003dbe:	4846      	ldr	r0, [pc, #280]	; (8003ed8 <Idle_Works+0x258>)
				ParametreCount++;
 8003dc0:	703c      	strb	r4, [r7, #0]
				strcat(TransmitData, CR);
 8003dc2:	f000 fd9d 	bl	8004900 <strcat>
				if (ParametreCount < NUMBER_OF_PARAMETERS)
 8003dc6:	2c03      	cmp	r4, #3
 8003dc8:	d82c      	bhi.n	8003e24 <Idle_Works+0x1a4>
					strcat(TransmitData,
 8003dca:	3404      	adds	r4, #4
 8003dcc:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
				strcat(TransmitData, StrArr[NUMBER_OF_PARAMETERS + ParametreCount]);
 8003dd0:	4841      	ldr	r0, [pc, #260]	; (8003ed8 <Idle_Works+0x258>)
 8003dd2:	f000 fd95 	bl	8004900 <strcat>
				CDC_Transmit_FS((uint8_t *) TransmitData, strlen(TransmitData));
 8003dd6:	4840      	ldr	r0, [pc, #256]	; (8003ed8 <Idle_Works+0x258>)
 8003dd8:	f7fc f9b8 	bl	800014c <strlen>
 8003ddc:	b281      	uxth	r1, r0
 8003dde:	483e      	ldr	r0, [pc, #248]	; (8003ed8 <Idle_Works+0x258>)
 8003de0:	f000 fb56 	bl	8004490 <CDC_Transmit_FS>
			check = 0;
 8003de4:	2300      	movs	r3, #0
			check = 0;
 8003de6:	702b      	strb	r3, [r5, #0]
 8003de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				ReceivedData[i] = 0;
 8003dec:	551f      	strb	r7, [r3, r4]
			for (int i = 0; i < dataSize; i++) {
 8003dee:	3301      	adds	r3, #1
 8003df0:	e7ca      	b.n	8003d88 <Idle_Works+0x108>
			if ( ((Rcv <= 100) && ParametreCount<2) || ((Rcv <= 5000) && ParametreCount>=2 ))			 {
 8003df2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003df6:	4299      	cmp	r1, r3
 8003df8:	d802      	bhi.n	8003e00 <Idle_Works+0x180>
 8003dfa:	783b      	ldrb	r3, [r7, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d8cd      	bhi.n	8003d9c <Idle_Works+0x11c>
				strcat(TransmitData, CR);
 8003e00:	4939      	ldr	r1, [pc, #228]	; (8003ee8 <Idle_Works+0x268>)
 8003e02:	4835      	ldr	r0, [pc, #212]	; (8003ed8 <Idle_Works+0x258>)
 8003e04:	f000 fd7c 	bl	8004900 <strcat>
				strcat(TransmitData, StrArr[NUMBER_OF_STRING - 3]);
 8003e08:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8003e0c:	4832      	ldr	r0, [pc, #200]	; (8003ed8 <Idle_Works+0x258>)
 8003e0e:	f000 fd77 	bl	8004900 <strcat>
				strcat(TransmitData, CR);
 8003e12:	4935      	ldr	r1, [pc, #212]	; (8003ee8 <Idle_Works+0x268>)
 8003e14:	4830      	ldr	r0, [pc, #192]	; (8003ed8 <Idle_Works+0x258>)
 8003e16:	f000 fd73 	bl	8004900 <strcat>
				strcat(TransmitData, StrArr[NUMBER_OF_PARAMETERS + ParametreCount]);
 8003e1a:	783b      	ldrb	r3, [r7, #0]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8003e22:	e7d5      	b.n	8003dd0 <Idle_Works+0x150>
					PrintMode = Kayit;
 8003e24:	2302      	movs	r3, #2
					strcat(TransmitData, CR);
 8003e26:	4930      	ldr	r1, [pc, #192]	; (8003ee8 <Idle_Works+0x268>)
 8003e28:	482b      	ldr	r0, [pc, #172]	; (8003ed8 <Idle_Works+0x258>)
					PrintMode = Kayit;
 8003e2a:	7033      	strb	r3, [r6, #0]
					strcat(TransmitData, CR);
 8003e2c:	f000 fd68 	bl	8004900 <strcat>
					strcat(TransmitData, StrArr[NUMBER_OF_STRING - 2]);
 8003e30:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8003e34:	e7cc      	b.n	8003dd0 <Idle_Works+0x150>
		else if (PrintMode == Kayit) {
 8003e36:	2a02      	cmp	r2, #2
 8003e38:	d1d6      	bne.n	8003de8 <Idle_Works+0x168>
 8003e3a:	2300      	movs	r3, #0
				TransmitData[i] = 0;
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <Idle_Works+0x258>)
 8003e40:	5499      	strb	r1, [r3, r2]
			for (int i = 0; i < 128; i++) {
 8003e42:	3301      	adds	r3, #1
 8003e44:	2b80      	cmp	r3, #128	; 0x80
 8003e46:	d1fb      	bne.n	8003e40 <Idle_Works+0x1c0>
			if (ReceivedData[0] == 'y') {
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <Idle_Works+0x270>)
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	2a79      	cmp	r2, #121	; 0x79
 8003e4e:	461a      	mov	r2, r3
 8003e50:	d12f      	bne.n	8003eb2 <Idle_Works+0x232>
				for (int i = 0; i < dataSize; i++) {
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <Idle_Works+0x26c>)
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	2300      	movs	r3, #0
					ReceivedData[i] = 0;
 8003e58:	4618      	mov	r0, r3
				for (int i = 0; i < dataSize; i++) {
 8003e5a:	428b      	cmp	r3, r1
 8003e5c:	d12c      	bne.n	8003eb8 <Idle_Works+0x238>
				ParamArray[0] = TIM2PERIOD / 100 * ScaleArray[0];
 8003e5e:	2064      	movs	r0, #100	; 0x64
 8003e60:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <Idle_Works+0x284>)
 8003e62:	4927      	ldr	r1, [pc, #156]	; (8003f00 <Idle_Works+0x280>)
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	880a      	ldrh	r2, [r1, #0]
 8003e68:	fbb3 f0f0 	udiv	r0, r3, r0
				ParamArray[1] = TIM2PERIOD / 100 * ScaleArray[1];
 8003e6c:	884b      	ldrh	r3, [r1, #2]
				ParamArray[0] = TIM2PERIOD / 100 * ScaleArray[0];
 8003e6e:	4342      	muls	r2, r0
 8003e70:	4c1b      	ldr	r4, [pc, #108]	; (8003ee0 <Idle_Works+0x260>)
				ParamArray[1] = TIM2PERIOD / 100 * ScaleArray[1];
 8003e72:	4343      	muls	r3, r0
				ParamArray[2] = ScaleArray[2];				// ms
 8003e74:	8888      	ldrh	r0, [r1, #4]
				ParamArray[3] = ScaleArray[3];				// ms
 8003e76:	88c9      	ldrh	r1, [r1, #6]
				ParamArray[0] = TIM2PERIOD / 100 * ScaleArray[0];
 8003e78:	b292      	uxth	r2, r2
				ParamArray[3] = ScaleArray[3];				// ms
 8003e7a:	80e1      	strh	r1, [r4, #6]
				DutyMAX = ParamArray[0];
 8003e7c:	4922      	ldr	r1, [pc, #136]	; (8003f08 <Idle_Works+0x288>)
				ParamArray[0] = TIM2PERIOD / 100 * ScaleArray[0];
 8003e7e:	8022      	strh	r2, [r4, #0]
				DutyMAX = ParamArray[0];
 8003e80:	800a      	strh	r2, [r1, #0]
				DutyMAX_Reverse = ParamArray[1];
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <Idle_Works+0x28c>)
				ParamArray[1] = TIM2PERIOD / 100 * ScaleArray[1];
 8003e84:	b29b      	uxth	r3, r3
				ParamArray[2] = ScaleArray[2];				// ms
 8003e86:	80a0      	strh	r0, [r4, #4]
				strcat(TransmitData, CR);
 8003e88:	4917      	ldr	r1, [pc, #92]	; (8003ee8 <Idle_Works+0x268>)
 8003e8a:	4813      	ldr	r0, [pc, #76]	; (8003ed8 <Idle_Works+0x258>)
				DutyMAX_Reverse = ParamArray[1];
 8003e8c:	8013      	strh	r3, [r2, #0]
				ParamArray[1] = TIM2PERIOD / 100 * ScaleArray[1];
 8003e8e:	8063      	strh	r3, [r4, #2]
				strcat(TransmitData, CR);
 8003e90:	f000 fd36 	bl	8004900 <strcat>
				strcat(TransmitData, StrArr[NUMBER_OF_STRING - 1]);
 8003e94:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <Idle_Works+0x290>)
 8003e96:	4810      	ldr	r0, [pc, #64]	; (8003ed8 <Idle_Works+0x258>)
 8003e98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003e9a:	f000 fd31 	bl	8004900 <strcat>
				CDC_Transmit_FS((uint8_t *) TransmitData, strlen(TransmitData));
 8003e9e:	480e      	ldr	r0, [pc, #56]	; (8003ed8 <Idle_Works+0x258>)
 8003ea0:	f7fc f954 	bl	800014c <strlen>
 8003ea4:	b281      	uxth	r1, r0
 8003ea6:	480c      	ldr	r0, [pc, #48]	; (8003ed8 <Idle_Works+0x258>)
 8003ea8:	f000 faf2 	bl	8004490 <CDC_Transmit_FS>
				SaveandExit(ParamArray);
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff feb7 	bl	8003c20 <SaveandExit>
			PrintMode = Intro;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	7033      	strb	r3, [r6, #0]
 8003eb6:	e796      	b.n	8003de6 <Idle_Works+0x166>
					ReceivedData[i] = 0;
 8003eb8:	54d0      	strb	r0, [r2, r3]
				for (int i = 0; i < dataSize; i++) {
 8003eba:	3301      	adds	r3, #1
 8003ebc:	e7cd      	b.n	8003e5a <Idle_Works+0x1da>
 8003ebe:	bf00      	nop
 8003ec0:	20000398 	.word	0x20000398
 8003ec4:	2000081c 	.word	0x2000081c
 8003ec8:	2000039a 	.word	0x2000039a
 8003ecc:	20000395 	.word	0x20000395
 8003ed0:	200004ad 	.word	0x200004ad
 8003ed4:	2000039d 	.word	0x2000039d
 8003ed8:	2000039f 	.word	0x2000039f
 8003edc:	20000430 	.word	0x20000430
 8003ee0:	2000071e 	.word	0x2000071e
 8003ee4:	080052c5 	.word	0x080052c5
 8003ee8:	080052c4 	.word	0x080052c4
 8003eec:	200004b0 	.word	0x200004b0
 8003ef0:	20000448 	.word	0x20000448
 8003ef4:	2000039c 	.word	0x2000039c
 8003ef8:	20000712 	.word	0x20000712
 8003efc:	20000756 	.word	0x20000756
 8003f00:	20000702 	.word	0x20000702
 8003f04:	20000714 	.word	0x20000714
 8003f08:	20000754 	.word	0x20000754
 8003f0c:	2000070a 	.word	0x2000070a
 8003f10:	20000728 	.word	0x20000728

08003f14 <main>:
{
 8003f14:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f16:	4d7a      	ldr	r5, [pc, #488]	; (8004100 <main+0x1ec>)
{
 8003f18:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8003f1a:	f7fc fbcd 	bl	80006b8 <HAL_Init>
  SystemClock_Config();
 8003f1e:	f7ff fde1 	bl	8003ae4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f22:	2210      	movs	r2, #16
 8003f24:	2100      	movs	r1, #0
 8003f26:	a80b      	add	r0, sp, #44	; 0x2c
 8003f28:	f000 fcbe 	bl	80048a8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003f2e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f30:	f043 0310 	orr.w	r3, r3, #16
 8003f34:	61ab      	str	r3, [r5, #24]
 8003f36:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003f38:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f44:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003f46:	486f      	ldr	r0, [pc, #444]	; (8004104 <main+0x1f0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f48:	f043 0320 	orr.w	r3, r3, #32
 8003f4c:	61ab      	str	r3, [r5, #24]
 8003f4e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	9302      	str	r3, [sp, #8]
 8003f58:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f5c:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	61ab      	str	r3, [r5, #24]
 8003f66:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f68:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	69ab      	ldr	r3, [r5, #24]
  hadc1.Instance = ADC1;
 8003f74:	4e64      	ldr	r6, [pc, #400]	; (8004108 <main+0x1f4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f76:	f043 0308 	orr.w	r3, r3, #8
 8003f7a:	61ab      	str	r3, [r5, #24]
 8003f7c:	69ab      	ldr	r3, [r5, #24]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	9304      	str	r3, [sp, #16]
 8003f84:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003f86:	f7fd f8fd 	bl	8001184 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f8e:	a90b      	add	r1, sp, #44	; 0x2c
 8003f90:	485c      	ldr	r0, [pc, #368]	; (8004104 <main+0x1f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f92:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f94:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f9c:	f7fd f80a 	bl	8000fb4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa0:	a90b      	add	r1, sp, #44	; 0x2c
 8003fa2:	485a      	ldr	r0, [pc, #360]	; (800410c <main+0x1f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fa4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fac:	f7fd f802 	bl	8000fb4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fb0:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003fb2:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fb4:	ea43 0308 	orr.w	r3, r3, r8
 8003fb8:	616b      	str	r3, [r5, #20]
 8003fba:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003fbc:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fbe:	ea03 0308 	and.w	r3, r3, r8
 8003fc2:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003fc4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fc6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003fc8:	f7fc fdd4 	bl	8000b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003fcc:	200b      	movs	r0, #11
 8003fce:	f7fc fe05 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8003fd2:	4b4f      	ldr	r3, [pc, #316]	; (8004110 <main+0x1fc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003fd4:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8003fd6:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fdc:	60b3      	str	r3, [r6, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fde:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003fe2:	f886 800c 	strb.w	r8, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fe6:	7534      	strb	r4, [r6, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fe8:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fea:	6074      	str	r4, [r6, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003fec:	940b      	str	r4, [sp, #44]	; 0x2c
 8003fee:	940c      	str	r4, [sp, #48]	; 0x30
 8003ff0:	940d      	str	r4, [sp, #52]	; 0x34
  hadc1.Init.NbrOfConversion = 2;
 8003ff2:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ff4:	f7fc fd2c 	bl	8000a50 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ff8:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ffa:	a90b      	add	r1, sp, #44	; 0x2c
 8003ffc:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ffe:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Channel = ADC_CHANNEL_1;
 8004000:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004004:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004008:	f7fc fbb6 	bl	8000778 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800400c:	a90b      	add	r1, sp, #44	; 0x2c
 800400e:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_2;
 8004010:	970b      	str	r7, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004012:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004014:	f7fc fbb0 	bl	8000778 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004018:	4621      	mov	r1, r4
 800401a:	2210      	movs	r2, #16
 800401c:	a807      	add	r0, sp, #28
 800401e:	f000 fc43 	bl	80048a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004022:	221c      	movs	r2, #28
 8004024:	4621      	mov	r1, r4
 8004026:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004028:	9405      	str	r4, [sp, #20]
 800402a:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800402c:	f000 fc3c 	bl	80048a8 <memset>
  htim2.Instance = TIM2;
 8004030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004034:	4d37      	ldr	r5, [pc, #220]	; (8004114 <main+0x200>)
  Alpha_State_Ptr = *Wait_Reverse;
 8004036:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8004138 <main+0x224>
  htim2.Init.Prescaler = 2;
 800403a:	e885 0088 	stmia.w	r5, {r3, r7}
  htim2.Init.Period = 16000;
 800403e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004042:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004044:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 16000;
 8004046:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004048:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800404a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800404c:	f7fe f8be 	bl	80021cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004054:	a907      	add	r1, sp, #28
 8004056:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004058:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800405a:	f7fe f983 	bl	8002364 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800405e:	4628      	mov	r0, r5
 8004060:	f7fe f8ce 	bl	8002200 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004064:	a905      	add	r1, sp, #20
 8004066:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004068:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800406a:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800406c:	f7fe fa66 	bl	800253c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004070:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004072:	4622      	mov	r2, r4
 8004074:	a90b      	add	r1, sp, #44	; 0x2c
 8004076:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004078:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800407a:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800407c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800407e:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004080:	f7fe f904 	bl	800228c <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004084:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004086:	a90b      	add	r1, sp, #44	; 0x2c
 8004088:	2204      	movs	r2, #4
 800408a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800408c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800408e:	f7fe f8fd 	bl	800228c <HAL_TIM_PWM_ConfigChannel>
  TIM2PERIOD=htim2.Init.Period = 1600;
 8004092:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8004096:	4a20      	ldr	r2, [pc, #128]	; (8004118 <main+0x204>)
  HAL_TIM_MspPostInit(&htim2);
 8004098:	4628      	mov	r0, r5
  TIM2PERIOD=htim2.Init.Period = 1600;
 800409a:	60eb      	str	r3, [r5, #12]
 800409c:	8013      	strh	r3, [r2, #0]
  HAL_TIM_MspPostInit(&htim2);
 800409e:	f000 f8d9 	bl	8004254 <HAL_TIM_MspPostInit>
  MX_USB_DEVICE_Init();
 80040a2:	f000 f97d 	bl	80043a0 <MX_USB_DEVICE_Init>
  Alpha_State_Ptr = *Wait_Reverse;
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <main+0x208>)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Values, 2);
 80040a8:	463a      	mov	r2, r7
 80040aa:	491d      	ldr	r1, [pc, #116]	; (8004120 <main+0x20c>)
 80040ac:	4630      	mov	r0, r6
  Alpha_State_Ptr = *Wait_Reverse;
 80040ae:	f8c8 3000 	str.w	r3, [r8]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Values, 2);
 80040b2:	f7fc fc1d 	bl	80008f0 <HAL_ADC_Start_DMA>
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE );
 80040b6:	682a      	ldr	r2, [r5, #0]
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80040b8:	4621      	mov	r1, r4
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE );
 80040ba:	68d3      	ldr	r3, [r2, #12]
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80040bc:	4628      	mov	r0, r5
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE );
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	60d3      	str	r3, [r2, #12]
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80040c4:	f7fe f9f0 	bl	80024a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80040c8:	4628      	mov	r0, r5
		if (_sysTickFlagScan) {
 80040ca:	4d16      	ldr	r5, [pc, #88]	; (8004124 <main+0x210>)
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80040cc:	2104      	movs	r1, #4
 80040ce:	f7fe f9eb 	bl	80024a8 <HAL_TIM_PWM_Start>
 80040d2:	462e      	mov	r6, r5
			if (_10msFlagScan) {
 80040d4:	4c14      	ldr	r4, [pc, #80]	; (8004128 <main+0x214>)
		if (_sysTickFlagScan) {
 80040d6:	782b      	ldrb	r3, [r5, #0]
 80040d8:	b903      	cbnz	r3, 80040dc <main+0x1c8>
 80040da:	e7fe      	b.n	80040da <main+0x1c6>
			Alpha_State_Ptr();
 80040dc:	f8d8 3000 	ldr.w	r3, [r8]
 80040e0:	4798      	blx	r3
			Idle_Works();
 80040e2:	f7ff fdcd 	bl	8003c80 <Idle_Works>
			if (_10msFlagScan) {
 80040e6:	7823      	ldrb	r3, [r4, #0]
 80040e8:	b103      	cbz	r3, 80040ec <main+0x1d8>
				__NOP();
 80040ea:	bf00      	nop
			_sysTickFlagScan=FALSE;
 80040ec:	2300      	movs	r3, #0
			_5msFlagScan=FALSE;
 80040ee:	4a0f      	ldr	r2, [pc, #60]	; (800412c <main+0x218>)
			_sysTickFlagScan=FALSE;
 80040f0:	7033      	strb	r3, [r6, #0]
			_5msFlagScan=FALSE;
 80040f2:	7013      	strb	r3, [r2, #0]
			_100msFlagScan=FALSE;
 80040f4:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <main+0x21c>)
			_10msFlagScan=FALSE;
 80040f6:	7023      	strb	r3, [r4, #0]
			_100msFlagScan=FALSE;
 80040f8:	7013      	strb	r3, [r2, #0]
			_1000msFlagScan=FALSE;
 80040fa:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <main+0x220>)
 80040fc:	7013      	strb	r3, [r2, #0]
 80040fe:	e7ea      	b.n	80040d6 <main+0x1c2>
 8004100:	40021000 	.word	0x40021000
 8004104:	40011000 	.word	0x40011000
 8004108:	20000768 	.word	0x20000768
 800410c:	40010c00 	.word	0x40010c00
 8004110:	40012400 	.word	0x40012400
 8004114:	200007dc 	.word	0x200007dc
 8004118:	20000714 	.word	0x20000714
 800411c:	0800388d 	.word	0x0800388d
 8004120:	2000081c 	.word	0x2000081c
 8004124:	2000070e 	.word	0x2000070e
 8004128:	20000700 	.word	0x20000700
 800412c:	20000716 	.word	0x20000716
 8004130:	2000075c 	.word	0x2000075c
 8004134:	20000727 	.word	0x20000727
 8004138:	20000760 	.word	0x20000760

0800413c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800413c:	4770      	bx	lr
	...

08004140 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_MspInit+0x3c>)
{
 8004142:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	619a      	str	r2, [r3, #24]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	f002 0201 	and.w	r2, r2, #1
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800415c:	61da      	str	r2, [r3, #28]
 800415e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004160:	4a07      	ldr	r2, [pc, #28]	; (8004180 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800416a:	6853      	ldr	r3, [r2, #4]
 800416c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004176:	b002      	add	sp, #8
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	40010000 	.word	0x40010000

08004184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004184:	b530      	push	{r4, r5, lr}
 8004186:	4605      	mov	r5, r0
 8004188:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418a:	2210      	movs	r2, #16
 800418c:	2100      	movs	r1, #0
 800418e:	a802      	add	r0, sp, #8
 8004190:	f000 fb8a 	bl	80048a8 <memset>
  if(hadc->Instance==ADC1)
 8004194:	682a      	ldr	r2, [r5, #0]
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_ADC_MspInit+0x88>)
 8004198:	429a      	cmp	r2, r3
 800419a:	d134      	bne.n	8004206 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800419c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80041a0:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a2:	481b      	ldr	r0, [pc, #108]	; (8004210 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a8:	619a      	str	r2, [r3, #24]
 80041aa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ac:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041ae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80041b2:	9200      	str	r2, [sp, #0]
 80041b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b6:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80041b8:	4c16      	ldr	r4, [pc, #88]	; (8004214 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ba:	f042 0204 	orr.w	r2, r2, #4
 80041be:	619a      	str	r2, [r3, #24]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80041ca:	2306      	movs	r3, #6
 80041cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ce:	2303      	movs	r3, #3
 80041d0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d2:	f7fc feef 	bl	8000fb4 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041de:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041e6:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80041e8:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80041ea:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ec:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80041ee:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041f0:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041f2:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80041f4:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80041f6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80041f8:	f7fc fd14 	bl	8000c24 <HAL_DMA_Init>
 80041fc:	b108      	cbz	r0, 8004202 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80041fe:	f7ff ff9d 	bl	800413c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004202:	622c      	str	r4, [r5, #32]
 8004204:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004206:	b007      	add	sp, #28
 8004208:	bd30      	pop	{r4, r5, pc}
 800420a:	bf00      	nop
 800420c:	40012400 	.word	0x40012400
 8004210:	40010800 	.word	0x40010800
 8004214:	20000798 	.word	0x20000798
 8004218:	40020008 	.word	0x40020008

0800421c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800421c:	6803      	ldr	r3, [r0, #0]
{
 800421e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d112      	bne.n	800424c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004226:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800422a:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800422c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004234:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004236:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004238:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004242:	f7fc fc97 	bl	8000b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004246:	201c      	movs	r0, #28
 8004248:	f7fc fcc8 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800424c:	b003      	add	sp, #12
 800424e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004254 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004254:	b510      	push	{r4, lr}
 8004256:	4604      	mov	r4, r0
 8004258:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800425a:	2210      	movs	r2, #16
 800425c:	2100      	movs	r1, #0
 800425e:	a802      	add	r0, sp, #8
 8004260:	f000 fb22 	bl	80048a8 <memset>
  if(htim->Instance==TIM2)
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d12f      	bne.n	80042cc <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004270:	699a      	ldr	r2, [r3, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004272:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004274:	f042 0204 	orr.w	r2, r2, #4
 8004278:	619a      	str	r2, [r3, #24]
 800427a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427e:	f002 0204 	and.w	r2, r2, #4
 8004282:	9200      	str	r2, [sp, #0]
 8004284:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004286:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004288:	4811      	ldr	r0, [pc, #68]	; (80042d0 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	619a      	str	r2, [r3, #24]
 8004290:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004292:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800429c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042a2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a4:	f7fc fe86 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042a8:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042aa:	480a      	ldr	r0, [pc, #40]	; (80042d4 <HAL_TIM_MspPostInit+0x80>)
 80042ac:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b6:	f7fc fe7d 	bl	8000fb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_TIM_MspPostInit+0x84>)
 80042bc:	6853      	ldr	r3, [r2, #4]
 80042be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80042cc:	b006      	add	sp, #24
 80042ce:	bd10      	pop	{r4, pc}
 80042d0:	40010800 	.word	0x40010800
 80042d4:	40010c00 	.word	0x40010c00
 80042d8:	40010000 	.word	0x40010000

080042dc <NMI_Handler>:
 80042dc:	4770      	bx	lr

080042de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042de:	e7fe      	b.n	80042de <HardFault_Handler>

080042e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042e0:	e7fe      	b.n	80042e0 <MemManage_Handler>

080042e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042e2:	e7fe      	b.n	80042e2 <BusFault_Handler>

080042e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e4:	e7fe      	b.n	80042e4 <UsageFault_Handler>

080042e6 <SVC_Handler>:
 80042e6:	4770      	bx	lr

080042e8 <DebugMon_Handler>:
 80042e8:	4770      	bx	lr

080042ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ea:	4770      	bx	lr

080042ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTickCountersUpdate();
 80042ee:	f7ff fc59 	bl	8003ba4 <SysTickCountersUpdate>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 80042f6:	f7fc b9f1 	b.w	80006dc <HAL_IncTick>
	...

080042fc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <DMA1_Channel1_IRQHandler+0x8>)
 80042fe:	f7fc bcff 	b.w	8000d00 <HAL_DMA_IRQHandler>
 8004302:	bf00      	nop
 8004304:	20000798 	.word	0x20000798

08004308 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800430a:	f7fd b877 	b.w	80013fc <HAL_PCD_IRQHandler>
 800430e:	bf00      	nop
 8004310:	20000be8 	.word	0x20000be8

08004314 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <TIM2_IRQHandler+0x8>)
 8004316:	f7fd be7e 	b.w	8002016 <HAL_TIM_IRQHandler>
 800431a:	bf00      	nop
 800431c:	200007dc 	.word	0x200007dc

08004320 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004320:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <_sbrk+0x2c>)
{
 8004324:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	b909      	cbnz	r1, 800432e <_sbrk+0xe>
		heap_end = &end;
 800432a:	4909      	ldr	r1, [pc, #36]	; (8004350 <_sbrk+0x30>)
 800432c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800432e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004330:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004332:	4402      	add	r2, r0
 8004334:	428a      	cmp	r2, r1
 8004336:	d906      	bls.n	8004346 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004338:	f000 fa8c 	bl	8004854 <__errno>
 800433c:	230c      	movs	r3, #12
 800433e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004346:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004348:	bd08      	pop	{r3, pc}
 800434a:	bf00      	nop
 800434c:	20000444 	.word	0x20000444
 8004350:	20001058 	.word	0x20001058

08004354 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <SystemInit+0x40>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	4a0d      	ldr	r2, [pc, #52]	; (8004398 <SystemInit+0x44>)
 8004362:	400a      	ands	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800436c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004370:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004378:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004380:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004382:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004386:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <SystemInit+0x48>)
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	f8ff0000 	.word	0xf8ff0000
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80043a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80043a2:	2200      	movs	r2, #0
 80043a4:	490e      	ldr	r1, [pc, #56]	; (80043e0 <MX_USB_DEVICE_Init+0x40>)
 80043a6:	480f      	ldr	r0, [pc, #60]	; (80043e4 <MX_USB_DEVICE_Init+0x44>)
 80043a8:	f7fe fe7e 	bl	80030a8 <USBD_Init>
 80043ac:	b108      	cbz	r0, 80043b2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80043ae:	f7ff fec5 	bl	800413c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80043b2:	490d      	ldr	r1, [pc, #52]	; (80043e8 <MX_USB_DEVICE_Init+0x48>)
 80043b4:	480b      	ldr	r0, [pc, #44]	; (80043e4 <MX_USB_DEVICE_Init+0x44>)
 80043b6:	f7fe fe8c 	bl	80030d2 <USBD_RegisterClass>
 80043ba:	b108      	cbz	r0, 80043c0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80043bc:	f7ff febe 	bl	800413c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80043c0:	490a      	ldr	r1, [pc, #40]	; (80043ec <MX_USB_DEVICE_Init+0x4c>)
 80043c2:	4808      	ldr	r0, [pc, #32]	; (80043e4 <MX_USB_DEVICE_Init+0x44>)
 80043c4:	f7fe fe2f 	bl	8003026 <USBD_CDC_RegisterInterface>
 80043c8:	b108      	cbz	r0, 80043ce <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80043ca:	f7ff feb7 	bl	800413c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80043ce:	4805      	ldr	r0, [pc, #20]	; (80043e4 <MX_USB_DEVICE_Init+0x44>)
 80043d0:	f7fe fe86 	bl	80030e0 <USBD_Start>
 80043d4:	b118      	cbz	r0, 80043de <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80043d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80043da:	f7ff beaf 	b.w	800413c <Error_Handler>
 80043de:	bd08      	pop	{r3, pc}
 80043e0:	20000134 	.word	0x20000134
 80043e4:	20000820 	.word	0x20000820
 80043e8:	20000008 	.word	0x20000008
 80043ec:	20000124 	.word	0x20000124

080043f0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80043f0:	2000      	movs	r0, #0
 80043f2:	4770      	bx	lr

080043f4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80043f4:	2000      	movs	r0, #0
 80043f6:	4770      	bx	lr

080043f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN 6 */
	dataSize = *Len;
 80043fa:	680b      	ldr	r3, [r1, #0]
 80043fc:	4d14      	ldr	r5, [pc, #80]	; (8004450 <CDC_Receive_FS+0x58>)
{
 80043fe:	4604      	mov	r4, r0
	dataSize = *Len;
 8004400:	602b      	str	r3, [r5, #0]
	if(HAL_GetTick() - time > 1000)
 8004402:	f7fc f977 	bl	80006f4 <HAL_GetTick>
 8004406:	4e13      	ldr	r6, [pc, #76]	; (8004454 <CDC_Receive_FS+0x5c>)
 8004408:	6833      	ldr	r3, [r6, #0]
 800440a:	1ac0      	subs	r0, r0, r3
 800440c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004410:	d908      	bls.n	8004424 <CDC_Receive_FS+0x2c>
	{
		Rxcount = 0;
 8004412:	2200      	movs	r2, #0
 8004414:	4621      	mov	r1, r4
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <CDC_Receive_FS+0x60>)
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	682a      	ldr	r2, [r5, #0]
		for(int i = 0; i < dataSize; i++)
		{
			ReceivedData[Rxcount++] = Buf[i];
 800441c:	4d0f      	ldr	r5, [pc, #60]	; (800445c <CDC_Receive_FS+0x64>)
 800441e:	4422      	add	r2, r4
		for(int i = 0; i < dataSize; i++)
 8004420:	4291      	cmp	r1, r2
 8004422:	d10e      	bne.n	8004442 <CDC_Receive_FS+0x4a>
		}
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004424:	4621      	mov	r1, r4
 8004426:	480e      	ldr	r0, [pc, #56]	; (8004460 <CDC_Receive_FS+0x68>)
 8004428:	f7fe fe0c 	bl	8003044 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800442c:	480c      	ldr	r0, [pc, #48]	; (8004460 <CDC_Receive_FS+0x68>)
 800442e:	f7fe fe28 	bl	8003082 <USBD_CDC_ReceivePacket>
	check = 1; //flag
 8004432:	2201      	movs	r2, #1
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <CDC_Receive_FS+0x6c>)
 8004436:	701a      	strb	r2, [r3, #0]
	time = HAL_GetTick();
 8004438:	f7fc f95c 	bl	80006f4 <HAL_GetTick>
 800443c:	6030      	str	r0, [r6, #0]
	return (USBD_OK);
  /* USER CODE END 6 */
}
 800443e:	2000      	movs	r0, #0
 8004440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ReceivedData[Rxcount++] = Buf[i];
 8004442:	7818      	ldrb	r0, [r3, #0]
 8004444:	1c47      	adds	r7, r0, #1
 8004446:	701f      	strb	r7, [r3, #0]
 8004448:	f811 7b01 	ldrb.w	r7, [r1], #1
 800444c:	542f      	strb	r7, [r5, r0]
 800444e:	e7e7      	b.n	8004420 <CDC_Receive_FS+0x28>
 8004450:	200004b0 	.word	0x200004b0
 8004454:	20000be4 	.word	0x20000be4
 8004458:	200004ac 	.word	0x200004ac
 800445c:	20000448 	.word	0x20000448
 8004460:	20000820 	.word	0x20000820
 8004464:	200004ad 	.word	0x200004ad

08004468 <CDC_Init_FS>:
{
 8004468:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800446a:	4c06      	ldr	r4, [pc, #24]	; (8004484 <CDC_Init_FS+0x1c>)
 800446c:	2200      	movs	r2, #0
 800446e:	4906      	ldr	r1, [pc, #24]	; (8004488 <CDC_Init_FS+0x20>)
 8004470:	4620      	mov	r0, r4
 8004472:	f7fe fddf 	bl	8003034 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004476:	4905      	ldr	r1, [pc, #20]	; (800448c <CDC_Init_FS+0x24>)
 8004478:	4620      	mov	r0, r4
 800447a:	f7fe fde3 	bl	8003044 <USBD_CDC_SetRxBuffer>
}
 800447e:	2000      	movs	r0, #0
 8004480:	bd10      	pop	{r4, pc}
 8004482:	bf00      	nop
 8004484:	20000820 	.word	0x20000820
 8004488:	20000b64 	.word	0x20000b64
 800448c:	20000ae4 	.word	0x20000ae4

08004490 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004490:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004492:	4c09      	ldr	r4, [pc, #36]	; (80044b8 <CDC_Transmit_FS+0x28>)
{
 8004494:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004496:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800449a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800449e:	b943      	cbnz	r3, 80044b2 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80044a0:	4601      	mov	r1, r0
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7fe fdc6 	bl	8003034 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80044a8:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80044aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80044ae:	f7fe bdcf 	b.w	8003050 <USBD_CDC_TransmitPacket>
}
 80044b2:	2001      	movs	r0, #1
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	bf00      	nop
 80044b8:	20000820 	.word	0x20000820

080044bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80044bc:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_PCD_MspInit+0x38>)
 80044c0:	6802      	ldr	r2, [r0, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d112      	bne.n	80044ec <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80044c6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80044ca:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044cc:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80044ce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044d2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044d4:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80044d6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044d8:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80044da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044e2:	f7fc fb47 	bl	8000b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80044e6:	2014      	movs	r0, #20
 80044e8:	f7fc fb78 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80044ec:	b003      	add	sp, #12
 80044ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80044f2:	bf00      	nop
 80044f4:	40005c00 	.word	0x40005c00

080044f8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80044f8:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80044fc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004500:	f7fe be05 	b.w	800310e <USBD_LL_SetupStage>

08004504 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004504:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004508:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800450c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004510:	f7fe be2a 	b.w	8003168 <USBD_LL_DataOutStage>

08004514 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004514:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800451e:	f7fe be5d 	b.w	80031dc <USBD_LL_DataInStage>

08004522 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004522:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004526:	f7fe bef1 	b.w	800330c <USBD_LL_SOF>

0800452a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800452a:	6883      	ldr	r3, [r0, #8]
{ 
 800452c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800452e:	2b02      	cmp	r3, #2
{ 
 8004530:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004532:	d001      	beq.n	8004538 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004534:	f7ff fe02 	bl	800413c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004538:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 800453c:	2101      	movs	r1, #1
 800453e:	f7fe fecf 	bl	80032e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004542:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8004546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800454a:	f7fe bea2 	b.w	8003292 <USBD_LL_Reset>
	...

08004550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004550:	b510      	push	{r4, lr}
 8004552:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004554:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004558:	f7fe fec5 	bl	80032e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800455c:	69a3      	ldr	r3, [r4, #24]
 800455e:	b123      	cbz	r3, 800456a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004560:	4a02      	ldr	r2, [pc, #8]	; (800456c <HAL_PCD_SuspendCallback+0x1c>)
 8004562:	6913      	ldr	r3, [r2, #16]
 8004564:	f043 0306 	orr.w	r3, r3, #6
 8004568:	6113      	str	r3, [r2, #16]
 800456a:	bd10      	pop	{r4, pc}
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004570:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8004574:	f7fe bec0 	b.w	80032f8 <USBD_LL_Resume>

08004578 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004578:	2302      	movs	r3, #2
 800457a:	2208      	movs	r2, #8
{
 800457c:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800457e:	491c      	ldr	r1, [pc, #112]	; (80045f0 <USBD_LL_Init+0x78>)
{
 8004580:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004582:	481c      	ldr	r0, [pc, #112]	; (80045f4 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004584:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004588:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 800458a:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 800458e:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004592:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004594:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004596:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004598:	f7fc fdff 	bl	800119a <HAL_PCD_Init>
 800459c:	b108      	cbz	r0, 80045a2 <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 800459e:	f7ff fdcd 	bl	800413c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2318      	movs	r3, #24
 80045a6:	4611      	mov	r1, r2
 80045a8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045ac:	f7fd f9b2 	bl	8001914 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80045b0:	2358      	movs	r3, #88	; 0x58
 80045b2:	2200      	movs	r2, #0
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045ba:	f7fd f9ab 	bl	8001914 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80045be:	23c0      	movs	r3, #192	; 0xc0
 80045c0:	2200      	movs	r2, #0
 80045c2:	2181      	movs	r1, #129	; 0x81
 80045c4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045c8:	f7fd f9a4 	bl	8001914 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80045cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80045d0:	2200      	movs	r2, #0
 80045d2:	2101      	movs	r1, #1
 80045d4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045d8:	f7fd f99c 	bl	8001914 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80045dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045e0:	2200      	movs	r2, #0
 80045e2:	2182      	movs	r1, #130	; 0x82
 80045e4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045e8:	f7fd f994 	bl	8001914 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80045ec:	2000      	movs	r0, #0
 80045ee:	bd10      	pop	{r4, pc}
 80045f0:	40005c00 	.word	0x40005c00
 80045f4:	20000be8 	.word	0x20000be8

080045f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80045f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80045fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045fe:	f7fc fe41 	bl	8001284 <HAL_PCD_Start>
 8004602:	2803      	cmp	r0, #3
 8004604:	bf9a      	itte	ls
 8004606:	4b02      	ldrls	r3, [pc, #8]	; (8004610 <USBD_LL_Start+0x18>)
 8004608:	5c18      	ldrbls	r0, [r3, r0]
 800460a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800460c:	bd08      	pop	{r3, pc}
 800460e:	bf00      	nop
 8004610:	080052d8 	.word	0x080052d8

08004614 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004614:	b510      	push	{r4, lr}
 8004616:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004618:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800461c:	4613      	mov	r3, r2
 800461e:	4622      	mov	r2, r4
 8004620:	f7fc fe5b 	bl	80012da <HAL_PCD_EP_Open>
 8004624:	2803      	cmp	r0, #3
 8004626:	bf9a      	itte	ls
 8004628:	4b01      	ldrls	r3, [pc, #4]	; (8004630 <USBD_LL_OpenEP+0x1c>)
 800462a:	5c18      	ldrbls	r0, [r3, r0]
 800462c:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800462e:	bd10      	pop	{r4, pc}
 8004630:	080052d8 	.word	0x080052d8

08004634 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004634:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004636:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800463a:	f7fc fe81 	bl	8001340 <HAL_PCD_EP_Close>
 800463e:	2803      	cmp	r0, #3
 8004640:	bf9a      	itte	ls
 8004642:	4b02      	ldrls	r3, [pc, #8]	; (800464c <USBD_LL_CloseEP+0x18>)
 8004644:	5c18      	ldrbls	r0, [r3, r0]
 8004646:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8004648:	bd08      	pop	{r3, pc}
 800464a:	bf00      	nop
 800464c:	080052d8 	.word	0x080052d8

08004650 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004650:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004652:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004656:	f7fd f8f7 	bl	8001848 <HAL_PCD_EP_SetStall>
 800465a:	2803      	cmp	r0, #3
 800465c:	bf9a      	itte	ls
 800465e:	4b02      	ldrls	r3, [pc, #8]	; (8004668 <USBD_LL_StallEP+0x18>)
 8004660:	5c18      	ldrbls	r0, [r3, r0]
 8004662:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8004664:	bd08      	pop	{r3, pc}
 8004666:	bf00      	nop
 8004668:	080052d8 	.word	0x080052d8

0800466c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800466c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800466e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004672:	f7fd f91d 	bl	80018b0 <HAL_PCD_EP_ClrStall>
 8004676:	2803      	cmp	r0, #3
 8004678:	bf9a      	itte	ls
 800467a:	4b02      	ldrls	r3, [pc, #8]	; (8004684 <USBD_LL_ClearStallEP+0x18>)
 800467c:	5c18      	ldrbls	r0, [r3, r0]
 800467e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8004680:	bd08      	pop	{r3, pc}
 8004682:	bf00      	nop
 8004684:	080052d8 	.word	0x080052d8

08004688 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004688:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800468a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800468e:	bf45      	ittet	mi
 8004690:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004694:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004698:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800469c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80046a0:	bf58      	it	pl
 80046a2:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 80046a6:	4770      	bx	lr

080046a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80046a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80046aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046ae:	f7fc fe00 	bl	80012b2 <HAL_PCD_SetAddress>
 80046b2:	2803      	cmp	r0, #3
 80046b4:	bf9a      	itte	ls
 80046b6:	4b02      	ldrls	r3, [pc, #8]	; (80046c0 <USBD_LL_SetUSBAddress+0x18>)
 80046b8:	5c18      	ldrbls	r0, [r3, r0]
 80046ba:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80046bc:	bd08      	pop	{r3, pc}
 80046be:	bf00      	nop
 80046c0:	080052d8 	.word	0x080052d8

080046c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80046c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046ca:	f7fc fe81 	bl	80013d0 <HAL_PCD_EP_Transmit>
 80046ce:	2803      	cmp	r0, #3
 80046d0:	bf9a      	itte	ls
 80046d2:	4b02      	ldrls	r3, [pc, #8]	; (80046dc <USBD_LL_Transmit+0x18>)
 80046d4:	5c18      	ldrbls	r0, [r3, r0]
 80046d6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80046d8:	bd08      	pop	{r3, pc}
 80046da:	bf00      	nop
 80046dc:	080052d8 	.word	0x080052d8

080046e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80046e2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046e6:	f7fc fe54 	bl	8001392 <HAL_PCD_EP_Receive>
 80046ea:	2803      	cmp	r0, #3
 80046ec:	bf9a      	itte	ls
 80046ee:	4b02      	ldrls	r3, [pc, #8]	; (80046f8 <USBD_LL_PrepareReceive+0x18>)
 80046f0:	5c18      	ldrbls	r0, [r3, r0]
 80046f2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 80046f4:	bd08      	pop	{r3, pc}
 80046f6:	bf00      	nop
 80046f8:	080052d8 	.word	0x080052d8

080046fc <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80046fc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004700:	f7fc be5f 	b.w	80013c2 <HAL_PCD_EP_GetRxCount>

08004704 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004704:	4800      	ldr	r0, [pc, #0]	; (8004708 <USBD_static_malloc+0x4>)
 8004706:	4770      	bx	lr
 8004708:	200004b4 	.word	0x200004b4

0800470c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800470c:	4770      	bx	lr

0800470e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800470e:	4770      	bx	lr

08004710 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004710:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004712:	4801      	ldr	r0, [pc, #4]	; (8004718 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004714:	800b      	strh	r3, [r1, #0]
}
 8004716:	4770      	bx	lr
 8004718:	20000150 	.word	0x20000150

0800471c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800471c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800471e:	4801      	ldr	r0, [pc, #4]	; (8004724 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004720:	800b      	strh	r3, [r1, #0]
}
 8004722:	4770      	bx	lr
 8004724:	20000164 	.word	0x20000164

08004728 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004728:	2300      	movs	r3, #0
{
 800472a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800472c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800472e:	b2dc      	uxtb	r4, r3
 8004730:	42a2      	cmp	r2, r4
 8004732:	d800      	bhi.n	8004736 <IntToUnicode+0xe>
  }
}
 8004734:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8004736:	0f04      	lsrs	r4, r0, #28
 8004738:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800473a:	bf94      	ite	ls
 800473c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800473e:	3437      	addhi	r4, #55	; 0x37
 8004740:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8004744:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8004748:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800474a:	7065      	strb	r5, [r4, #1]
 800474c:	3301      	adds	r3, #1
 800474e:	e7ee      	b.n	800472e <IntToUnicode+0x6>

08004750 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004750:	231a      	movs	r3, #26
{
 8004752:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004754:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <USBD_FS_SerialStrDescriptor+0x2c>)
 8004758:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800475a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800475c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800475e:	18c0      	adds	r0, r0, r3
 8004760:	d00a      	beq.n	8004778 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004764:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004766:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004768:	4906      	ldr	r1, [pc, #24]	; (8004784 <USBD_FS_SerialStrDescriptor+0x34>)
 800476a:	f7ff ffdd 	bl	8004728 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800476e:	2204      	movs	r2, #4
 8004770:	4905      	ldr	r1, [pc, #20]	; (8004788 <USBD_FS_SerialStrDescriptor+0x38>)
 8004772:	4620      	mov	r0, r4
 8004774:	f7ff ffd8 	bl	8004728 <IntToUnicode>
}
 8004778:	4804      	ldr	r0, [pc, #16]	; (800478c <USBD_FS_SerialStrDescriptor+0x3c>)
 800477a:	bd10      	pop	{r4, pc}
 800477c:	1ffff7e8 	.word	0x1ffff7e8
 8004780:	1ffff7ec 	.word	0x1ffff7ec
 8004784:	2000016a 	.word	0x2000016a
 8004788:	2000017a 	.word	0x2000017a
 800478c:	20000168 	.word	0x20000168

08004790 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004790:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004792:	4c04      	ldr	r4, [pc, #16]	; (80047a4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004794:	460a      	mov	r2, r1
 8004796:	4804      	ldr	r0, [pc, #16]	; (80047a8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004798:	4621      	mov	r1, r4
 800479a:	f7fe ffc0 	bl	800371e <USBD_GetString>
}
 800479e:	4620      	mov	r0, r4
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	bf00      	nop
 80047a4:	20000e54 	.word	0x20000e54
 80047a8:	080052f5 	.word	0x080052f5

080047ac <USBD_FS_ProductStrDescriptor>:
{
 80047ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80047ae:	4c04      	ldr	r4, [pc, #16]	; (80047c0 <USBD_FS_ProductStrDescriptor+0x14>)
 80047b0:	460a      	mov	r2, r1
 80047b2:	4804      	ldr	r0, [pc, #16]	; (80047c4 <USBD_FS_ProductStrDescriptor+0x18>)
 80047b4:	4621      	mov	r1, r4
 80047b6:	f7fe ffb2 	bl	800371e <USBD_GetString>
}
 80047ba:	4620      	mov	r0, r4
 80047bc:	bd10      	pop	{r4, pc}
 80047be:	bf00      	nop
 80047c0:	20000e54 	.word	0x20000e54
 80047c4:	08005308 	.word	0x08005308

080047c8 <USBD_FS_ConfigStrDescriptor>:
{
 80047c8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80047ca:	4c04      	ldr	r4, [pc, #16]	; (80047dc <USBD_FS_ConfigStrDescriptor+0x14>)
 80047cc:	460a      	mov	r2, r1
 80047ce:	4804      	ldr	r0, [pc, #16]	; (80047e0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80047d0:	4621      	mov	r1, r4
 80047d2:	f7fe ffa4 	bl	800371e <USBD_GetString>
}
 80047d6:	4620      	mov	r0, r4
 80047d8:	bd10      	pop	{r4, pc}
 80047da:	bf00      	nop
 80047dc:	20000e54 	.word	0x20000e54
 80047e0:	080052dc 	.word	0x080052dc

080047e4 <USBD_FS_InterfaceStrDescriptor>:
{
 80047e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80047e6:	4c04      	ldr	r4, [pc, #16]	; (80047f8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80047e8:	460a      	mov	r2, r1
 80047ea:	4804      	ldr	r0, [pc, #16]	; (80047fc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80047ec:	4621      	mov	r1, r4
 80047ee:	f7fe ff96 	bl	800371e <USBD_GetString>
}
 80047f2:	4620      	mov	r0, r4
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	bf00      	nop
 80047f8:	20000e54 	.word	0x20000e54
 80047fc:	080052e7 	.word	0x080052e7

08004800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004800:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004802:	e003      	b.n	800480c <LoopCopyDataInit>

08004804 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004806:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004808:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800480a:	3104      	adds	r1, #4

0800480c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800480c:	480a      	ldr	r0, [pc, #40]	; (8004838 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004810:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004812:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004814:	d3f6      	bcc.n	8004804 <CopyDataInit>
  ldr r2, =_sbss
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004818:	e002      	b.n	8004820 <LoopFillZerobss>

0800481a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800481a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800481c:	f842 3b04 	str.w	r3, [r2], #4

08004820 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004820:	4b08      	ldr	r3, [pc, #32]	; (8004844 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004822:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004824:	d3f9      	bcc.n	800481a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004826:	f7ff fd95 	bl	8004354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800482a:	f000 f819 	bl	8004860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800482e:	f7ff fb71 	bl	8003f14 <main>
  bx lr
 8004832:	4770      	bx	lr
  ldr r3, =_sidata
 8004834:	08005464 	.word	0x08005464
  ldr r0, =_sdata
 8004838:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800483c:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 8004840:	20000378 	.word	0x20000378
  ldr r3, = _ebss
 8004844:	20001058 	.word	0x20001058

08004848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004848:	e7fe      	b.n	8004848 <ADC1_2_IRQHandler>

0800484a <atoi>:
 800484a:	220a      	movs	r2, #10
 800484c:	2100      	movs	r1, #0
 800484e:	f000 b8e7 	b.w	8004a20 <strtol>
	...

08004854 <__errno>:
 8004854:	4b01      	ldr	r3, [pc, #4]	; (800485c <__errno+0x8>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000184 	.word	0x20000184

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	2500      	movs	r5, #0
 8004864:	4e0c      	ldr	r6, [pc, #48]	; (8004898 <__libc_init_array+0x38>)
 8004866:	4c0d      	ldr	r4, [pc, #52]	; (800489c <__libc_init_array+0x3c>)
 8004868:	1ba4      	subs	r4, r4, r6
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	42a5      	cmp	r5, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	f000 fd14 	bl	800529c <_init>
 8004874:	2500      	movs	r5, #0
 8004876:	4e0a      	ldr	r6, [pc, #40]	; (80048a0 <__libc_init_array+0x40>)
 8004878:	4c0a      	ldr	r4, [pc, #40]	; (80048a4 <__libc_init_array+0x44>)
 800487a:	1ba4      	subs	r4, r4, r6
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	42a5      	cmp	r5, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004888:	4798      	blx	r3
 800488a:	3501      	adds	r5, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004892:	4798      	blx	r3
 8004894:	3501      	adds	r5, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	0800545c 	.word	0x0800545c
 800489c:	0800545c 	.word	0x0800545c
 80048a0:	0800545c 	.word	0x0800545c
 80048a4:	08005460 	.word	0x08005460

080048a8 <memset>:
 80048a8:	4603      	mov	r3, r0
 80048aa:	4402      	add	r2, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <siprintf>:
 80048b8:	b40e      	push	{r1, r2, r3}
 80048ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 80048be:	b500      	push	{lr}
 80048c0:	b09c      	sub	sp, #112	; 0x70
 80048c2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80048c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048ca:	9104      	str	r1, [sp, #16]
 80048cc:	9107      	str	r1, [sp, #28]
 80048ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048d2:	ab1d      	add	r3, sp, #116	; 0x74
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	9006      	str	r0, [sp, #24]
 80048d8:	4808      	ldr	r0, [pc, #32]	; (80048fc <siprintf+0x44>)
 80048da:	f853 2b04 	ldr.w	r2, [r3], #4
 80048de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	a902      	add	r1, sp, #8
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	f000 f920 	bl	8004b2c <_svfiprintf_r>
 80048ec:	2200      	movs	r2, #0
 80048ee:	9b02      	ldr	r3, [sp, #8]
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	b01c      	add	sp, #112	; 0x70
 80048f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f8:	b003      	add	sp, #12
 80048fa:	4770      	bx	lr
 80048fc:	20000184 	.word	0x20000184

08004900 <strcat>:
 8004900:	4602      	mov	r2, r0
 8004902:	b510      	push	{r4, lr}
 8004904:	4613      	mov	r3, r2
 8004906:	781c      	ldrb	r4, [r3, #0]
 8004908:	3201      	adds	r2, #1
 800490a:	2c00      	cmp	r4, #0
 800490c:	d1fa      	bne.n	8004904 <strcat+0x4>
 800490e:	3b01      	subs	r3, #1
 8004910:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004914:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004918:	2a00      	cmp	r2, #0
 800491a:	d1f9      	bne.n	8004910 <strcat+0x10>
 800491c:	bd10      	pop	{r4, pc}

0800491e <_strtol_l.isra.0>:
 800491e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004922:	4680      	mov	r8, r0
 8004924:	4689      	mov	r9, r1
 8004926:	4692      	mov	sl, r2
 8004928:	461f      	mov	r7, r3
 800492a:	468b      	mov	fp, r1
 800492c:	465d      	mov	r5, fp
 800492e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004930:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004934:	f000 f88a 	bl	8004a4c <__locale_ctype_ptr_l>
 8004938:	4420      	add	r0, r4
 800493a:	7846      	ldrb	r6, [r0, #1]
 800493c:	f016 0608 	ands.w	r6, r6, #8
 8004940:	d10b      	bne.n	800495a <_strtol_l.isra.0+0x3c>
 8004942:	2c2d      	cmp	r4, #45	; 0x2d
 8004944:	d10b      	bne.n	800495e <_strtol_l.isra.0+0x40>
 8004946:	2601      	movs	r6, #1
 8004948:	782c      	ldrb	r4, [r5, #0]
 800494a:	f10b 0502 	add.w	r5, fp, #2
 800494e:	b167      	cbz	r7, 800496a <_strtol_l.isra.0+0x4c>
 8004950:	2f10      	cmp	r7, #16
 8004952:	d114      	bne.n	800497e <_strtol_l.isra.0+0x60>
 8004954:	2c30      	cmp	r4, #48	; 0x30
 8004956:	d00a      	beq.n	800496e <_strtol_l.isra.0+0x50>
 8004958:	e011      	b.n	800497e <_strtol_l.isra.0+0x60>
 800495a:	46ab      	mov	fp, r5
 800495c:	e7e6      	b.n	800492c <_strtol_l.isra.0+0xe>
 800495e:	2c2b      	cmp	r4, #43	; 0x2b
 8004960:	bf04      	itt	eq
 8004962:	782c      	ldrbeq	r4, [r5, #0]
 8004964:	f10b 0502 	addeq.w	r5, fp, #2
 8004968:	e7f1      	b.n	800494e <_strtol_l.isra.0+0x30>
 800496a:	2c30      	cmp	r4, #48	; 0x30
 800496c:	d127      	bne.n	80049be <_strtol_l.isra.0+0xa0>
 800496e:	782b      	ldrb	r3, [r5, #0]
 8004970:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004974:	2b58      	cmp	r3, #88	; 0x58
 8004976:	d14b      	bne.n	8004a10 <_strtol_l.isra.0+0xf2>
 8004978:	2710      	movs	r7, #16
 800497a:	786c      	ldrb	r4, [r5, #1]
 800497c:	3502      	adds	r5, #2
 800497e:	2e00      	cmp	r6, #0
 8004980:	bf0c      	ite	eq
 8004982:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004986:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800498a:	2200      	movs	r2, #0
 800498c:	fbb1 fef7 	udiv	lr, r1, r7
 8004990:	4610      	mov	r0, r2
 8004992:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004996:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800499a:	2b09      	cmp	r3, #9
 800499c:	d811      	bhi.n	80049c2 <_strtol_l.isra.0+0xa4>
 800499e:	461c      	mov	r4, r3
 80049a0:	42a7      	cmp	r7, r4
 80049a2:	dd1d      	ble.n	80049e0 <_strtol_l.isra.0+0xc2>
 80049a4:	1c53      	adds	r3, r2, #1
 80049a6:	d007      	beq.n	80049b8 <_strtol_l.isra.0+0x9a>
 80049a8:	4586      	cmp	lr, r0
 80049aa:	d316      	bcc.n	80049da <_strtol_l.isra.0+0xbc>
 80049ac:	d101      	bne.n	80049b2 <_strtol_l.isra.0+0x94>
 80049ae:	45a4      	cmp	ip, r4
 80049b0:	db13      	blt.n	80049da <_strtol_l.isra.0+0xbc>
 80049b2:	2201      	movs	r2, #1
 80049b4:	fb00 4007 	mla	r0, r0, r7, r4
 80049b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049bc:	e7eb      	b.n	8004996 <_strtol_l.isra.0+0x78>
 80049be:	270a      	movs	r7, #10
 80049c0:	e7dd      	b.n	800497e <_strtol_l.isra.0+0x60>
 80049c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80049c6:	2b19      	cmp	r3, #25
 80049c8:	d801      	bhi.n	80049ce <_strtol_l.isra.0+0xb0>
 80049ca:	3c37      	subs	r4, #55	; 0x37
 80049cc:	e7e8      	b.n	80049a0 <_strtol_l.isra.0+0x82>
 80049ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80049d2:	2b19      	cmp	r3, #25
 80049d4:	d804      	bhi.n	80049e0 <_strtol_l.isra.0+0xc2>
 80049d6:	3c57      	subs	r4, #87	; 0x57
 80049d8:	e7e2      	b.n	80049a0 <_strtol_l.isra.0+0x82>
 80049da:	f04f 32ff 	mov.w	r2, #4294967295
 80049de:	e7eb      	b.n	80049b8 <_strtol_l.isra.0+0x9a>
 80049e0:	1c53      	adds	r3, r2, #1
 80049e2:	d108      	bne.n	80049f6 <_strtol_l.isra.0+0xd8>
 80049e4:	2322      	movs	r3, #34	; 0x22
 80049e6:	4608      	mov	r0, r1
 80049e8:	f8c8 3000 	str.w	r3, [r8]
 80049ec:	f1ba 0f00 	cmp.w	sl, #0
 80049f0:	d107      	bne.n	8004a02 <_strtol_l.isra.0+0xe4>
 80049f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	b106      	cbz	r6, 80049fa <_strtol_l.isra.0+0xdc>
 80049f8:	4240      	negs	r0, r0
 80049fa:	f1ba 0f00 	cmp.w	sl, #0
 80049fe:	d00c      	beq.n	8004a1a <_strtol_l.isra.0+0xfc>
 8004a00:	b122      	cbz	r2, 8004a0c <_strtol_l.isra.0+0xee>
 8004a02:	3d01      	subs	r5, #1
 8004a04:	f8ca 5000 	str.w	r5, [sl]
 8004a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0c:	464d      	mov	r5, r9
 8004a0e:	e7f9      	b.n	8004a04 <_strtol_l.isra.0+0xe6>
 8004a10:	2430      	movs	r4, #48	; 0x30
 8004a12:	2f00      	cmp	r7, #0
 8004a14:	d1b3      	bne.n	800497e <_strtol_l.isra.0+0x60>
 8004a16:	2708      	movs	r7, #8
 8004a18:	e7b1      	b.n	800497e <_strtol_l.isra.0+0x60>
 8004a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004a20 <strtol>:
 8004a20:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <strtol+0x24>)
 8004a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a24:	681c      	ldr	r4, [r3, #0]
 8004a26:	4d08      	ldr	r5, [pc, #32]	; (8004a48 <strtol+0x28>)
 8004a28:	6a23      	ldr	r3, [r4, #32]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf08      	it	eq
 8004a2e:	462b      	moveq	r3, r5
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	460a      	mov	r2, r1
 8004a36:	4601      	mov	r1, r0
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7ff ff70 	bl	800491e <_strtol_l.isra.0>
 8004a3e:	b003      	add	sp, #12
 8004a40:	bd30      	pop	{r4, r5, pc}
 8004a42:	bf00      	nop
 8004a44:	20000184 	.word	0x20000184
 8004a48:	200001e8 	.word	0x200001e8

08004a4c <__locale_ctype_ptr_l>:
 8004a4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004a50:	4770      	bx	lr

08004a52 <__ascii_mbtowc>:
 8004a52:	b082      	sub	sp, #8
 8004a54:	b901      	cbnz	r1, 8004a58 <__ascii_mbtowc+0x6>
 8004a56:	a901      	add	r1, sp, #4
 8004a58:	b142      	cbz	r2, 8004a6c <__ascii_mbtowc+0x1a>
 8004a5a:	b14b      	cbz	r3, 8004a70 <__ascii_mbtowc+0x1e>
 8004a5c:	7813      	ldrb	r3, [r2, #0]
 8004a5e:	600b      	str	r3, [r1, #0]
 8004a60:	7812      	ldrb	r2, [r2, #0]
 8004a62:	1c10      	adds	r0, r2, #0
 8004a64:	bf18      	it	ne
 8004a66:	2001      	movne	r0, #1
 8004a68:	b002      	add	sp, #8
 8004a6a:	4770      	bx	lr
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	e7fb      	b.n	8004a68 <__ascii_mbtowc+0x16>
 8004a70:	f06f 0001 	mvn.w	r0, #1
 8004a74:	e7f8      	b.n	8004a68 <__ascii_mbtowc+0x16>

08004a76 <__ssputs_r>:
 8004a76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7a:	688e      	ldr	r6, [r1, #8]
 8004a7c:	4682      	mov	sl, r0
 8004a7e:	429e      	cmp	r6, r3
 8004a80:	460c      	mov	r4, r1
 8004a82:	4691      	mov	r9, r2
 8004a84:	4698      	mov	r8, r3
 8004a86:	d835      	bhi.n	8004af4 <__ssputs_r+0x7e>
 8004a88:	898a      	ldrh	r2, [r1, #12]
 8004a8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a8e:	d031      	beq.n	8004af4 <__ssputs_r+0x7e>
 8004a90:	2302      	movs	r3, #2
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	6909      	ldr	r1, [r1, #16]
 8004a96:	1a6f      	subs	r7, r5, r1
 8004a98:	6965      	ldr	r5, [r4, #20]
 8004a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a9e:	fb95 f5f3 	sdiv	r5, r5, r3
 8004aa2:	f108 0301 	add.w	r3, r8, #1
 8004aa6:	443b      	add	r3, r7
 8004aa8:	429d      	cmp	r5, r3
 8004aaa:	bf38      	it	cc
 8004aac:	461d      	movcc	r5, r3
 8004aae:	0553      	lsls	r3, r2, #21
 8004ab0:	d531      	bpl.n	8004b16 <__ssputs_r+0xa0>
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f000 fb52 	bl	800515c <_malloc_r>
 8004ab8:	4606      	mov	r6, r0
 8004aba:	b950      	cbnz	r0, 8004ad2 <__ssputs_r+0x5c>
 8004abc:	230c      	movs	r3, #12
 8004abe:	f8ca 3000 	str.w	r3, [sl]
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad2:	463a      	mov	r2, r7
 8004ad4:	6921      	ldr	r1, [r4, #16]
 8004ad6:	f000 fad0 	bl	800507a <memcpy>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	6126      	str	r6, [r4, #16]
 8004ae8:	443e      	add	r6, r7
 8004aea:	6026      	str	r6, [r4, #0]
 8004aec:	4646      	mov	r6, r8
 8004aee:	6165      	str	r5, [r4, #20]
 8004af0:	1bed      	subs	r5, r5, r7
 8004af2:	60a5      	str	r5, [r4, #8]
 8004af4:	4546      	cmp	r6, r8
 8004af6:	bf28      	it	cs
 8004af8:	4646      	movcs	r6, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	4632      	mov	r2, r6
 8004afe:	6820      	ldr	r0, [r4, #0]
 8004b00:	f000 fac6 	bl	8005090 <memmove>
 8004b04:	68a3      	ldr	r3, [r4, #8]
 8004b06:	2000      	movs	r0, #0
 8004b08:	1b9b      	subs	r3, r3, r6
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	441e      	add	r6, r3
 8004b10:	6026      	str	r6, [r4, #0]
 8004b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b16:	462a      	mov	r2, r5
 8004b18:	f000 fb7e 	bl	8005218 <_realloc_r>
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d1e1      	bne.n	8004ae6 <__ssputs_r+0x70>
 8004b22:	6921      	ldr	r1, [r4, #16]
 8004b24:	4650      	mov	r0, sl
 8004b26:	f000 facd 	bl	80050c4 <_free_r>
 8004b2a:	e7c7      	b.n	8004abc <__ssputs_r+0x46>

08004b2c <_svfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	b09d      	sub	sp, #116	; 0x74
 8004b32:	9303      	str	r3, [sp, #12]
 8004b34:	898b      	ldrh	r3, [r1, #12]
 8004b36:	4680      	mov	r8, r0
 8004b38:	061c      	lsls	r4, r3, #24
 8004b3a:	460d      	mov	r5, r1
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	d50f      	bpl.n	8004b60 <_svfiprintf_r+0x34>
 8004b40:	690b      	ldr	r3, [r1, #16]
 8004b42:	b96b      	cbnz	r3, 8004b60 <_svfiprintf_r+0x34>
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	f000 fb09 	bl	800515c <_malloc_r>
 8004b4a:	6028      	str	r0, [r5, #0]
 8004b4c:	6128      	str	r0, [r5, #16]
 8004b4e:	b928      	cbnz	r0, 8004b5c <_svfiprintf_r+0x30>
 8004b50:	230c      	movs	r3, #12
 8004b52:	f8c8 3000 	str.w	r3, [r8]
 8004b56:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5a:	e0c4      	b.n	8004ce6 <_svfiprintf_r+0x1ba>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	616b      	str	r3, [r5, #20]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
 8004b64:	2320      	movs	r3, #32
 8004b66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b6a:	2330      	movs	r3, #48	; 0x30
 8004b6c:	f04f 0b01 	mov.w	fp, #1
 8004b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b74:	4637      	mov	r7, r6
 8004b76:	463c      	mov	r4, r7
 8004b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d13c      	bne.n	8004bfa <_svfiprintf_r+0xce>
 8004b80:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b84:	d00b      	beq.n	8004b9e <_svfiprintf_r+0x72>
 8004b86:	4653      	mov	r3, sl
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	f7ff ff72 	bl	8004a76 <__ssputs_r>
 8004b92:	3001      	adds	r0, #1
 8004b94:	f000 80a2 	beq.w	8004cdc <_svfiprintf_r+0x1b0>
 8004b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9a:	4453      	add	r3, sl
 8004b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9e:	783b      	ldrb	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 809b 	beq.w	8004cdc <_svfiprintf_r+0x1b0>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bac:	9304      	str	r3, [sp, #16]
 8004bae:	9307      	str	r3, [sp, #28]
 8004bb0:	9205      	str	r2, [sp, #20]
 8004bb2:	9306      	str	r3, [sp, #24]
 8004bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004bba:	2205      	movs	r2, #5
 8004bbc:	7821      	ldrb	r1, [r4, #0]
 8004bbe:	4850      	ldr	r0, [pc, #320]	; (8004d00 <_svfiprintf_r+0x1d4>)
 8004bc0:	f000 fa4d 	bl	800505e <memchr>
 8004bc4:	1c67      	adds	r7, r4, #1
 8004bc6:	9b04      	ldr	r3, [sp, #16]
 8004bc8:	b9d8      	cbnz	r0, 8004c02 <_svfiprintf_r+0xd6>
 8004bca:	06d9      	lsls	r1, r3, #27
 8004bcc:	bf44      	itt	mi
 8004bce:	2220      	movmi	r2, #32
 8004bd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bd4:	071a      	lsls	r2, r3, #28
 8004bd6:	bf44      	itt	mi
 8004bd8:	222b      	movmi	r2, #43	; 0x2b
 8004bda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bde:	7822      	ldrb	r2, [r4, #0]
 8004be0:	2a2a      	cmp	r2, #42	; 0x2a
 8004be2:	d016      	beq.n	8004c12 <_svfiprintf_r+0xe6>
 8004be4:	2100      	movs	r1, #0
 8004be6:	200a      	movs	r0, #10
 8004be8:	9a07      	ldr	r2, [sp, #28]
 8004bea:	4627      	mov	r7, r4
 8004bec:	783b      	ldrb	r3, [r7, #0]
 8004bee:	3401      	adds	r4, #1
 8004bf0:	3b30      	subs	r3, #48	; 0x30
 8004bf2:	2b09      	cmp	r3, #9
 8004bf4:	d950      	bls.n	8004c98 <_svfiprintf_r+0x16c>
 8004bf6:	b1c9      	cbz	r1, 8004c2c <_svfiprintf_r+0x100>
 8004bf8:	e011      	b.n	8004c1e <_svfiprintf_r+0xf2>
 8004bfa:	2b25      	cmp	r3, #37	; 0x25
 8004bfc:	d0c0      	beq.n	8004b80 <_svfiprintf_r+0x54>
 8004bfe:	4627      	mov	r7, r4
 8004c00:	e7b9      	b.n	8004b76 <_svfiprintf_r+0x4a>
 8004c02:	4a3f      	ldr	r2, [pc, #252]	; (8004d00 <_svfiprintf_r+0x1d4>)
 8004c04:	463c      	mov	r4, r7
 8004c06:	1a80      	subs	r0, r0, r2
 8004c08:	fa0b f000 	lsl.w	r0, fp, r0
 8004c0c:	4318      	orrs	r0, r3
 8004c0e:	9004      	str	r0, [sp, #16]
 8004c10:	e7d3      	b.n	8004bba <_svfiprintf_r+0x8e>
 8004c12:	9a03      	ldr	r2, [sp, #12]
 8004c14:	1d11      	adds	r1, r2, #4
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	9103      	str	r1, [sp, #12]
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	db01      	blt.n	8004c22 <_svfiprintf_r+0xf6>
 8004c1e:	9207      	str	r2, [sp, #28]
 8004c20:	e004      	b.n	8004c2c <_svfiprintf_r+0x100>
 8004c22:	4252      	negs	r2, r2
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	9207      	str	r2, [sp, #28]
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	783b      	ldrb	r3, [r7, #0]
 8004c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c30:	d10d      	bne.n	8004c4e <_svfiprintf_r+0x122>
 8004c32:	787b      	ldrb	r3, [r7, #1]
 8004c34:	1c79      	adds	r1, r7, #1
 8004c36:	2b2a      	cmp	r3, #42	; 0x2a
 8004c38:	d132      	bne.n	8004ca0 <_svfiprintf_r+0x174>
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	3702      	adds	r7, #2
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	9203      	str	r2, [sp, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bfb8      	it	lt
 8004c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	4c2d      	ldr	r4, [pc, #180]	; (8004d04 <_svfiprintf_r+0x1d8>)
 8004c50:	2203      	movs	r2, #3
 8004c52:	7839      	ldrb	r1, [r7, #0]
 8004c54:	4620      	mov	r0, r4
 8004c56:	f000 fa02 	bl	800505e <memchr>
 8004c5a:	b138      	cbz	r0, 8004c6c <_svfiprintf_r+0x140>
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	1b00      	subs	r0, r0, r4
 8004c60:	fa03 f000 	lsl.w	r0, r3, r0
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	3701      	adds	r7, #1
 8004c68:	4303      	orrs	r3, r0
 8004c6a:	9304      	str	r3, [sp, #16]
 8004c6c:	7839      	ldrb	r1, [r7, #0]
 8004c6e:	2206      	movs	r2, #6
 8004c70:	4825      	ldr	r0, [pc, #148]	; (8004d08 <_svfiprintf_r+0x1dc>)
 8004c72:	1c7e      	adds	r6, r7, #1
 8004c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c78:	f000 f9f1 	bl	800505e <memchr>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d035      	beq.n	8004cec <_svfiprintf_r+0x1c0>
 8004c80:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <_svfiprintf_r+0x1e0>)
 8004c82:	b9fb      	cbnz	r3, 8004cc4 <_svfiprintf_r+0x198>
 8004c84:	9b03      	ldr	r3, [sp, #12]
 8004c86:	3307      	adds	r3, #7
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	9303      	str	r3, [sp, #12]
 8004c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c92:	444b      	add	r3, r9
 8004c94:	9309      	str	r3, [sp, #36]	; 0x24
 8004c96:	e76d      	b.n	8004b74 <_svfiprintf_r+0x48>
 8004c98:	fb00 3202 	mla	r2, r0, r2, r3
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	e7a4      	b.n	8004bea <_svfiprintf_r+0xbe>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	240a      	movs	r4, #10
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	9305      	str	r3, [sp, #20]
 8004ca8:	460f      	mov	r7, r1
 8004caa:	783a      	ldrb	r2, [r7, #0]
 8004cac:	3101      	adds	r1, #1
 8004cae:	3a30      	subs	r2, #48	; 0x30
 8004cb0:	2a09      	cmp	r2, #9
 8004cb2:	d903      	bls.n	8004cbc <_svfiprintf_r+0x190>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ca      	beq.n	8004c4e <_svfiprintf_r+0x122>
 8004cb8:	9005      	str	r0, [sp, #20]
 8004cba:	e7c8      	b.n	8004c4e <_svfiprintf_r+0x122>
 8004cbc:	fb04 2000 	mla	r0, r4, r0, r2
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e7f1      	b.n	8004ca8 <_svfiprintf_r+0x17c>
 8004cc4:	ab03      	add	r3, sp, #12
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	462a      	mov	r2, r5
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <_svfiprintf_r+0x1e4>)
 8004ccc:	a904      	add	r1, sp, #16
 8004cce:	4640      	mov	r0, r8
 8004cd0:	f3af 8000 	nop.w
 8004cd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004cd8:	4681      	mov	r9, r0
 8004cda:	d1d9      	bne.n	8004c90 <_svfiprintf_r+0x164>
 8004cdc:	89ab      	ldrh	r3, [r5, #12]
 8004cde:	065b      	lsls	r3, r3, #25
 8004ce0:	f53f af39 	bmi.w	8004b56 <_svfiprintf_r+0x2a>
 8004ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce6:	b01d      	add	sp, #116	; 0x74
 8004ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cec:	ab03      	add	r3, sp, #12
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <_svfiprintf_r+0x1e4>)
 8004cf4:	a904      	add	r1, sp, #16
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f000 f884 	bl	8004e04 <_printf_i>
 8004cfc:	e7ea      	b.n	8004cd4 <_svfiprintf_r+0x1a8>
 8004cfe:	bf00      	nop
 8004d00:	08005328 	.word	0x08005328
 8004d04:	0800532e 	.word	0x0800532e
 8004d08:	08005332 	.word	0x08005332
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	08004a77 	.word	0x08004a77

08004d14 <_printf_common>:
 8004d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	4691      	mov	r9, r2
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	688a      	ldr	r2, [r1, #8]
 8004d1e:	690b      	ldr	r3, [r1, #16]
 8004d20:	4606      	mov	r6, r0
 8004d22:	4293      	cmp	r3, r2
 8004d24:	bfb8      	it	lt
 8004d26:	4613      	movlt	r3, r2
 8004d28:	f8c9 3000 	str.w	r3, [r9]
 8004d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d30:	460c      	mov	r4, r1
 8004d32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d36:	b112      	cbz	r2, 8004d3e <_printf_common+0x2a>
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f8c9 3000 	str.w	r3, [r9]
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	0699      	lsls	r1, r3, #26
 8004d42:	bf42      	ittt	mi
 8004d44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d48:	3302      	addmi	r3, #2
 8004d4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004d4e:	6825      	ldr	r5, [r4, #0]
 8004d50:	f015 0506 	ands.w	r5, r5, #6
 8004d54:	d107      	bne.n	8004d66 <_printf_common+0x52>
 8004d56:	f104 0a19 	add.w	sl, r4, #25
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	429d      	cmp	r5, r3
 8004d64:	db2a      	blt.n	8004dbc <_printf_common+0xa8>
 8004d66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	3300      	adds	r3, #0
 8004d6e:	bf18      	it	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	0692      	lsls	r2, r2, #26
 8004d74:	d42f      	bmi.n	8004dd6 <_printf_common+0xc2>
 8004d76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	47c0      	blx	r8
 8004d80:	3001      	adds	r0, #1
 8004d82:	d022      	beq.n	8004dca <_printf_common+0xb6>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	68e5      	ldr	r5, [r4, #12]
 8004d88:	f003 0306 	and.w	r3, r3, #6
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	bf18      	it	ne
 8004d90:	2500      	movne	r5, #0
 8004d92:	f8d9 2000 	ldr.w	r2, [r9]
 8004d96:	f04f 0900 	mov.w	r9, #0
 8004d9a:	bf08      	it	eq
 8004d9c:	1aad      	subeq	r5, r5, r2
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	6922      	ldr	r2, [r4, #16]
 8004da2:	bf08      	it	eq
 8004da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da8:	4293      	cmp	r3, r2
 8004daa:	bfc4      	itt	gt
 8004dac:	1a9b      	subgt	r3, r3, r2
 8004dae:	18ed      	addgt	r5, r5, r3
 8004db0:	341a      	adds	r4, #26
 8004db2:	454d      	cmp	r5, r9
 8004db4:	d11b      	bne.n	8004dee <_printf_common+0xda>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4652      	mov	r2, sl
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d103      	bne.n	8004dd2 <_printf_common+0xbe>
 8004dca:	f04f 30ff 	mov.w	r0, #4294967295
 8004dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd2:	3501      	adds	r5, #1
 8004dd4:	e7c1      	b.n	8004d5a <_printf_common+0x46>
 8004dd6:	2030      	movs	r0, #48	; 0x30
 8004dd8:	18e1      	adds	r1, r4, r3
 8004dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de4:	4422      	add	r2, r4
 8004de6:	3302      	adds	r3, #2
 8004de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dec:	e7c3      	b.n	8004d76 <_printf_common+0x62>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4622      	mov	r2, r4
 8004df2:	4639      	mov	r1, r7
 8004df4:	4630      	mov	r0, r6
 8004df6:	47c0      	blx	r8
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d0e6      	beq.n	8004dca <_printf_common+0xb6>
 8004dfc:	f109 0901 	add.w	r9, r9, #1
 8004e00:	e7d7      	b.n	8004db2 <_printf_common+0x9e>
	...

08004e04 <_printf_i>:
 8004e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e08:	4617      	mov	r7, r2
 8004e0a:	7e0a      	ldrb	r2, [r1, #24]
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	2a6e      	cmp	r2, #110	; 0x6e
 8004e10:	4698      	mov	r8, r3
 8004e12:	4606      	mov	r6, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e18:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004e1c:	f000 80bc 	beq.w	8004f98 <_printf_i+0x194>
 8004e20:	d81a      	bhi.n	8004e58 <_printf_i+0x54>
 8004e22:	2a63      	cmp	r2, #99	; 0x63
 8004e24:	d02e      	beq.n	8004e84 <_printf_i+0x80>
 8004e26:	d80a      	bhi.n	8004e3e <_printf_i+0x3a>
 8004e28:	2a00      	cmp	r2, #0
 8004e2a:	f000 80c8 	beq.w	8004fbe <_printf_i+0x1ba>
 8004e2e:	2a58      	cmp	r2, #88	; 0x58
 8004e30:	f000 808a 	beq.w	8004f48 <_printf_i+0x144>
 8004e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004e3c:	e02a      	b.n	8004e94 <_printf_i+0x90>
 8004e3e:	2a64      	cmp	r2, #100	; 0x64
 8004e40:	d001      	beq.n	8004e46 <_printf_i+0x42>
 8004e42:	2a69      	cmp	r2, #105	; 0x69
 8004e44:	d1f6      	bne.n	8004e34 <_printf_i+0x30>
 8004e46:	6821      	ldr	r1, [r4, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e4e:	d023      	beq.n	8004e98 <_printf_i+0x94>
 8004e50:	1d11      	adds	r1, r2, #4
 8004e52:	6019      	str	r1, [r3, #0]
 8004e54:	6813      	ldr	r3, [r2, #0]
 8004e56:	e027      	b.n	8004ea8 <_printf_i+0xa4>
 8004e58:	2a73      	cmp	r2, #115	; 0x73
 8004e5a:	f000 80b4 	beq.w	8004fc6 <_printf_i+0x1c2>
 8004e5e:	d808      	bhi.n	8004e72 <_printf_i+0x6e>
 8004e60:	2a6f      	cmp	r2, #111	; 0x6f
 8004e62:	d02a      	beq.n	8004eba <_printf_i+0xb6>
 8004e64:	2a70      	cmp	r2, #112	; 0x70
 8004e66:	d1e5      	bne.n	8004e34 <_printf_i+0x30>
 8004e68:	680a      	ldr	r2, [r1, #0]
 8004e6a:	f042 0220 	orr.w	r2, r2, #32
 8004e6e:	600a      	str	r2, [r1, #0]
 8004e70:	e003      	b.n	8004e7a <_printf_i+0x76>
 8004e72:	2a75      	cmp	r2, #117	; 0x75
 8004e74:	d021      	beq.n	8004eba <_printf_i+0xb6>
 8004e76:	2a78      	cmp	r2, #120	; 0x78
 8004e78:	d1dc      	bne.n	8004e34 <_printf_i+0x30>
 8004e7a:	2278      	movs	r2, #120	; 0x78
 8004e7c:	496f      	ldr	r1, [pc, #444]	; (800503c <_printf_i+0x238>)
 8004e7e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004e82:	e064      	b.n	8004f4e <_printf_i+0x14a>
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004e8a:	1d11      	adds	r1, r2, #4
 8004e8c:	6019      	str	r1, [r3, #0]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0a3      	b.n	8004fe0 <_printf_i+0x1dc>
 8004e98:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004e9c:	f102 0104 	add.w	r1, r2, #4
 8004ea0:	6019      	str	r1, [r3, #0]
 8004ea2:	d0d7      	beq.n	8004e54 <_printf_i+0x50>
 8004ea4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da03      	bge.n	8004eb4 <_printf_i+0xb0>
 8004eac:	222d      	movs	r2, #45	; 0x2d
 8004eae:	425b      	negs	r3, r3
 8004eb0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004eb4:	4962      	ldr	r1, [pc, #392]	; (8005040 <_printf_i+0x23c>)
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	e017      	b.n	8004eea <_printf_i+0xe6>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	6819      	ldr	r1, [r3, #0]
 8004ebe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004ec2:	d003      	beq.n	8004ecc <_printf_i+0xc8>
 8004ec4:	1d08      	adds	r0, r1, #4
 8004ec6:	6018      	str	r0, [r3, #0]
 8004ec8:	680b      	ldr	r3, [r1, #0]
 8004eca:	e006      	b.n	8004eda <_printf_i+0xd6>
 8004ecc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ed0:	f101 0004 	add.w	r0, r1, #4
 8004ed4:	6018      	str	r0, [r3, #0]
 8004ed6:	d0f7      	beq.n	8004ec8 <_printf_i+0xc4>
 8004ed8:	880b      	ldrh	r3, [r1, #0]
 8004eda:	2a6f      	cmp	r2, #111	; 0x6f
 8004edc:	bf14      	ite	ne
 8004ede:	220a      	movne	r2, #10
 8004ee0:	2208      	moveq	r2, #8
 8004ee2:	4957      	ldr	r1, [pc, #348]	; (8005040 <_printf_i+0x23c>)
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004eea:	6865      	ldr	r5, [r4, #4]
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	60a5      	str	r5, [r4, #8]
 8004ef0:	f2c0 809c 	blt.w	800502c <_printf_i+0x228>
 8004ef4:	6820      	ldr	r0, [r4, #0]
 8004ef6:	f020 0004 	bic.w	r0, r0, #4
 8004efa:	6020      	str	r0, [r4, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d13f      	bne.n	8004f80 <_printf_i+0x17c>
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	f040 8095 	bne.w	8005030 <_printf_i+0x22c>
 8004f06:	4675      	mov	r5, lr
 8004f08:	2a08      	cmp	r2, #8
 8004f0a:	d10b      	bne.n	8004f24 <_printf_i+0x120>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	07da      	lsls	r2, r3, #31
 8004f10:	d508      	bpl.n	8004f24 <_printf_i+0x120>
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	6862      	ldr	r2, [r4, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	bfde      	ittt	le
 8004f1a:	2330      	movle	r3, #48	; 0x30
 8004f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f24:	ebae 0305 	sub.w	r3, lr, r5
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	f8cd 8000 	str.w	r8, [sp]
 8004f2e:	463b      	mov	r3, r7
 8004f30:	aa03      	add	r2, sp, #12
 8004f32:	4621      	mov	r1, r4
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff feed 	bl	8004d14 <_printf_common>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d155      	bne.n	8004fea <_printf_i+0x1e6>
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f42:	b005      	add	sp, #20
 8004f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f48:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004f4c:	493c      	ldr	r1, [pc, #240]	; (8005040 <_printf_i+0x23c>)
 8004f4e:	6822      	ldr	r2, [r4, #0]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f56:	f100 0504 	add.w	r5, r0, #4
 8004f5a:	601d      	str	r5, [r3, #0]
 8004f5c:	d001      	beq.n	8004f62 <_printf_i+0x15e>
 8004f5e:	6803      	ldr	r3, [r0, #0]
 8004f60:	e002      	b.n	8004f68 <_printf_i+0x164>
 8004f62:	0655      	lsls	r5, r2, #25
 8004f64:	d5fb      	bpl.n	8004f5e <_printf_i+0x15a>
 8004f66:	8803      	ldrh	r3, [r0, #0]
 8004f68:	07d0      	lsls	r0, r2, #31
 8004f6a:	bf44      	itt	mi
 8004f6c:	f042 0220 	orrmi.w	r2, r2, #32
 8004f70:	6022      	strmi	r2, [r4, #0]
 8004f72:	b91b      	cbnz	r3, 8004f7c <_printf_i+0x178>
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	f022 0220 	bic.w	r2, r2, #32
 8004f7a:	6022      	str	r2, [r4, #0]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	e7b1      	b.n	8004ee4 <_printf_i+0xe0>
 8004f80:	4675      	mov	r5, lr
 8004f82:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f86:	fb02 3310 	mls	r3, r2, r0, r3
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f90:	4603      	mov	r3, r0
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d1f5      	bne.n	8004f82 <_printf_i+0x17e>
 8004f96:	e7b7      	b.n	8004f08 <_printf_i+0x104>
 8004f98:	6808      	ldr	r0, [r1, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004fa0:	6949      	ldr	r1, [r1, #20]
 8004fa2:	d004      	beq.n	8004fae <_printf_i+0x1aa>
 8004fa4:	1d10      	adds	r0, r2, #4
 8004fa6:	6018      	str	r0, [r3, #0]
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	6019      	str	r1, [r3, #0]
 8004fac:	e007      	b.n	8004fbe <_printf_i+0x1ba>
 8004fae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fb2:	f102 0004 	add.w	r0, r2, #4
 8004fb6:	6018      	str	r0, [r3, #0]
 8004fb8:	6813      	ldr	r3, [r2, #0]
 8004fba:	d0f6      	beq.n	8004faa <_printf_i+0x1a6>
 8004fbc:	8019      	strh	r1, [r3, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4675      	mov	r5, lr
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	e7b1      	b.n	8004f2a <_printf_i+0x126>
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	1d11      	adds	r1, r2, #4
 8004fca:	6019      	str	r1, [r3, #0]
 8004fcc:	6815      	ldr	r5, [r2, #0]
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6862      	ldr	r2, [r4, #4]
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 f843 	bl	800505e <memchr>
 8004fd8:	b108      	cbz	r0, 8004fde <_printf_i+0x1da>
 8004fda:	1b40      	subs	r0, r0, r5
 8004fdc:	6060      	str	r0, [r4, #4]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe8:	e79f      	b.n	8004f2a <_printf_i+0x126>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	462a      	mov	r2, r5
 8004fee:	4639      	mov	r1, r7
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	47c0      	blx	r8
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d0a2      	beq.n	8004f3e <_printf_i+0x13a>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	079b      	lsls	r3, r3, #30
 8004ffc:	d507      	bpl.n	800500e <_printf_i+0x20a>
 8004ffe:	2500      	movs	r5, #0
 8005000:	f104 0919 	add.w	r9, r4, #25
 8005004:	68e3      	ldr	r3, [r4, #12]
 8005006:	9a03      	ldr	r2, [sp, #12]
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	429d      	cmp	r5, r3
 800500c:	db05      	blt.n	800501a <_printf_i+0x216>
 800500e:	68e0      	ldr	r0, [r4, #12]
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	4298      	cmp	r0, r3
 8005014:	bfb8      	it	lt
 8005016:	4618      	movlt	r0, r3
 8005018:	e793      	b.n	8004f42 <_printf_i+0x13e>
 800501a:	2301      	movs	r3, #1
 800501c:	464a      	mov	r2, r9
 800501e:	4639      	mov	r1, r7
 8005020:	4630      	mov	r0, r6
 8005022:	47c0      	blx	r8
 8005024:	3001      	adds	r0, #1
 8005026:	d08a      	beq.n	8004f3e <_printf_i+0x13a>
 8005028:	3501      	adds	r5, #1
 800502a:	e7eb      	b.n	8005004 <_printf_i+0x200>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1a7      	bne.n	8004f80 <_printf_i+0x17c>
 8005030:	780b      	ldrb	r3, [r1, #0]
 8005032:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005036:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800503a:	e765      	b.n	8004f08 <_printf_i+0x104>
 800503c:	0800534a 	.word	0x0800534a
 8005040:	08005339 	.word	0x08005339

08005044 <__ascii_wctomb>:
 8005044:	b149      	cbz	r1, 800505a <__ascii_wctomb+0x16>
 8005046:	2aff      	cmp	r2, #255	; 0xff
 8005048:	bf8b      	itete	hi
 800504a:	238a      	movhi	r3, #138	; 0x8a
 800504c:	700a      	strbls	r2, [r1, #0]
 800504e:	6003      	strhi	r3, [r0, #0]
 8005050:	2001      	movls	r0, #1
 8005052:	bf88      	it	hi
 8005054:	f04f 30ff 	movhi.w	r0, #4294967295
 8005058:	4770      	bx	lr
 800505a:	4608      	mov	r0, r1
 800505c:	4770      	bx	lr

0800505e <memchr>:
 800505e:	b510      	push	{r4, lr}
 8005060:	b2c9      	uxtb	r1, r1
 8005062:	4402      	add	r2, r0
 8005064:	4290      	cmp	r0, r2
 8005066:	4603      	mov	r3, r0
 8005068:	d101      	bne.n	800506e <memchr+0x10>
 800506a:	2000      	movs	r0, #0
 800506c:	bd10      	pop	{r4, pc}
 800506e:	781c      	ldrb	r4, [r3, #0]
 8005070:	3001      	adds	r0, #1
 8005072:	428c      	cmp	r4, r1
 8005074:	d1f6      	bne.n	8005064 <memchr+0x6>
 8005076:	4618      	mov	r0, r3
 8005078:	bd10      	pop	{r4, pc}

0800507a <memcpy>:
 800507a:	b510      	push	{r4, lr}
 800507c:	1e43      	subs	r3, r0, #1
 800507e:	440a      	add	r2, r1
 8005080:	4291      	cmp	r1, r2
 8005082:	d100      	bne.n	8005086 <memcpy+0xc>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800508a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800508e:	e7f7      	b.n	8005080 <memcpy+0x6>

08005090 <memmove>:
 8005090:	4288      	cmp	r0, r1
 8005092:	b510      	push	{r4, lr}
 8005094:	eb01 0302 	add.w	r3, r1, r2
 8005098:	d803      	bhi.n	80050a2 <memmove+0x12>
 800509a:	1e42      	subs	r2, r0, #1
 800509c:	4299      	cmp	r1, r3
 800509e:	d10c      	bne.n	80050ba <memmove+0x2a>
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	4298      	cmp	r0, r3
 80050a4:	d2f9      	bcs.n	800509a <memmove+0xa>
 80050a6:	1881      	adds	r1, r0, r2
 80050a8:	1ad2      	subs	r2, r2, r3
 80050aa:	42d3      	cmn	r3, r2
 80050ac:	d100      	bne.n	80050b0 <memmove+0x20>
 80050ae:	bd10      	pop	{r4, pc}
 80050b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80050b8:	e7f7      	b.n	80050aa <memmove+0x1a>
 80050ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80050c2:	e7eb      	b.n	800509c <memmove+0xc>

080050c4 <_free_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4605      	mov	r5, r0
 80050c8:	2900      	cmp	r1, #0
 80050ca:	d043      	beq.n	8005154 <_free_r+0x90>
 80050cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d0:	1f0c      	subs	r4, r1, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfb8      	it	lt
 80050d6:	18e4      	addlt	r4, r4, r3
 80050d8:	f000 f8d4 	bl	8005284 <__malloc_lock>
 80050dc:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <_free_r+0x94>)
 80050de:	6813      	ldr	r3, [r2, #0]
 80050e0:	4610      	mov	r0, r2
 80050e2:	b933      	cbnz	r3, 80050f2 <_free_r+0x2e>
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	6014      	str	r4, [r2, #0]
 80050e8:	4628      	mov	r0, r5
 80050ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ee:	f000 b8ca 	b.w	8005286 <__malloc_unlock>
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	d90b      	bls.n	800510e <_free_r+0x4a>
 80050f6:	6821      	ldr	r1, [r4, #0]
 80050f8:	1862      	adds	r2, r4, r1
 80050fa:	4293      	cmp	r3, r2
 80050fc:	bf01      	itttt	eq
 80050fe:	681a      	ldreq	r2, [r3, #0]
 8005100:	685b      	ldreq	r3, [r3, #4]
 8005102:	1852      	addeq	r2, r2, r1
 8005104:	6022      	streq	r2, [r4, #0]
 8005106:	6063      	str	r3, [r4, #4]
 8005108:	6004      	str	r4, [r0, #0]
 800510a:	e7ed      	b.n	80050e8 <_free_r+0x24>
 800510c:	4613      	mov	r3, r2
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	b10a      	cbz	r2, 8005116 <_free_r+0x52>
 8005112:	42a2      	cmp	r2, r4
 8005114:	d9fa      	bls.n	800510c <_free_r+0x48>
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	1858      	adds	r0, r3, r1
 800511a:	42a0      	cmp	r0, r4
 800511c:	d10b      	bne.n	8005136 <_free_r+0x72>
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	4401      	add	r1, r0
 8005122:	1858      	adds	r0, r3, r1
 8005124:	4282      	cmp	r2, r0
 8005126:	6019      	str	r1, [r3, #0]
 8005128:	d1de      	bne.n	80050e8 <_free_r+0x24>
 800512a:	6810      	ldr	r0, [r2, #0]
 800512c:	6852      	ldr	r2, [r2, #4]
 800512e:	4401      	add	r1, r0
 8005130:	6019      	str	r1, [r3, #0]
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	e7d8      	b.n	80050e8 <_free_r+0x24>
 8005136:	d902      	bls.n	800513e <_free_r+0x7a>
 8005138:	230c      	movs	r3, #12
 800513a:	602b      	str	r3, [r5, #0]
 800513c:	e7d4      	b.n	80050e8 <_free_r+0x24>
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	1821      	adds	r1, r4, r0
 8005142:	428a      	cmp	r2, r1
 8005144:	bf01      	itttt	eq
 8005146:	6811      	ldreq	r1, [r2, #0]
 8005148:	6852      	ldreq	r2, [r2, #4]
 800514a:	1809      	addeq	r1, r1, r0
 800514c:	6021      	streq	r1, [r4, #0]
 800514e:	6062      	str	r2, [r4, #4]
 8005150:	605c      	str	r4, [r3, #4]
 8005152:	e7c9      	b.n	80050e8 <_free_r+0x24>
 8005154:	bd38      	pop	{r3, r4, r5, pc}
 8005156:	bf00      	nop
 8005158:	200006d4 	.word	0x200006d4

0800515c <_malloc_r>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	1ccd      	adds	r5, r1, #3
 8005160:	f025 0503 	bic.w	r5, r5, #3
 8005164:	3508      	adds	r5, #8
 8005166:	2d0c      	cmp	r5, #12
 8005168:	bf38      	it	cc
 800516a:	250c      	movcc	r5, #12
 800516c:	2d00      	cmp	r5, #0
 800516e:	4606      	mov	r6, r0
 8005170:	db01      	blt.n	8005176 <_malloc_r+0x1a>
 8005172:	42a9      	cmp	r1, r5
 8005174:	d903      	bls.n	800517e <_malloc_r+0x22>
 8005176:	230c      	movs	r3, #12
 8005178:	6033      	str	r3, [r6, #0]
 800517a:	2000      	movs	r0, #0
 800517c:	bd70      	pop	{r4, r5, r6, pc}
 800517e:	f000 f881 	bl	8005284 <__malloc_lock>
 8005182:	4a23      	ldr	r2, [pc, #140]	; (8005210 <_malloc_r+0xb4>)
 8005184:	6814      	ldr	r4, [r2, #0]
 8005186:	4621      	mov	r1, r4
 8005188:	b991      	cbnz	r1, 80051b0 <_malloc_r+0x54>
 800518a:	4c22      	ldr	r4, [pc, #136]	; (8005214 <_malloc_r+0xb8>)
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	b91b      	cbnz	r3, 8005198 <_malloc_r+0x3c>
 8005190:	4630      	mov	r0, r6
 8005192:	f000 f867 	bl	8005264 <_sbrk_r>
 8005196:	6020      	str	r0, [r4, #0]
 8005198:	4629      	mov	r1, r5
 800519a:	4630      	mov	r0, r6
 800519c:	f000 f862 	bl	8005264 <_sbrk_r>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d126      	bne.n	80051f2 <_malloc_r+0x96>
 80051a4:	230c      	movs	r3, #12
 80051a6:	4630      	mov	r0, r6
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	f000 f86c 	bl	8005286 <__malloc_unlock>
 80051ae:	e7e4      	b.n	800517a <_malloc_r+0x1e>
 80051b0:	680b      	ldr	r3, [r1, #0]
 80051b2:	1b5b      	subs	r3, r3, r5
 80051b4:	d41a      	bmi.n	80051ec <_malloc_r+0x90>
 80051b6:	2b0b      	cmp	r3, #11
 80051b8:	d90f      	bls.n	80051da <_malloc_r+0x7e>
 80051ba:	600b      	str	r3, [r1, #0]
 80051bc:	18cc      	adds	r4, r1, r3
 80051be:	50cd      	str	r5, [r1, r3]
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f860 	bl	8005286 <__malloc_unlock>
 80051c6:	f104 000b 	add.w	r0, r4, #11
 80051ca:	1d23      	adds	r3, r4, #4
 80051cc:	f020 0007 	bic.w	r0, r0, #7
 80051d0:	1ac3      	subs	r3, r0, r3
 80051d2:	d01b      	beq.n	800520c <_malloc_r+0xb0>
 80051d4:	425a      	negs	r2, r3
 80051d6:	50e2      	str	r2, [r4, r3]
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	428c      	cmp	r4, r1
 80051dc:	bf0b      	itete	eq
 80051de:	6863      	ldreq	r3, [r4, #4]
 80051e0:	684b      	ldrne	r3, [r1, #4]
 80051e2:	6013      	streq	r3, [r2, #0]
 80051e4:	6063      	strne	r3, [r4, #4]
 80051e6:	bf18      	it	ne
 80051e8:	460c      	movne	r4, r1
 80051ea:	e7e9      	b.n	80051c0 <_malloc_r+0x64>
 80051ec:	460c      	mov	r4, r1
 80051ee:	6849      	ldr	r1, [r1, #4]
 80051f0:	e7ca      	b.n	8005188 <_malloc_r+0x2c>
 80051f2:	1cc4      	adds	r4, r0, #3
 80051f4:	f024 0403 	bic.w	r4, r4, #3
 80051f8:	42a0      	cmp	r0, r4
 80051fa:	d005      	beq.n	8005208 <_malloc_r+0xac>
 80051fc:	1a21      	subs	r1, r4, r0
 80051fe:	4630      	mov	r0, r6
 8005200:	f000 f830 	bl	8005264 <_sbrk_r>
 8005204:	3001      	adds	r0, #1
 8005206:	d0cd      	beq.n	80051a4 <_malloc_r+0x48>
 8005208:	6025      	str	r5, [r4, #0]
 800520a:	e7d9      	b.n	80051c0 <_malloc_r+0x64>
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	bf00      	nop
 8005210:	200006d4 	.word	0x200006d4
 8005214:	200006d8 	.word	0x200006d8

08005218 <_realloc_r>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	4607      	mov	r7, r0
 800521c:	4614      	mov	r4, r2
 800521e:	460e      	mov	r6, r1
 8005220:	b921      	cbnz	r1, 800522c <_realloc_r+0x14>
 8005222:	4611      	mov	r1, r2
 8005224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005228:	f7ff bf98 	b.w	800515c <_malloc_r>
 800522c:	b922      	cbnz	r2, 8005238 <_realloc_r+0x20>
 800522e:	f7ff ff49 	bl	80050c4 <_free_r>
 8005232:	4625      	mov	r5, r4
 8005234:	4628      	mov	r0, r5
 8005236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005238:	f000 f826 	bl	8005288 <_malloc_usable_size_r>
 800523c:	4284      	cmp	r4, r0
 800523e:	d90f      	bls.n	8005260 <_realloc_r+0x48>
 8005240:	4621      	mov	r1, r4
 8005242:	4638      	mov	r0, r7
 8005244:	f7ff ff8a 	bl	800515c <_malloc_r>
 8005248:	4605      	mov	r5, r0
 800524a:	2800      	cmp	r0, #0
 800524c:	d0f2      	beq.n	8005234 <_realloc_r+0x1c>
 800524e:	4631      	mov	r1, r6
 8005250:	4622      	mov	r2, r4
 8005252:	f7ff ff12 	bl	800507a <memcpy>
 8005256:	4631      	mov	r1, r6
 8005258:	4638      	mov	r0, r7
 800525a:	f7ff ff33 	bl	80050c4 <_free_r>
 800525e:	e7e9      	b.n	8005234 <_realloc_r+0x1c>
 8005260:	4635      	mov	r5, r6
 8005262:	e7e7      	b.n	8005234 <_realloc_r+0x1c>

08005264 <_sbrk_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	2300      	movs	r3, #0
 8005268:	4c05      	ldr	r4, [pc, #20]	; (8005280 <_sbrk_r+0x1c>)
 800526a:	4605      	mov	r5, r0
 800526c:	4608      	mov	r0, r1
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	f7ff f856 	bl	8004320 <_sbrk>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_sbrk_r+0x1a>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	b103      	cbz	r3, 800527e <_sbrk_r+0x1a>
 800527c:	602b      	str	r3, [r5, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	20001054 	.word	0x20001054

08005284 <__malloc_lock>:
 8005284:	4770      	bx	lr

08005286 <__malloc_unlock>:
 8005286:	4770      	bx	lr

08005288 <_malloc_usable_size_r>:
 8005288:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800528c:	2800      	cmp	r0, #0
 800528e:	f1a0 0004 	sub.w	r0, r0, #4
 8005292:	bfbc      	itt	lt
 8005294:	580b      	ldrlt	r3, [r1, r0]
 8005296:	18c0      	addlt	r0, r0, r3
 8005298:	4770      	bx	lr
	...

0800529c <_init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr

080052a8 <_fini>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr
